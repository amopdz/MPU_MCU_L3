
L3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000252c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002668  08002668  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002668  08002668  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002668  08002668  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002668  08002668  00012668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000020  08002690  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002690  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009019  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a07  00000000  00000000  00029062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a5c  00000000  00000000  0002bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba09  00000000  00000000  000427c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823a2  00000000  00000000  0004e1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d056f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b8  00000000  00000000  000d05c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002620 	.word	0x08002620

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002620 	.word	0x08002620

0800014c <display7Seg>:
		segOut=0,
		enOut=0;

//FUNCTIONS
//7Seg & 7Seg buffer & Driver code for these functions
void display7Seg(uint8_t number){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if(number>=0 && number<10)segOut=digitMask[number];
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b09      	cmp	r3, #9
 800015a:	d804      	bhi.n	8000166 <display7Seg+0x1a>
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	4a04      	ldr	r2, [pc, #16]	; (8000170 <display7Seg+0x24>)
 8000160:	5cd2      	ldrb	r2, [r2, r3]
 8000162:	4b04      	ldr	r3, [pc, #16]	; (8000174 <display7Seg+0x28>)
 8000164:	701a      	strb	r2, [r3, #0]
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	08002638 	.word	0x08002638
 8000174:	2000003c 	.word	0x2000003c

08000178 <update7Seg>:

void update7Seg(int index){
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	display7Seg(led_buffer[index]);
 8000180:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <update7Seg+0x60>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4618      	mov	r0, r3
 800018a:	f7ff ffdf 	bl	800014c <display7Seg>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2b03      	cmp	r3, #3
 8000192:	d81b      	bhi.n	80001cc <update7Seg+0x54>
 8000194:	a201      	add	r2, pc, #4	; (adr r2, 800019c <update7Seg+0x24>)
 8000196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019a:	bf00      	nop
 800019c:	080001ad 	.word	0x080001ad
 80001a0:	080001b5 	.word	0x080001b5
 80001a4:	080001bd 	.word	0x080001bd
 80001a8:	080001c5 	.word	0x080001c5
	switch(index){
		case 0:
			enOut=0xE;
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <update7Seg+0x64>)
 80001ae:	220e      	movs	r2, #14
 80001b0:	701a      	strb	r2, [r3, #0]
			break;
 80001b2:	e00c      	b.n	80001ce <update7Seg+0x56>
		case 1:
			enOut=0xD;
 80001b4:	4b09      	ldr	r3, [pc, #36]	; (80001dc <update7Seg+0x64>)
 80001b6:	220d      	movs	r2, #13
 80001b8:	701a      	strb	r2, [r3, #0]
			break;
 80001ba:	e008      	b.n	80001ce <update7Seg+0x56>
		case 2:
			enOut=0xB;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <update7Seg+0x64>)
 80001be:	220b      	movs	r2, #11
 80001c0:	701a      	strb	r2, [r3, #0]
			break;
 80001c2:	e004      	b.n	80001ce <update7Seg+0x56>
		case 3:
			enOut=0x7;
 80001c4:	4b05      	ldr	r3, [pc, #20]	; (80001dc <update7Seg+0x64>)
 80001c6:	2207      	movs	r2, #7
 80001c8:	701a      	strb	r2, [r3, #0]
			break;
 80001ca:	e000      	b.n	80001ce <update7Seg+0x56>
		default:
			break;
 80001cc:	bf00      	nop
	}
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	20000048 	.word	0x20000048
 80001dc:	2000003d 	.word	0x2000003d

080001e0 <update7SegMain>:

void update7SegMain(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	led7SegCounter=led7SegCounter>=MAX7SEG-1?0:led7SegCounter+1;
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <update7SegMain+0x2c>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	d804      	bhi.n	80001f6 <update7SegMain+0x16>
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <update7SegMain+0x2c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	e000      	b.n	80001f8 <update7SegMain+0x18>
 80001f6:	2300      	movs	r3, #0
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <update7SegMain+0x2c>)
 80001fa:	7013      	strb	r3, [r2, #0]
	update7Seg(led7SegCounter);
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <update7SegMain+0x2c>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f7ff ffb9 	bl	8000178 <update7Seg>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000000 	.word	0x20000000

08000210 <displayAll>:

//Registering output to pins
void displayAll(){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	GPIOA->ODR=(traff1Out<<12)|(traff2Out<<4);
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <displayAll+0x30>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	031a      	lsls	r2, r3, #12
 800021a:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <displayAll+0x34>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	011b      	lsls	r3, r3, #4
 8000220:	431a      	orrs	r2, r3
 8000222:	4b09      	ldr	r3, [pc, #36]	; (8000248 <displayAll+0x38>)
 8000224:	60da      	str	r2, [r3, #12]
	GPIOB->ODR=(enOut<<8)|(segOut);
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <displayAll+0x3c>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	021b      	lsls	r3, r3, #8
 800022c:	4a08      	ldr	r2, [pc, #32]	; (8000250 <displayAll+0x40>)
 800022e:	7812      	ldrb	r2, [r2, #0]
 8000230:	431a      	orrs	r2, r3
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <displayAll+0x44>)
 8000234:	60da      	str	r2, [r3, #12]
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	2000004f 	.word	0x2000004f
 8000244:	2000004e 	.word	0x2000004e
 8000248:	40010800 	.word	0x40010800
 800024c:	2000003d 	.word	0x2000003d
 8000250:	2000003c 	.word	0x2000003c
 8000254:	40010c00 	.word	0x40010c00

08000258 <fsm_automatic>:
		buttonFlag[N0_OF_BUTTONS],
		traffCond,
		traff1Out,
		traff2Out;

void fsm_automatic(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	switch(mode){
 800025c:	4b94      	ldr	r3, [pc, #592]	; (80004b0 <fsm_automatic+0x258>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b04      	cmp	r3, #4
 8000262:	f200 81ff 	bhi.w	8000664 <fsm_automatic+0x40c>
 8000266:	a201      	add	r2, pc, #4	; (adr r2, 800026c <fsm_automatic+0x14>)
 8000268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026c:	08000281 	.word	0x08000281
 8000270:	08000397 	.word	0x08000397
 8000274:	080003e7 	.word	0x080003e7
 8000278:	080004ed 	.word	0x080004ed
 800027c:	080005b1 	.word	0x080005b1
		case INIT:
			durationRedWaiting=durationRed;
 8000280:	4b8c      	ldr	r3, [pc, #560]	; (80004b4 <fsm_automatic+0x25c>)
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <fsm_automatic+0x260>)
 8000286:	701a      	strb	r2, [r3, #0]
			durationYellowWaiting=durationYellow;
 8000288:	4b8c      	ldr	r3, [pc, #560]	; (80004bc <fsm_automatic+0x264>)
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	4b8c      	ldr	r3, [pc, #560]	; (80004c0 <fsm_automatic+0x268>)
 800028e:	701a      	strb	r2, [r3, #0]
			durationGreenWaiting=durationGreen;
 8000290:	4b8c      	ldr	r3, [pc, #560]	; (80004c4 <fsm_automatic+0x26c>)
 8000292:	781a      	ldrb	r2, [r3, #0]
 8000294:	4b8c      	ldr	r3, [pc, #560]	; (80004c8 <fsm_automatic+0x270>)
 8000296:	701a      	strb	r2, [r3, #0]
			if(durationRed>durationYellow+durationGreen){
 8000298:	4b86      	ldr	r3, [pc, #536]	; (80004b4 <fsm_automatic+0x25c>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	461a      	mov	r2, r3
 800029e:	4b87      	ldr	r3, [pc, #540]	; (80004bc <fsm_automatic+0x264>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	4619      	mov	r1, r3
 80002a4:	4b87      	ldr	r3, [pc, #540]	; (80004c4 <fsm_automatic+0x26c>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	440b      	add	r3, r1
 80002aa:	429a      	cmp	r2, r3
 80002ac:	dd08      	ble.n	80002c0 <fsm_automatic+0x68>
				durationGreen=durationRed-durationYellow;
 80002ae:	4b81      	ldr	r3, [pc, #516]	; (80004b4 <fsm_automatic+0x25c>)
 80002b0:	781a      	ldrb	r2, [r3, #0]
 80002b2:	4b82      	ldr	r3, [pc, #520]	; (80004bc <fsm_automatic+0x264>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b82      	ldr	r3, [pc, #520]	; (80004c4 <fsm_automatic+0x26c>)
 80002bc:	701a      	strb	r2, [r3, #0]
 80002be:	e024      	b.n	800030a <fsm_automatic+0xb2>
			}else if(durationRed<durationYellow+durationGreen){
 80002c0:	4b7c      	ldr	r3, [pc, #496]	; (80004b4 <fsm_automatic+0x25c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	461a      	mov	r2, r3
 80002c6:	4b7d      	ldr	r3, [pc, #500]	; (80004bc <fsm_automatic+0x264>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4619      	mov	r1, r3
 80002cc:	4b7d      	ldr	r3, [pc, #500]	; (80004c4 <fsm_automatic+0x26c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	440b      	add	r3, r1
 80002d2:	429a      	cmp	r2, r3
 80002d4:	da19      	bge.n	800030a <fsm_automatic+0xb2>
				if(durationGreen+durationYellow>99){
 80002d6:	4b7b      	ldr	r3, [pc, #492]	; (80004c4 <fsm_automatic+0x26c>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b77      	ldr	r3, [pc, #476]	; (80004bc <fsm_automatic+0x264>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	4413      	add	r3, r2
 80002e2:	2b63      	cmp	r3, #99	; 0x63
 80002e4:	dd09      	ble.n	80002fa <fsm_automatic+0xa2>
					durationRed=99;
 80002e6:	4b73      	ldr	r3, [pc, #460]	; (80004b4 <fsm_automatic+0x25c>)
 80002e8:	2263      	movs	r2, #99	; 0x63
 80002ea:	701a      	strb	r2, [r3, #0]
					durationGreen=96;
 80002ec:	4b75      	ldr	r3, [pc, #468]	; (80004c4 <fsm_automatic+0x26c>)
 80002ee:	2260      	movs	r2, #96	; 0x60
 80002f0:	701a      	strb	r2, [r3, #0]
					durationYellow=3;
 80002f2:	4b72      	ldr	r3, [pc, #456]	; (80004bc <fsm_automatic+0x264>)
 80002f4:	2203      	movs	r2, #3
 80002f6:	701a      	strb	r2, [r3, #0]
 80002f8:	e007      	b.n	800030a <fsm_automatic+0xb2>
				}else durationRed=durationGreen+durationYellow;
 80002fa:	4b72      	ldr	r3, [pc, #456]	; (80004c4 <fsm_automatic+0x26c>)
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	4b6f      	ldr	r3, [pc, #444]	; (80004bc <fsm_automatic+0x264>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4413      	add	r3, r2
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b6b      	ldr	r3, [pc, #428]	; (80004b4 <fsm_automatic+0x25c>)
 8000308:	701a      	strb	r2, [r3, #0]
			}
			light1Time=durationRed;
 800030a:	4b6a      	ldr	r3, [pc, #424]	; (80004b4 <fsm_automatic+0x25c>)
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	4b6f      	ldr	r3, [pc, #444]	; (80004cc <fsm_automatic+0x274>)
 8000310:	701a      	strb	r2, [r3, #0]
			light2Time=durationGreen;
 8000312:	4b6c      	ldr	r3, [pc, #432]	; (80004c4 <fsm_automatic+0x26c>)
 8000314:	781a      	ldrb	r2, [r3, #0]
 8000316:	4b6e      	ldr	r3, [pc, #440]	; (80004d0 <fsm_automatic+0x278>)
 8000318:	701a      	strb	r2, [r3, #0]
			traffCond=RG;
 800031a:	4b6e      	ldr	r3, [pc, #440]	; (80004d4 <fsm_automatic+0x27c>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
			led_buffer[0]=light1Time/10;
 8000320:	4b6a      	ldr	r3, [pc, #424]	; (80004cc <fsm_automatic+0x274>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	4a6c      	ldr	r2, [pc, #432]	; (80004d8 <fsm_automatic+0x280>)
 8000326:	fba2 2303 	umull	r2, r3, r2, r3
 800032a:	08db      	lsrs	r3, r3, #3
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b6b      	ldr	r3, [pc, #428]	; (80004dc <fsm_automatic+0x284>)
 8000330:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=light1Time%10;
 8000332:	4b66      	ldr	r3, [pc, #408]	; (80004cc <fsm_automatic+0x274>)
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b68      	ldr	r3, [pc, #416]	; (80004d8 <fsm_automatic+0x280>)
 8000338:	fba3 1302 	umull	r1, r3, r3, r2
 800033c:	08d9      	lsrs	r1, r3, #3
 800033e:	460b      	mov	r3, r1
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	440b      	add	r3, r1
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	1ad3      	subs	r3, r2, r3
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b64      	ldr	r3, [pc, #400]	; (80004dc <fsm_automatic+0x284>)
 800034c:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=light2Time/10;
 800034e:	4b60      	ldr	r3, [pc, #384]	; (80004d0 <fsm_automatic+0x278>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	4a61      	ldr	r2, [pc, #388]	; (80004d8 <fsm_automatic+0x280>)
 8000354:	fba2 2303 	umull	r2, r3, r2, r3
 8000358:	08db      	lsrs	r3, r3, #3
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b5f      	ldr	r3, [pc, #380]	; (80004dc <fsm_automatic+0x284>)
 800035e:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=light2Time%10;
 8000360:	4b5b      	ldr	r3, [pc, #364]	; (80004d0 <fsm_automatic+0x278>)
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	4b5c      	ldr	r3, [pc, #368]	; (80004d8 <fsm_automatic+0x280>)
 8000366:	fba3 1302 	umull	r1, r3, r3, r2
 800036a:	08d9      	lsrs	r1, r3, #3
 800036c:	460b      	mov	r3, r1
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	440b      	add	r3, r1
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b58      	ldr	r3, [pc, #352]	; (80004dc <fsm_automatic+0x284>)
 800037a:	70da      	strb	r2, [r3, #3]
			buttonFlag[0]=0;
 800037c:	4b58      	ldr	r3, [pc, #352]	; (80004e0 <fsm_automatic+0x288>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
			buttonFlag[1]=0;
 8000382:	4b57      	ldr	r3, [pc, #348]	; (80004e0 <fsm_automatic+0x288>)
 8000384:	2200      	movs	r2, #0
 8000386:	705a      	strb	r2, [r3, #1]
			buttonFlag[2]=0;
 8000388:	4b55      	ldr	r3, [pc, #340]	; (80004e0 <fsm_automatic+0x288>)
 800038a:	2200      	movs	r2, #0
 800038c:	709a      	strb	r2, [r3, #2]
			mode=NORMAL;
 800038e:	4b48      	ldr	r3, [pc, #288]	; (80004b0 <fsm_automatic+0x258>)
 8000390:	2201      	movs	r2, #1
 8000392:	701a      	strb	r2, [r3, #0]
			break;
 8000394:	e166      	b.n	8000664 <fsm_automatic+0x40c>
		case NORMAL:
			if(is_button_pressed(0))buttonFlag[0]=1;
 8000396:	2000      	movs	r0, #0
 8000398:	f000 fb96 	bl	8000ac8 <is_button_pressed>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d002      	beq.n	80003a8 <fsm_automatic+0x150>
 80003a2:	4b4f      	ldr	r3, [pc, #316]	; (80004e0 <fsm_automatic+0x288>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 fb8d 	bl	8000ac8 <is_button_pressed>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f040 8150 	bne.w	8000656 <fsm_automatic+0x3fe>
 80003b6:	4b4a      	ldr	r3, [pc, #296]	; (80004e0 <fsm_automatic+0x288>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f000 814b 	beq.w	8000656 <fsm_automatic+0x3fe>
				mode=MOD_RED;
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <fsm_automatic+0x258>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	701a      	strb	r2, [r3, #0]
				traff1Out=6;
 80003c6:	4b47      	ldr	r3, [pc, #284]	; (80004e4 <fsm_automatic+0x28c>)
 80003c8:	2206      	movs	r2, #6
 80003ca:	701a      	strb	r2, [r3, #0]
				traff2Out=6;
 80003cc:	4b46      	ldr	r3, [pc, #280]	; (80004e8 <fsm_automatic+0x290>)
 80003ce:	2206      	movs	r2, #6
 80003d0:	701a      	strb	r2, [r3, #0]
				buttonFlag[0]=0;
 80003d2:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <fsm_automatic+0x288>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
				buttonFlag[1]=0;
 80003d8:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <fsm_automatic+0x288>)
 80003da:	2200      	movs	r2, #0
 80003dc:	705a      	strb	r2, [r3, #1]
				buttonFlag[2]=0;
 80003de:	4b40      	ldr	r3, [pc, #256]	; (80004e0 <fsm_automatic+0x288>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	709a      	strb	r2, [r3, #2]
			}
			break;
 80003e4:	e137      	b.n	8000656 <fsm_automatic+0x3fe>
		case MOD_RED:
			if(is_button_pressed(0))buttonFlag[0]=1;
 80003e6:	2000      	movs	r0, #0
 80003e8:	f000 fb6e 	bl	8000ac8 <is_button_pressed>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d002      	beq.n	80003f8 <fsm_automatic+0x1a0>
 80003f2:	4b3b      	ldr	r3, [pc, #236]	; (80004e0 <fsm_automatic+0x288>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 fb65 	bl	8000ac8 <is_button_pressed>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d115      	bne.n	8000430 <fsm_automatic+0x1d8>
 8000404:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <fsm_automatic+0x288>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d011      	beq.n	8000430 <fsm_automatic+0x1d8>
				mode=MOD_YELLOW;
 800040c:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <fsm_automatic+0x258>)
 800040e:	2203      	movs	r2, #3
 8000410:	701a      	strb	r2, [r3, #0]
				traff1Out=3;
 8000412:	4b34      	ldr	r3, [pc, #208]	; (80004e4 <fsm_automatic+0x28c>)
 8000414:	2203      	movs	r2, #3
 8000416:	701a      	strb	r2, [r3, #0]
				traff2Out=3;
 8000418:	4b33      	ldr	r3, [pc, #204]	; (80004e8 <fsm_automatic+0x290>)
 800041a:	2203      	movs	r2, #3
 800041c:	701a      	strb	r2, [r3, #0]
				buttonFlag[0]=0;
 800041e:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <fsm_automatic+0x288>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
				buttonFlag[1]=0;
 8000424:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <fsm_automatic+0x288>)
 8000426:	2200      	movs	r2, #0
 8000428:	705a      	strb	r2, [r3, #1]
				buttonFlag[2]=0;
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <fsm_automatic+0x288>)
 800042c:	2200      	movs	r2, #0
 800042e:	709a      	strb	r2, [r3, #2]
			}
			if(is_button_pressed(1))buttonFlag[1]=1;
 8000430:	2001      	movs	r0, #1
 8000432:	f000 fb49 	bl	8000ac8 <is_button_pressed>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <fsm_automatic+0x1ea>
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <fsm_automatic+0x288>)
 800043e:	2201      	movs	r2, #1
 8000440:	705a      	strb	r2, [r3, #1]
			if((!is_button_pressed(1)) && (buttonFlag[1])){
 8000442:	2001      	movs	r0, #1
 8000444:	f000 fb40 	bl	8000ac8 <is_button_pressed>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d112      	bne.n	8000474 <fsm_automatic+0x21c>
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <fsm_automatic+0x288>)
 8000450:	785b      	ldrb	r3, [r3, #1]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d00e      	beq.n	8000474 <fsm_automatic+0x21c>
				durationRedWaiting = durationRedWaiting >= 99 ? 1 : durationRedWaiting + 1;
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <fsm_automatic+0x260>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b62      	cmp	r3, #98	; 0x62
 800045c:	d804      	bhi.n	8000468 <fsm_automatic+0x210>
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <fsm_automatic+0x260>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	b2db      	uxtb	r3, r3
 8000466:	e000      	b.n	800046a <fsm_automatic+0x212>
 8000468:	2301      	movs	r3, #1
 800046a:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <fsm_automatic+0x260>)
 800046c:	7013      	strb	r3, [r2, #0]
				buttonFlag[1]=0;
 800046e:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <fsm_automatic+0x288>)
 8000470:	2200      	movs	r2, #0
 8000472:	705a      	strb	r2, [r3, #1]
			}
			if(is_button_pressed(2))buttonFlag[2]=1;
 8000474:	2002      	movs	r0, #2
 8000476:	f000 fb27 	bl	8000ac8 <is_button_pressed>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <fsm_automatic+0x22e>
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <fsm_automatic+0x288>)
 8000482:	2201      	movs	r2, #1
 8000484:	709a      	strb	r2, [r3, #2]
			if((!is_button_pressed(2)) && (buttonFlag[2])){
 8000486:	2002      	movs	r0, #2
 8000488:	f000 fb1e 	bl	8000ac8 <is_button_pressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	f040 80e3 	bne.w	800065a <fsm_automatic+0x402>
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <fsm_automatic+0x288>)
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	2b00      	cmp	r3, #0
 800049a:	f000 80de 	beq.w	800065a <fsm_automatic+0x402>
				durationRed = durationRedWaiting;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <fsm_automatic+0x260>)
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <fsm_automatic+0x25c>)
 80004a4:	701a      	strb	r2, [r3, #0]
				buttonFlag[2]=0;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <fsm_automatic+0x288>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	709a      	strb	r2, [r3, #2]
			}
			break;
 80004ac:	e0d5      	b.n	800065a <fsm_automatic+0x402>
 80004ae:	bf00      	nop
 80004b0:	2000003e 	.word	0x2000003e
 80004b4:	20000001 	.word	0x20000001
 80004b8:	20000051 	.word	0x20000051
 80004bc:	20000002 	.word	0x20000002
 80004c0:	20000041 	.word	0x20000041
 80004c4:	20000003 	.word	0x20000003
 80004c8:	20000040 	.word	0x20000040
 80004cc:	20000050 	.word	0x20000050
 80004d0:	2000004c 	.word	0x2000004c
 80004d4:	2000004d 	.word	0x2000004d
 80004d8:	cccccccd 	.word	0xcccccccd
 80004dc:	20000048 	.word	0x20000048
 80004e0:	20000044 	.word	0x20000044
 80004e4:	2000004f 	.word	0x2000004f
 80004e8:	2000004e 	.word	0x2000004e
		case MOD_YELLOW:
			if(is_button_pressed(0))buttonFlag[0]=1;
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 faeb 	bl	8000ac8 <is_button_pressed>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <fsm_automatic+0x2a6>
 80004f8:	4b5b      	ldr	r3, [pc, #364]	; (8000668 <fsm_automatic+0x410>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 fae2 	bl	8000ac8 <is_button_pressed>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d115      	bne.n	8000536 <fsm_automatic+0x2de>
 800050a:	4b57      	ldr	r3, [pc, #348]	; (8000668 <fsm_automatic+0x410>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d011      	beq.n	8000536 <fsm_automatic+0x2de>
				mode=MOD_GREEN;
 8000512:	4b56      	ldr	r3, [pc, #344]	; (800066c <fsm_automatic+0x414>)
 8000514:	2204      	movs	r2, #4
 8000516:	701a      	strb	r2, [r3, #0]
				traff1Out=3;
 8000518:	4b55      	ldr	r3, [pc, #340]	; (8000670 <fsm_automatic+0x418>)
 800051a:	2203      	movs	r2, #3
 800051c:	701a      	strb	r2, [r3, #0]
				traff2Out=3;
 800051e:	4b55      	ldr	r3, [pc, #340]	; (8000674 <fsm_automatic+0x41c>)
 8000520:	2203      	movs	r2, #3
 8000522:	701a      	strb	r2, [r3, #0]
				buttonFlag[0]=0;
 8000524:	4b50      	ldr	r3, [pc, #320]	; (8000668 <fsm_automatic+0x410>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
				buttonFlag[1]=0;
 800052a:	4b4f      	ldr	r3, [pc, #316]	; (8000668 <fsm_automatic+0x410>)
 800052c:	2200      	movs	r2, #0
 800052e:	705a      	strb	r2, [r3, #1]
				buttonFlag[2]=0;
 8000530:	4b4d      	ldr	r3, [pc, #308]	; (8000668 <fsm_automatic+0x410>)
 8000532:	2200      	movs	r2, #0
 8000534:	709a      	strb	r2, [r3, #2]
			}
			if(is_button_pressed(1))buttonFlag[1]=1;
 8000536:	2001      	movs	r0, #1
 8000538:	f000 fac6 	bl	8000ac8 <is_button_pressed>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <fsm_automatic+0x2f0>
 8000542:	4b49      	ldr	r3, [pc, #292]	; (8000668 <fsm_automatic+0x410>)
 8000544:	2201      	movs	r2, #1
 8000546:	705a      	strb	r2, [r3, #1]
			if((!is_button_pressed(1)) && (buttonFlag[1])){
 8000548:	2001      	movs	r0, #1
 800054a:	f000 fabd 	bl	8000ac8 <is_button_pressed>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d112      	bne.n	800057a <fsm_automatic+0x322>
 8000554:	4b44      	ldr	r3, [pc, #272]	; (8000668 <fsm_automatic+0x410>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00e      	beq.n	800057a <fsm_automatic+0x322>
				durationYellowWaiting = durationYellowWaiting >= 99 ? 1 : durationYellowWaiting + 1;
 800055c:	4b46      	ldr	r3, [pc, #280]	; (8000678 <fsm_automatic+0x420>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b62      	cmp	r3, #98	; 0x62
 8000562:	d804      	bhi.n	800056e <fsm_automatic+0x316>
 8000564:	4b44      	ldr	r3, [pc, #272]	; (8000678 <fsm_automatic+0x420>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2db      	uxtb	r3, r3
 800056c:	e000      	b.n	8000570 <fsm_automatic+0x318>
 800056e:	2301      	movs	r3, #1
 8000570:	4a41      	ldr	r2, [pc, #260]	; (8000678 <fsm_automatic+0x420>)
 8000572:	7013      	strb	r3, [r2, #0]
				buttonFlag[1]=0;
 8000574:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <fsm_automatic+0x410>)
 8000576:	2200      	movs	r2, #0
 8000578:	705a      	strb	r2, [r3, #1]
			}
			if(is_button_pressed(2))buttonFlag[2]=1;
 800057a:	2002      	movs	r0, #2
 800057c:	f000 faa4 	bl	8000ac8 <is_button_pressed>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <fsm_automatic+0x334>
 8000586:	4b38      	ldr	r3, [pc, #224]	; (8000668 <fsm_automatic+0x410>)
 8000588:	2201      	movs	r2, #1
 800058a:	709a      	strb	r2, [r3, #2]
			if((!is_button_pressed(2)) && (buttonFlag[2])){
 800058c:	2002      	movs	r0, #2
 800058e:	f000 fa9b 	bl	8000ac8 <is_button_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d162      	bne.n	800065e <fsm_automatic+0x406>
 8000598:	4b33      	ldr	r3, [pc, #204]	; (8000668 <fsm_automatic+0x410>)
 800059a:	789b      	ldrb	r3, [r3, #2]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d05e      	beq.n	800065e <fsm_automatic+0x406>
				durationYellow = durationYellowWaiting;
 80005a0:	4b35      	ldr	r3, [pc, #212]	; (8000678 <fsm_automatic+0x420>)
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	4b35      	ldr	r3, [pc, #212]	; (800067c <fsm_automatic+0x424>)
 80005a6:	701a      	strb	r2, [r3, #0]
				buttonFlag[2]=2;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <fsm_automatic+0x410>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	709a      	strb	r2, [r3, #2]
			}
			break;
 80005ae:	e056      	b.n	800065e <fsm_automatic+0x406>
		case MOD_GREEN:
			if(is_button_pressed(0))buttonFlag[0]=1;
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fa89 	bl	8000ac8 <is_button_pressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <fsm_automatic+0x36a>
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <fsm_automatic+0x410>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fa80 	bl	8000ac8 <is_button_pressed>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <fsm_automatic+0x384>
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <fsm_automatic+0x410>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <fsm_automatic+0x384>
				mode=INIT;
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <fsm_automatic+0x414>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
			}
			if(is_button_pressed(1))buttonFlag[1]=1;
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fa73 	bl	8000ac8 <is_button_pressed>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <fsm_automatic+0x396>
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <fsm_automatic+0x410>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	705a      	strb	r2, [r3, #1]
			if((!is_button_pressed(1)) && (buttonFlag[1])){
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fa6a 	bl	8000ac8 <is_button_pressed>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d112      	bne.n	8000620 <fsm_automatic+0x3c8>
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <fsm_automatic+0x410>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00e      	beq.n	8000620 <fsm_automatic+0x3c8>
				durationGreenWaiting = durationGreenWaiting >= 99 ? 1 : durationGreenWaiting + 1;
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <fsm_automatic+0x428>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b62      	cmp	r3, #98	; 0x62
 8000608:	d804      	bhi.n	8000614 <fsm_automatic+0x3bc>
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <fsm_automatic+0x428>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	e000      	b.n	8000616 <fsm_automatic+0x3be>
 8000614:	2301      	movs	r3, #1
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <fsm_automatic+0x428>)
 8000618:	7013      	strb	r3, [r2, #0]
				buttonFlag[1]=0;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <fsm_automatic+0x410>)
 800061c:	2200      	movs	r2, #0
 800061e:	705a      	strb	r2, [r3, #1]
			}
			if(is_button_pressed(2))buttonFlag[2]=1;
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fa51 	bl	8000ac8 <is_button_pressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <fsm_automatic+0x3da>
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <fsm_automatic+0x410>)
 800062e:	2201      	movs	r2, #1
 8000630:	709a      	strb	r2, [r3, #2]
			if((!is_button_pressed(2)) && (buttonFlag[2])){
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fa48 	bl	8000ac8 <is_button_pressed>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d111      	bne.n	8000662 <fsm_automatic+0x40a>
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <fsm_automatic+0x410>)
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00d      	beq.n	8000662 <fsm_automatic+0x40a>
				durationGreen = durationGreenWaiting;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <fsm_automatic+0x428>)
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <fsm_automatic+0x42c>)
 800064c:	701a      	strb	r2, [r3, #0]
				buttonFlag[2]=0;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <fsm_automatic+0x410>)
 8000650:	2200      	movs	r2, #0
 8000652:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000654:	e005      	b.n	8000662 <fsm_automatic+0x40a>
			break;
 8000656:	bf00      	nop
 8000658:	e004      	b.n	8000664 <fsm_automatic+0x40c>
			break;
 800065a:	bf00      	nop
 800065c:	e002      	b.n	8000664 <fsm_automatic+0x40c>
			break;
 800065e:	bf00      	nop
 8000660:	e000      	b.n	8000664 <fsm_automatic+0x40c>
			break;
 8000662:	bf00      	nop
	}
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000044 	.word	0x20000044
 800066c:	2000003e 	.word	0x2000003e
 8000670:	2000004f 	.word	0x2000004f
 8000674:	2000004e 	.word	0x2000004e
 8000678:	20000041 	.word	0x20000041
 800067c:	20000002 	.word	0x20000002
 8000680:	20000040 	.word	0x20000040
 8000684:	20000003 	.word	0x20000003

08000688 <led_processing>:

void led_processing(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	switch(mode){
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <led_processing+0xf4>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d02c      	beq.n	80006ee <led_processing+0x66>
 8000694:	2b04      	cmp	r3, #4
 8000696:	dc3d      	bgt.n	8000714 <led_processing+0x8c>
 8000698:	2b02      	cmp	r3, #2
 800069a:	d002      	beq.n	80006a2 <led_processing+0x1a>
 800069c:	2b03      	cmp	r3, #3
 800069e:	d013      	beq.n	80006c8 <led_processing+0x40>
 80006a0:	e038      	b.n	8000714 <led_processing+0x8c>
		case MOD_RED:
			traff1Out=traff1Out==6?7:6;
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <led_processing+0xf8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d101      	bne.n	80006ae <led_processing+0x26>
 80006aa:	2207      	movs	r2, #7
 80006ac:	e000      	b.n	80006b0 <led_processing+0x28>
 80006ae:	2206      	movs	r2, #6
 80006b0:	4b33      	ldr	r3, [pc, #204]	; (8000780 <led_processing+0xf8>)
 80006b2:	701a      	strb	r2, [r3, #0]
			traff2Out=traff2Out==6?7:6;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <led_processing+0xfc>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d101      	bne.n	80006c0 <led_processing+0x38>
 80006bc:	2207      	movs	r2, #7
 80006be:	e000      	b.n	80006c2 <led_processing+0x3a>
 80006c0:	2206      	movs	r2, #6
 80006c2:	4b30      	ldr	r3, [pc, #192]	; (8000784 <led_processing+0xfc>)
 80006c4:	701a      	strb	r2, [r3, #0]
			break;
 80006c6:	e025      	b.n	8000714 <led_processing+0x8c>
		case MOD_YELLOW:
			traff1Out=traff1Out==5?7:5;
 80006c8:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <led_processing+0xf8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b05      	cmp	r3, #5
 80006ce:	d101      	bne.n	80006d4 <led_processing+0x4c>
 80006d0:	2207      	movs	r2, #7
 80006d2:	e000      	b.n	80006d6 <led_processing+0x4e>
 80006d4:	2205      	movs	r2, #5
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <led_processing+0xf8>)
 80006d8:	701a      	strb	r2, [r3, #0]
			traff2Out=traff2Out==5?7:5;
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <led_processing+0xfc>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b05      	cmp	r3, #5
 80006e0:	d101      	bne.n	80006e6 <led_processing+0x5e>
 80006e2:	2207      	movs	r2, #7
 80006e4:	e000      	b.n	80006e8 <led_processing+0x60>
 80006e6:	2205      	movs	r2, #5
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <led_processing+0xfc>)
 80006ea:	701a      	strb	r2, [r3, #0]
			break;
 80006ec:	e012      	b.n	8000714 <led_processing+0x8c>
		case MOD_GREEN:
			traff1Out=traff1Out==3?7:3;
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <led_processing+0xf8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d101      	bne.n	80006fa <led_processing+0x72>
 80006f6:	2207      	movs	r2, #7
 80006f8:	e000      	b.n	80006fc <led_processing+0x74>
 80006fa:	2203      	movs	r2, #3
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <led_processing+0xf8>)
 80006fe:	701a      	strb	r2, [r3, #0]
			traff2Out=traff2Out==3?7:3;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <led_processing+0xfc>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b03      	cmp	r3, #3
 8000706:	d101      	bne.n	800070c <led_processing+0x84>
 8000708:	2207      	movs	r2, #7
 800070a:	e000      	b.n	800070e <led_processing+0x86>
 800070c:	2203      	movs	r2, #3
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <led_processing+0xfc>)
 8000710:	701a      	strb	r2, [r3, #0]
			break;
 8000712:	bf00      	nop
	}
	if(mode!=NORMAL)return;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <led_processing+0xf4>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d12b      	bne.n	8000774 <led_processing+0xec>
	switch(traffCond){
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <led_processing+0x100>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d828      	bhi.n	8000776 <led_processing+0xee>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <led_processing+0xa4>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800073d 	.word	0x0800073d
 8000730:	0800074b 	.word	0x0800074b
 8000734:	08000759 	.word	0x08000759
 8000738:	08000767 	.word	0x08000767
		case RG:
			traff1Out=6;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <led_processing+0xf8>)
 800073e:	2206      	movs	r2, #6
 8000740:	701a      	strb	r2, [r3, #0]
			traff2Out=3;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <led_processing+0xfc>)
 8000744:	2203      	movs	r2, #3
 8000746:	701a      	strb	r2, [r3, #0]
			break;
 8000748:	e015      	b.n	8000776 <led_processing+0xee>
		case RY:
			traff1Out=6;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <led_processing+0xf8>)
 800074c:	2206      	movs	r2, #6
 800074e:	701a      	strb	r2, [r3, #0]
			traff2Out=5;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <led_processing+0xfc>)
 8000752:	2205      	movs	r2, #5
 8000754:	701a      	strb	r2, [r3, #0]
			break;
 8000756:	e00e      	b.n	8000776 <led_processing+0xee>
		case GR:
			traff1Out=3;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <led_processing+0xf8>)
 800075a:	2203      	movs	r2, #3
 800075c:	701a      	strb	r2, [r3, #0]
			traff2Out=6;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <led_processing+0xfc>)
 8000760:	2206      	movs	r2, #6
 8000762:	701a      	strb	r2, [r3, #0]
			break;
 8000764:	e007      	b.n	8000776 <led_processing+0xee>
		case YR:
			traff1Out=5;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <led_processing+0xf8>)
 8000768:	2205      	movs	r2, #5
 800076a:	701a      	strb	r2, [r3, #0]
			traff2Out=6;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <led_processing+0xfc>)
 800076e:	2206      	movs	r2, #6
 8000770:	701a      	strb	r2, [r3, #0]
			break;
 8000772:	e000      	b.n	8000776 <led_processing+0xee>
	if(mode!=NORMAL)return;
 8000774:	bf00      	nop
	}
}
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	2000003e 	.word	0x2000003e
 8000780:	2000004f 	.word	0x2000004f
 8000784:	2000004e 	.word	0x2000004e
 8000788:	2000004d 	.word	0x2000004d

0800078c <buffer_processing>:

void buffer_processing(){
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
	switch(mode){
 8000790:	4b95      	ldr	r3, [pc, #596]	; (80009e8 <buffer_processing+0x25c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d065      	beq.n	8000864 <buffer_processing+0xd8>
 8000798:	2b04      	cmp	r3, #4
 800079a:	f300 8092 	bgt.w	80008c2 <buffer_processing+0x136>
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d002      	beq.n	80007a8 <buffer_processing+0x1c>
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d02f      	beq.n	8000806 <buffer_processing+0x7a>
 80007a6:	e08c      	b.n	80008c2 <buffer_processing+0x136>
		case MOD_RED:
			led_buffer[0]=durationRedWaiting/10;
 80007a8:	4b90      	ldr	r3, [pc, #576]	; (80009ec <buffer_processing+0x260>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4a90      	ldr	r2, [pc, #576]	; (80009f0 <buffer_processing+0x264>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b8f      	ldr	r3, [pc, #572]	; (80009f4 <buffer_processing+0x268>)
 80007b8:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationRedWaiting%10;
 80007ba:	4b8c      	ldr	r3, [pc, #560]	; (80009ec <buffer_processing+0x260>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <buffer_processing+0x264>)
 80007c0:	fba3 1302 	umull	r1, r3, r3, r2
 80007c4:	08d9      	lsrs	r1, r3, #3
 80007c6:	460b      	mov	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b88      	ldr	r3, [pc, #544]	; (80009f4 <buffer_processing+0x268>)
 80007d4:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationRedWaiting/10;
 80007d6:	4b85      	ldr	r3, [pc, #532]	; (80009ec <buffer_processing+0x260>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4a85      	ldr	r2, [pc, #532]	; (80009f0 <buffer_processing+0x264>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b83      	ldr	r3, [pc, #524]	; (80009f4 <buffer_processing+0x268>)
 80007e6:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationRedWaiting%10;
 80007e8:	4b80      	ldr	r3, [pc, #512]	; (80009ec <buffer_processing+0x260>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b80      	ldr	r3, [pc, #512]	; (80009f0 <buffer_processing+0x264>)
 80007ee:	fba3 1302 	umull	r1, r3, r3, r2
 80007f2:	08d9      	lsrs	r1, r3, #3
 80007f4:	460b      	mov	r3, r1
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	440b      	add	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <buffer_processing+0x268>)
 8000802:	70da      	strb	r2, [r3, #3]
			break;
 8000804:	e05d      	b.n	80008c2 <buffer_processing+0x136>
		case MOD_YELLOW:
			led_buffer[0]=durationYellowWaiting/10;
 8000806:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <buffer_processing+0x26c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4a79      	ldr	r2, [pc, #484]	; (80009f0 <buffer_processing+0x264>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b77      	ldr	r3, [pc, #476]	; (80009f4 <buffer_processing+0x268>)
 8000816:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationYellowWaiting%10;
 8000818:	4b77      	ldr	r3, [pc, #476]	; (80009f8 <buffer_processing+0x26c>)
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	4b74      	ldr	r3, [pc, #464]	; (80009f0 <buffer_processing+0x264>)
 800081e:	fba3 1302 	umull	r1, r3, r3, r2
 8000822:	08d9      	lsrs	r1, r3, #3
 8000824:	460b      	mov	r3, r1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b70      	ldr	r3, [pc, #448]	; (80009f4 <buffer_processing+0x268>)
 8000832:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationYellowWaiting/10;
 8000834:	4b70      	ldr	r3, [pc, #448]	; (80009f8 <buffer_processing+0x26c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4a6d      	ldr	r2, [pc, #436]	; (80009f0 <buffer_processing+0x264>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b6c      	ldr	r3, [pc, #432]	; (80009f4 <buffer_processing+0x268>)
 8000844:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationYellowWaiting%10;
 8000846:	4b6c      	ldr	r3, [pc, #432]	; (80009f8 <buffer_processing+0x26c>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <buffer_processing+0x264>)
 800084c:	fba3 1302 	umull	r1, r3, r3, r2
 8000850:	08d9      	lsrs	r1, r3, #3
 8000852:	460b      	mov	r3, r1
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	440b      	add	r3, r1
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b65      	ldr	r3, [pc, #404]	; (80009f4 <buffer_processing+0x268>)
 8000860:	70da      	strb	r2, [r3, #3]
			break;
 8000862:	e02e      	b.n	80008c2 <buffer_processing+0x136>
		case MOD_GREEN:
			led_buffer[0]=durationGreenWaiting/10;
 8000864:	4b65      	ldr	r3, [pc, #404]	; (80009fc <buffer_processing+0x270>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4a61      	ldr	r2, [pc, #388]	; (80009f0 <buffer_processing+0x264>)
 800086a:	fba2 2303 	umull	r2, r3, r2, r3
 800086e:	08db      	lsrs	r3, r3, #3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b60      	ldr	r3, [pc, #384]	; (80009f4 <buffer_processing+0x268>)
 8000874:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationGreenWaiting%10;
 8000876:	4b61      	ldr	r3, [pc, #388]	; (80009fc <buffer_processing+0x270>)
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <buffer_processing+0x264>)
 800087c:	fba3 1302 	umull	r1, r3, r3, r2
 8000880:	08d9      	lsrs	r1, r3, #3
 8000882:	460b      	mov	r3, r1
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <buffer_processing+0x268>)
 8000890:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationGreenWaiting/10;
 8000892:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <buffer_processing+0x270>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4a56      	ldr	r2, [pc, #344]	; (80009f0 <buffer_processing+0x264>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b54      	ldr	r3, [pc, #336]	; (80009f4 <buffer_processing+0x268>)
 80008a2:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationGreenWaiting%10;
 80008a4:	4b55      	ldr	r3, [pc, #340]	; (80009fc <buffer_processing+0x270>)
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	4b51      	ldr	r3, [pc, #324]	; (80009f0 <buffer_processing+0x264>)
 80008aa:	fba3 1302 	umull	r1, r3, r3, r2
 80008ae:	08d9      	lsrs	r1, r3, #3
 80008b0:	460b      	mov	r3, r1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <buffer_processing+0x268>)
 80008be:	70da      	strb	r2, [r3, #3]
			break;
 80008c0:	bf00      	nop
	}
	if(mode!=NORMAL)return;
 80008c2:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <buffer_processing+0x25c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f040 808a 	bne.w	80009e0 <buffer_processing+0x254>
	light1Time--;
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <buffer_processing+0x274>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <buffer_processing+0x274>)
 80008d6:	701a      	strb	r2, [r3, #0]
	light2Time--;
 80008d8:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <buffer_processing+0x278>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <buffer_processing+0x278>)
 80008e2:	701a      	strb	r2, [r3, #0]
	switch(traffCond){
 80008e4:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <buffer_processing+0x27c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d84a      	bhi.n	8000982 <buffer_processing+0x1f6>
 80008ec:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <buffer_processing+0x168>)
 80008ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f2:	bf00      	nop
 80008f4:	08000905 	.word	0x08000905
 80008f8:	0800091d 	.word	0x0800091d
 80008fc:	0800093d 	.word	0x0800093d
 8000900:	08000955 	.word	0x08000955
		case RG:
			if(light2Time<=0){
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <buffer_processing+0x278>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d133      	bne.n	8000974 <buffer_processing+0x1e8>
				traffCond=RY;
 800090c:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <buffer_processing+0x27c>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
				light2Time=durationYellow;
 8000912:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <buffer_processing+0x280>)
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <buffer_processing+0x278>)
 8000918:	701a      	strb	r2, [r3, #0]
			}
			break;
 800091a:	e02b      	b.n	8000974 <buffer_processing+0x1e8>
		case RY:
			if(light1Time<=0){
 800091c:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <buffer_processing+0x274>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d129      	bne.n	8000978 <buffer_processing+0x1ec>
				traffCond=GR;
 8000924:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <buffer_processing+0x27c>)
 8000926:	2202      	movs	r2, #2
 8000928:	701a      	strb	r2, [r3, #0]
				light1Time=durationGreen;
 800092a:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <buffer_processing+0x284>)
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <buffer_processing+0x274>)
 8000930:	701a      	strb	r2, [r3, #0]
				light2Time=durationRed;
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <buffer_processing+0x288>)
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	4b33      	ldr	r3, [pc, #204]	; (8000a04 <buffer_processing+0x278>)
 8000938:	701a      	strb	r2, [r3, #0]
			}
			break;
 800093a:	e01d      	b.n	8000978 <buffer_processing+0x1ec>
		case GR:
			if(light1Time<=0){
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <buffer_processing+0x274>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d11b      	bne.n	800097c <buffer_processing+0x1f0>
				traffCond=YR;
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <buffer_processing+0x27c>)
 8000946:	2203      	movs	r2, #3
 8000948:	701a      	strb	r2, [r3, #0]
				light1Time=durationYellow;
 800094a:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <buffer_processing+0x280>)
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <buffer_processing+0x274>)
 8000950:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000952:	e013      	b.n	800097c <buffer_processing+0x1f0>
		case YR:
			if(light2Time<=0){
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <buffer_processing+0x278>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d111      	bne.n	8000980 <buffer_processing+0x1f4>
				traffCond=RG;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <buffer_processing+0x27c>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
				light1Time=durationRed;
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <buffer_processing+0x288>)
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <buffer_processing+0x274>)
 8000968:	701a      	strb	r2, [r3, #0]
				light2Time=durationGreen;
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <buffer_processing+0x284>)
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <buffer_processing+0x278>)
 8000970:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000972:	e005      	b.n	8000980 <buffer_processing+0x1f4>
			break;
 8000974:	bf00      	nop
 8000976:	e004      	b.n	8000982 <buffer_processing+0x1f6>
			break;
 8000978:	bf00      	nop
 800097a:	e002      	b.n	8000982 <buffer_processing+0x1f6>
			break;
 800097c:	bf00      	nop
 800097e:	e000      	b.n	8000982 <buffer_processing+0x1f6>
			break;
 8000980:	bf00      	nop
	}
	led_buffer[0]=light1Time/10;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <buffer_processing+0x274>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <buffer_processing+0x264>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <buffer_processing+0x268>)
 8000992:	701a      	strb	r2, [r3, #0]
	led_buffer[1]=light1Time%10;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <buffer_processing+0x274>)
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <buffer_processing+0x264>)
 800099a:	fba3 1302 	umull	r1, r3, r3, r2
 800099e:	08d9      	lsrs	r1, r3, #3
 80009a0:	460b      	mov	r3, r1
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <buffer_processing+0x268>)
 80009ae:	705a      	strb	r2, [r3, #1]
	led_buffer[2]=light2Time/10;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <buffer_processing+0x278>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <buffer_processing+0x264>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <buffer_processing+0x268>)
 80009c0:	709a      	strb	r2, [r3, #2]
	led_buffer[3]=light2Time%10;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <buffer_processing+0x278>)
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <buffer_processing+0x264>)
 80009c8:	fba3 1302 	umull	r1, r3, r3, r2
 80009cc:	08d9      	lsrs	r1, r3, #3
 80009ce:	460b      	mov	r3, r1
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	440b      	add	r3, r1
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <buffer_processing+0x268>)
 80009dc:	70da      	strb	r2, [r3, #3]
 80009de:	e000      	b.n	80009e2 <buffer_processing+0x256>
	if(mode!=NORMAL)return;
 80009e0:	bf00      	nop
}
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	2000003e 	.word	0x2000003e
 80009ec:	20000051 	.word	0x20000051
 80009f0:	cccccccd 	.word	0xcccccccd
 80009f4:	20000048 	.word	0x20000048
 80009f8:	20000041 	.word	0x20000041
 80009fc:	20000040 	.word	0x20000040
 8000a00:	20000050 	.word	0x20000050
 8000a04:	2000004c 	.word	0x2000004c
 8000a08:	2000004d 	.word	0x2000004d
 8000a0c:	20000002 	.word	0x20000002
 8000a10:	20000003 	.word	0x20000003
 8000a14:	20000001 	.word	0x20000001

08000a18 <button_reading>:
GPIO_PinState debounceButtonBuffer1[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};
GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};
GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};
GPIO_PinState debounceButtonBuffer4[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};

void button_reading(){
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
 8000a22:	e03f      	b.n	8000aa4 <button_reading+0x8c>
		debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4922      	ldr	r1, [pc, #136]	; (8000ab4 <button_reading+0x9c>)
 8000a2a:	5c89      	ldrb	r1, [r1, r2]
 8000a2c:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <button_reading+0xa0>)
 8000a2e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4921      	ldr	r1, [pc, #132]	; (8000abc <button_reading+0xa4>)
 8000a36:	5c89      	ldrb	r1, [r1, r2]
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <button_reading+0x9c>)
 8000a3a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	491f      	ldr	r1, [pc, #124]	; (8000ac0 <button_reading+0xa8>)
 8000a42:	5c89      	ldrb	r1, [r1, r2]
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <button_reading+0xa4>)
 8000a46:	54d1      	strb	r1, [r2, r3]
		switch(i){
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d01c      	beq.n	8000a88 <button_reading+0x70>
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	dc25      	bgt.n	8000a9e <button_reading+0x86>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <button_reading+0x44>
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d00b      	beq.n	8000a72 <button_reading+0x5a>
 8000a5a:	e020      	b.n	8000a9e <button_reading+0x86>
			case 0:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin);
 8000a5c:	79fc      	ldrb	r4, [r7, #7]
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <button_reading+0xac>)
 8000a64:	f000 fdbc 	bl	80015e0 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <button_reading+0xa8>)
 8000a6e:	551a      	strb	r2, [r3, r4]
				break;
 8000a70:	e015      	b.n	8000a9e <button_reading+0x86>
			case 1:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 8000a72:	79fc      	ldrb	r4, [r7, #7]
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <button_reading+0xac>)
 8000a7a:	f000 fdb1 	bl	80015e0 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <button_reading+0xa8>)
 8000a84:	551a      	strb	r2, [r3, r4]
				break;
 8000a86:	e00a      	b.n	8000a9e <button_reading+0x86>
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 8000a88:	79fc      	ldrb	r4, [r7, #7]
 8000a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <button_reading+0xac>)
 8000a90:	f000 fda6 	bl	80015e0 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <button_reading+0xa8>)
 8000a9a:	551a      	strb	r2, [r3, r4]
				break;
 8000a9c:	bf00      	nop
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d9bc      	bls.n	8000a24 <button_reading+0xc>
		}
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	20000010 	.word	0x20000010
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <is_button_pressed>:

uint8_t is_button_pressed(uint8_t index){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d901      	bls.n	8000adc <is_button_pressed+0x14>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e007      	b.n	8000aec <is_button_pressed+0x24>
	return (debounceButtonBuffer4[index]==BUTTON_IS_PRESSED);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <is_button_pressed+0x30>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2301      	moveq	r3, #1
 8000ae8:	2300      	movne	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000010 	.word	0x20000010

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fa84 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f864 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000b08:	f000 f89e 	bl	8000c48 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000b0c:	f000 f8e8 	bl	8000ce0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b10:	482d      	ldr	r0, [pc, #180]	; (8000bc8 <main+0xcc>)
 8000b12:	f001 f9c1 	bl	8001e98 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initTimer();
 8000b16:	f000 f9e5 	bl	8000ee4 <initTimer>
  setTimer(21,0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2015      	movs	r0, #21
 8000b1e:	f000 f9ff 	bl	8000f20 <setTimer>
  setTimer(31,1);
 8000b22:	2101      	movs	r1, #1
 8000b24:	201f      	movs	r0, #31
 8000b26:	f000 f9fb 	bl	8000f20 <setTimer>
  setTimer(51,2);
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	2033      	movs	r0, #51	; 0x33
 8000b2e:	f000 f9f7 	bl	8000f20 <setTimer>
  setTimer(71,3);
 8000b32:	2103      	movs	r1, #3
 8000b34:	2047      	movs	r0, #71	; 0x47
 8000b36:	f000 f9f3 	bl	8000f20 <setTimer>
  setTimer(111,4);
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	206f      	movs	r0, #111	; 0x6f
 8000b3e:	f000 f9ef 	bl	8000f20 <setTimer>
  setTimer(131,5);
 8000b42:	2105      	movs	r1, #5
 8000b44:	2083      	movs	r0, #131	; 0x83
 8000b46:	f000 f9eb 	bl	8000f20 <setTimer>
  while (1)
  {
	  if(timerFlag[0]==1){
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <main+0xd0>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d105      	bne.n	8000b5e <main+0x62>
		  setTimer(10,0);
 8000b52:	2100      	movs	r1, #0
 8000b54:	200a      	movs	r0, #10
 8000b56:	f000 f9e3 	bl	8000f20 <setTimer>
		  button_reading();
 8000b5a:	f7ff ff5d 	bl	8000a18 <button_reading>
	  }
	  if(timerFlag[1]==1){
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <main+0xd0>)
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d105      	bne.n	8000b72 <main+0x76>
		  setTimer(MAIN_MODE_PERIOD,1);
 8000b66:	2101      	movs	r1, #1
 8000b68:	2032      	movs	r0, #50	; 0x32
 8000b6a:	f000 f9d9 	bl	8000f20 <setTimer>
		  fsm_automatic();
 8000b6e:	f7ff fb73 	bl	8000258 <fsm_automatic>
	  }
	  if(timerFlag[2]==1){
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <main+0xd0>)
 8000b74:	789b      	ldrb	r3, [r3, #2]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d106      	bne.n	8000b88 <main+0x8c>
		  setTimer(1000,2);
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b80:	f000 f9ce 	bl	8000f20 <setTimer>
		  buffer_processing();
 8000b84:	f7ff fe02 	bl	800078c <buffer_processing>
	  }
	  if(timerFlag[3]==1){
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <main+0xd0>)
 8000b8a:	78db      	ldrb	r3, [r3, #3]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d105      	bne.n	8000b9c <main+0xa0>
		  setTimer(250,3);
 8000b90:	2103      	movs	r1, #3
 8000b92:	20fa      	movs	r0, #250	; 0xfa
 8000b94:	f000 f9c4 	bl	8000f20 <setTimer>
		  led_processing();
 8000b98:	f7ff fd76 	bl	8000688 <led_processing>
	  }
	  if(timerFlag[4]==1){
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <main+0xd0>)
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d105      	bne.n	8000bb0 <main+0xb4>
		  setTimer(250,4);
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	20fa      	movs	r0, #250	; 0xfa
 8000ba8:	f000 f9ba 	bl	8000f20 <setTimer>
		  update7SegMain();
 8000bac:	f7ff fb18 	bl	80001e0 <update7SegMain>
	  }
	  if(timerFlag[5]==1){
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <main+0xd0>)
 8000bb2:	795b      	ldrb	r3, [r3, #5]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d1c8      	bne.n	8000b4a <main+0x4e>
		  setTimer(10,5);
 8000bb8:	2105      	movs	r1, #5
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f000 f9b0 	bl	8000f20 <setTimer>
		  displayAll();
 8000bc0:	f7ff fb26 	bl	8000210 <displayAll>
	  if(timerFlag[0]==1){
 8000bc4:	e7c1      	b.n	8000b4a <main+0x4e>
 8000bc6:	bf00      	nop
 8000bc8:	20000054 	.word	0x20000054
 8000bcc:	2000009c 	.word	0x2000009c

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	; 0x40
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2228      	movs	r2, #40	; 0x28
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fd16 	bl	8002610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fd1a 	bl	8001640 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c12:	f000 f8d3 	bl	8000dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 ff86 	bl	8001b40 <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 f8bf 	bl	8000dbc <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3740      	adds	r7, #64	; 0x40
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c6e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c7c:	2209      	movs	r2, #9
 8000c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c8c:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000c8e:	f001 f8b3 	bl	8001df8 <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c98:	f000 f890 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000caa:	f001 fa49 	bl	8002140 <HAL_TIM_ConfigClockSource>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cb4:	f000 f882 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_TIM2_Init+0x94>)
 8000cc6:	f001 fc15 	bl	80024f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cd0:	f000 f874 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000054 	.word	0x20000054

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED0_Pin
 8000d24:	2200      	movs	r2, #0
 8000d26:	f247 0170 	movw	r1, #28784	; 0x7070
 8000d2a:	481d      	ldr	r0, [pc, #116]	; (8000da0 <MX_GPIO_Init+0xc0>)
 8000d2c:	f000 fc6f 	bl	800160e <HAL_GPIO_WritePin>
                          |YELLOW0_Pin|GREEN0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG00_Pin|SEG01_Pin|SEG02_Pin|EN2_Pin
 8000d30:	2200      	movs	r2, #0
 8000d32:	f640 717f 	movw	r1, #3967	; 0xf7f
 8000d36:	481b      	ldr	r0, [pc, #108]	; (8000da4 <MX_GPIO_Init+0xc4>)
 8000d38:	f000 fc69 	bl	800160e <HAL_GPIO_WritePin>
                          |EN3_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED0_Pin
                           YELLOW0_Pin GREEN0_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED0_Pin
 8000d3c:	f247 0370 	movw	r3, #28784	; 0x7070
 8000d40:	60bb      	str	r3, [r7, #8]
                          |YELLOW0_Pin|GREEN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	4812      	ldr	r0, [pc, #72]	; (8000da0 <MX_GPIO_Init+0xc0>)
 8000d56:	f000 fac9 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG00_Pin SEG01_Pin SEG02_Pin EN2_Pin
                           EN3_Pin SEG03_Pin SEG04_Pin SEG05_Pin
                           SEG06_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = SEG00_Pin|SEG01_Pin|SEG02_Pin|EN2_Pin
 8000d5a:	f640 737f 	movw	r3, #3967	; 0xf7f
 8000d5e:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	4619      	mov	r1, r3
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_GPIO_Init+0xc4>)
 8000d74:	f000 faba 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin;
 8000d78:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_GPIO_Init+0xc0>)
 8000d8e:	f000 faad 	bl	80012ec <HAL_GPIO_Init>

}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010800 	.word	0x40010800
 8000da4:	40010c00 	.word	0x40010c00

08000da8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	timerRun();
 8000db0:	f000 f8da 	bl	8000f68 <timerRun>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_MspInit+0x5c>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_MspInit+0x5c>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_MspInit+0x5c>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_MspInit+0x5c>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_MspInit+0x5c>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_MspInit+0x5c>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_MspInit+0x60>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_MspInit+0x60>)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000

08000e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e3c:	d113      	bne.n	8000e66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_TIM_Base_MspInit+0x44>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_TIM_Base_MspInit+0x44>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_TIM_Base_MspInit+0x44>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	201c      	movs	r0, #28
 8000e5c:	f000 fa0f 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e60:	201c      	movs	r0, #28
 8000e62:	f000 fa28 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eba:	f000 f8ed 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM2_IRQHandler+0x10>)
 8000eca:	f001 f831 	bl	8001f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000054 	.word	0x20000054

08000ed8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <initTimer>:
#include "timerMCU.h"

uint8_t timerFlag[N0_OF_TIMER],
		timerCounter[N0_OF_TIMER];

void initTimer(){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<N0_OF_TIMER;i++){
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e00a      	b.n	8000f06 <initTimer+0x22>
		timerCounter[i]=0;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <initTimer+0x34>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	54d1      	strb	r1, [r2, r3]
		timerFlag[i]=0;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <initTimer+0x38>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<N0_OF_TIMER;i++){
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	3301      	adds	r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b06      	cmp	r3, #6
 8000f0a:	d9f1      	bls.n	8000ef0 <initTimer+0xc>
	}
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	200000a4 	.word	0x200000a4
 8000f1c:	2000009c 	.word	0x2000009c

08000f20 <setTimer>:

void setTimer(uint16_t duration, uint8_t index){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	460a      	mov	r2, r1
 8000f2a:	80fb      	strh	r3, [r7, #6]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	717b      	strb	r3, [r7, #5]
	if(index>=0&&index<N0_OF_TIMER){
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d80d      	bhi.n	8000f52 <setTimer+0x32>
		timerCounter[index]=duration/TIMER_INTERRUPT_PERIOD;
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <setTimer+0x3c>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	08db      	lsrs	r3, r3, #3
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	797b      	ldrb	r3, [r7, #5]
 8000f44:	b2d1      	uxtb	r1, r2
 8000f46:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <setTimer+0x40>)
 8000f48:	54d1      	strb	r1, [r2, r3]
		timerFlag[index]=0;
 8000f4a:	797b      	ldrb	r3, [r7, #5]
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <setTimer+0x44>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	54d1      	strb	r1, [r2, r3]
	}
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	cccccccd 	.word	0xcccccccd
 8000f60:	200000a4 	.word	0x200000a4
 8000f64:	2000009c 	.word	0x2000009c

08000f68 <timerRun>:

void timerRun(){
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<N0_OF_TIMER;i++){
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	e017      	b.n	8000fa4 <timerRun+0x3c>
		if(timerCounter[i]>0){
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <timerRun+0x50>)
 8000f78:	5cd3      	ldrb	r3, [r2, r3]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00f      	beq.n	8000f9e <timerRun+0x36>
			timerCounter[i]--;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <timerRun+0x50>)
 8000f82:	5cd2      	ldrb	r2, [r2, r3]
 8000f84:	3a01      	subs	r2, #1
 8000f86:	b2d1      	uxtb	r1, r2
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <timerRun+0x50>)
 8000f8a:	54d1      	strb	r1, [r2, r3]
			if(timerCounter[i]<=0)timerFlag[i]=1;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <timerRun+0x50>)
 8000f90:	5cd3      	ldrb	r3, [r2, r3]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d103      	bne.n	8000f9e <timerRun+0x36>
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <timerRun+0x54>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<N0_OF_TIMER;i++){
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d9e4      	bls.n	8000f74 <timerRun+0xc>
		}
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200000a4 	.word	0x200000a4
 8000fbc:	2000009c 	.word	0x2000009c

08000fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff ff8a 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fc6:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a09      	ldr	r2, [pc, #36]	; (8001000 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fdc:	4c09      	ldr	r4, [pc, #36]	; (8001004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f001 faed 	bl	80025c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fd85 	bl	8000afc <main>
  bx lr
 8000ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000ffc:	08002670 	.word	0x08002670
  ldr r2, =_sbss
 8001000:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001004:	200000b0 	.word	0x200000b0

08001008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_2_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x28>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x28>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f923 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fece 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40022000 	.word	0x40022000

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f93b 	bl	80012d2 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f903 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000014 	.word	0x20000014
 8001090:	2000001c 	.word	0x2000001c
 8001094:	20000018 	.word	0x20000018

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x1c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <HAL_IncTick+0x20>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	2000001c 	.word	0x2000001c
 80010b8:	200000ac 	.word	0x200000ac

080010bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <HAL_GetTick+0x10>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	200000ac 	.word	0x200000ac

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4906      	ldr	r1, [pc, #24]	; (8001168 <__NVIC_EnableIRQ+0x34>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff90 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff2d 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff42 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff90 	bl	80011c0 <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5f 	bl	800116c <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff35 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b08b      	sub	sp, #44	; 0x2c
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fe:	e148      	b.n	8001592 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001300:	2201      	movs	r2, #1
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8137 	bne.w	800158c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4aa3      	ldr	r2, [pc, #652]	; (80015b0 <HAL_GPIO_Init+0x2c4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d05e      	beq.n	80013e6 <HAL_GPIO_Init+0xfa>
 8001328:	4aa1      	ldr	r2, [pc, #644]	; (80015b0 <HAL_GPIO_Init+0x2c4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d875      	bhi.n	800141a <HAL_GPIO_Init+0x12e>
 800132e:	4aa1      	ldr	r2, [pc, #644]	; (80015b4 <HAL_GPIO_Init+0x2c8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d058      	beq.n	80013e6 <HAL_GPIO_Init+0xfa>
 8001334:	4a9f      	ldr	r2, [pc, #636]	; (80015b4 <HAL_GPIO_Init+0x2c8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d86f      	bhi.n	800141a <HAL_GPIO_Init+0x12e>
 800133a:	4a9f      	ldr	r2, [pc, #636]	; (80015b8 <HAL_GPIO_Init+0x2cc>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d052      	beq.n	80013e6 <HAL_GPIO_Init+0xfa>
 8001340:	4a9d      	ldr	r2, [pc, #628]	; (80015b8 <HAL_GPIO_Init+0x2cc>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d869      	bhi.n	800141a <HAL_GPIO_Init+0x12e>
 8001346:	4a9d      	ldr	r2, [pc, #628]	; (80015bc <HAL_GPIO_Init+0x2d0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d04c      	beq.n	80013e6 <HAL_GPIO_Init+0xfa>
 800134c:	4a9b      	ldr	r2, [pc, #620]	; (80015bc <HAL_GPIO_Init+0x2d0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d863      	bhi.n	800141a <HAL_GPIO_Init+0x12e>
 8001352:	4a9b      	ldr	r2, [pc, #620]	; (80015c0 <HAL_GPIO_Init+0x2d4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d046      	beq.n	80013e6 <HAL_GPIO_Init+0xfa>
 8001358:	4a99      	ldr	r2, [pc, #612]	; (80015c0 <HAL_GPIO_Init+0x2d4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d85d      	bhi.n	800141a <HAL_GPIO_Init+0x12e>
 800135e:	2b12      	cmp	r3, #18
 8001360:	d82a      	bhi.n	80013b8 <HAL_GPIO_Init+0xcc>
 8001362:	2b12      	cmp	r3, #18
 8001364:	d859      	bhi.n	800141a <HAL_GPIO_Init+0x12e>
 8001366:	a201      	add	r2, pc, #4	; (adr r2, 800136c <HAL_GPIO_Init+0x80>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	080013e7 	.word	0x080013e7
 8001370:	080013c1 	.word	0x080013c1
 8001374:	080013d3 	.word	0x080013d3
 8001378:	08001415 	.word	0x08001415
 800137c:	0800141b 	.word	0x0800141b
 8001380:	0800141b 	.word	0x0800141b
 8001384:	0800141b 	.word	0x0800141b
 8001388:	0800141b 	.word	0x0800141b
 800138c:	0800141b 	.word	0x0800141b
 8001390:	0800141b 	.word	0x0800141b
 8001394:	0800141b 	.word	0x0800141b
 8001398:	0800141b 	.word	0x0800141b
 800139c:	0800141b 	.word	0x0800141b
 80013a0:	0800141b 	.word	0x0800141b
 80013a4:	0800141b 	.word	0x0800141b
 80013a8:	0800141b 	.word	0x0800141b
 80013ac:	0800141b 	.word	0x0800141b
 80013b0:	080013c9 	.word	0x080013c9
 80013b4:	080013dd 	.word	0x080013dd
 80013b8:	4a82      	ldr	r2, [pc, #520]	; (80015c4 <HAL_GPIO_Init+0x2d8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013be:	e02c      	b.n	800141a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	623b      	str	r3, [r7, #32]
          break;
 80013c6:	e029      	b.n	800141c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	3304      	adds	r3, #4
 80013ce:	623b      	str	r3, [r7, #32]
          break;
 80013d0:	e024      	b.n	800141c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	3308      	adds	r3, #8
 80013d8:	623b      	str	r3, [r7, #32]
          break;
 80013da:	e01f      	b.n	800141c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	330c      	adds	r3, #12
 80013e2:	623b      	str	r3, [r7, #32]
          break;
 80013e4:	e01a      	b.n	800141c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ee:	2304      	movs	r3, #4
 80013f0:	623b      	str	r3, [r7, #32]
          break;
 80013f2:	e013      	b.n	800141c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d105      	bne.n	8001408 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013fc:	2308      	movs	r3, #8
 80013fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	611a      	str	r2, [r3, #16]
          break;
 8001406:	e009      	b.n	800141c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001408:	2308      	movs	r3, #8
 800140a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	615a      	str	r2, [r3, #20]
          break;
 8001412:	e003      	b.n	800141c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x130>
          break;
 800141a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2bff      	cmp	r3, #255	; 0xff
 8001420:	d801      	bhi.n	8001426 <HAL_GPIO_Init+0x13a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	e001      	b.n	800142a <HAL_GPIO_Init+0x13e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3304      	adds	r3, #4
 800142a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2bff      	cmp	r3, #255	; 0xff
 8001430:	d802      	bhi.n	8001438 <HAL_GPIO_Init+0x14c>
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	e002      	b.n	800143e <HAL_GPIO_Init+0x152>
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	3b08      	subs	r3, #8
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	210f      	movs	r1, #15
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	401a      	ands	r2, r3
 8001450:	6a39      	ldr	r1, [r7, #32]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	431a      	orrs	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8090 	beq.w	800158c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800146c:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a55      	ldr	r2, [pc, #340]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_GPIO_Init+0x2dc>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001484:	4a51      	ldr	r2, [pc, #324]	; (80015cc <HAL_GPIO_Init+0x2e0>)
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001490:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a49      	ldr	r2, [pc, #292]	; (80015d0 <HAL_GPIO_Init+0x2e4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00d      	beq.n	80014cc <HAL_GPIO_Init+0x1e0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_GPIO_Init+0x2e8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d007      	beq.n	80014c8 <HAL_GPIO_Init+0x1dc>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a47      	ldr	r2, [pc, #284]	; (80015d8 <HAL_GPIO_Init+0x2ec>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d101      	bne.n	80014c4 <HAL_GPIO_Init+0x1d8>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e004      	b.n	80014ce <HAL_GPIO_Init+0x1e2>
 80014c4:	2303      	movs	r3, #3
 80014c6:	e002      	b.n	80014ce <HAL_GPIO_Init+0x1e2>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_GPIO_Init+0x1e2>
 80014cc:	2300      	movs	r3, #0
 80014ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d0:	f002 0203 	and.w	r2, r2, #3
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	4093      	lsls	r3, r2
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014de:	493b      	ldr	r1, [pc, #236]	; (80015cc <HAL_GPIO_Init+0x2e0>)
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f8:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4937      	ldr	r1, [pc, #220]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001506:	4b35      	ldr	r3, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	43db      	mvns	r3, r3
 800150e:	4933      	ldr	r1, [pc, #204]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001510:	4013      	ands	r3, r2
 8001512:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001520:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	492d      	ldr	r1, [pc, #180]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	60cb      	str	r3, [r1, #12]
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	43db      	mvns	r3, r3
 8001536:	4929      	ldr	r1, [pc, #164]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001538:	4013      	ands	r3, r2
 800153a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4923      	ldr	r1, [pc, #140]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	43db      	mvns	r3, r3
 800155e:	491f      	ldr	r1, [pc, #124]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001560:	4013      	ands	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4919      	ldr	r1, [pc, #100]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	43db      	mvns	r3, r3
 8001586:	4915      	ldr	r1, [pc, #84]	; (80015dc <HAL_GPIO_Init+0x2f0>)
 8001588:	4013      	ands	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	3301      	adds	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f47f aeaf 	bne.w	8001300 <HAL_GPIO_Init+0x14>
  }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	372c      	adds	r7, #44	; 0x2c
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	10320000 	.word	0x10320000
 80015b4:	10310000 	.word	0x10310000
 80015b8:	10220000 	.word	0x10220000
 80015bc:	10210000 	.word	0x10210000
 80015c0:	10120000 	.word	0x10120000
 80015c4:	10110000 	.word	0x10110000
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000
 80015d0:	40010800 	.word	0x40010800
 80015d4:	40010c00 	.word	0x40010c00
 80015d8:	40011000 	.word	0x40011000
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e001      	b.n	8001602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]
 800161a:	4613      	mov	r3, r2
 800161c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800161e:	787b      	ldrb	r3, [r7, #1]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800162a:	e003      	b.n	8001634 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	041a      	lsls	r2, r3, #16
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	611a      	str	r2, [r3, #16]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
	...

08001640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e26c      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8087 	beq.w	800176e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001660:	4b92      	ldr	r3, [pc, #584]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b04      	cmp	r3, #4
 800166a:	d00c      	beq.n	8001686 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800166c:	4b8f      	ldr	r3, [pc, #572]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d112      	bne.n	800169e <HAL_RCC_OscConfig+0x5e>
 8001678:	4b8c      	ldr	r3, [pc, #560]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001684:	d10b      	bne.n	800169e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001686:	4b89      	ldr	r3, [pc, #548]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d06c      	beq.n	800176c <HAL_RCC_OscConfig+0x12c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d168      	bne.n	800176c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e246      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x76>
 80016a8:	4b80      	ldr	r3, [pc, #512]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a7f      	ldr	r2, [pc, #508]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e02e      	b.n	8001714 <HAL_RCC_OscConfig+0xd4>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x98>
 80016be:	4b7b      	ldr	r3, [pc, #492]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7a      	ldr	r2, [pc, #488]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b78      	ldr	r3, [pc, #480]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a77      	ldr	r2, [pc, #476]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xd4>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0xbc>
 80016e2:	4b72      	ldr	r3, [pc, #456]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a71      	ldr	r2, [pc, #452]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xd4>
 80016fc:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a67      	ldr	r2, [pc, #412]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fcce 	bl	80010bc <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fcca 	bl	80010bc <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	; 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1fa      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b5d      	ldr	r3, [pc, #372]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0xe4>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fcba 	bl	80010bc <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fcb6 	bl	80010bc <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1e6      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x10c>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d063      	beq.n	8001842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177a:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d11c      	bne.n	80017cc <HAL_RCC_OscConfig+0x18c>
 8001792:	4b46      	ldr	r3, [pc, #280]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d116      	bne.n	80017cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	4b43      	ldr	r3, [pc, #268]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_RCC_OscConfig+0x176>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e1ba      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4939      	ldr	r1, [pc, #228]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	e03a      	b.n	8001842 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fc6f 	bl	80010bc <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff fc6b 	bl	80010bc <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e19b      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4927      	ldr	r1, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
 8001814:	e015      	b.n	8001842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fc4e 	bl	80010bc <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001824:	f7ff fc4a 	bl	80010bc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e17a      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d03a      	beq.n	80018c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d019      	beq.n	800188a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_RCC_OscConfig+0x274>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185c:	f7ff fc2e 	bl	80010bc <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff fc2a 	bl	80010bc <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e15a      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_RCC_OscConfig+0x26c>)
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f000 fa9a 	bl	8001dbc <RCC_Delay>
 8001888:	e01c      	b.n	80018c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_RCC_OscConfig+0x274>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff fc14 	bl	80010bc <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001896:	e00f      	b.n	80018b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fc10 	bl	80010bc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d908      	bls.n	80018b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e140      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	42420000 	.word	0x42420000
 80018b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	4b9e      	ldr	r3, [pc, #632]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e9      	bne.n	8001898 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80a6 	beq.w	8001a1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b97      	ldr	r3, [pc, #604]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10d      	bne.n	80018fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b94      	ldr	r3, [pc, #592]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a93      	ldr	r2, [pc, #588]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	61d3      	str	r3, [r2, #28]
 80018ee:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fa:	2301      	movs	r3, #1
 80018fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	4b8e      	ldr	r3, [pc, #568]	; (8001b38 <HAL_RCC_OscConfig+0x4f8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d118      	bne.n	800193c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190a:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <HAL_RCC_OscConfig+0x4f8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a8a      	ldr	r2, [pc, #552]	; (8001b38 <HAL_RCC_OscConfig+0x4f8>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001916:	f7ff fbd1 	bl	80010bc <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191e:	f7ff fbcd 	bl	80010bc <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b64      	cmp	r3, #100	; 0x64
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e0fd      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	4b81      	ldr	r3, [pc, #516]	; (8001b38 <HAL_RCC_OscConfig+0x4f8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x312>
 8001944:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4a7a      	ldr	r2, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6213      	str	r3, [r2, #32]
 8001950:	e02d      	b.n	80019ae <HAL_RCC_OscConfig+0x36e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x334>
 800195a:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a75      	ldr	r2, [pc, #468]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a72      	ldr	r2, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	f023 0304 	bic.w	r3, r3, #4
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	e01c      	b.n	80019ae <HAL_RCC_OscConfig+0x36e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x356>
 800197c:	4b6d      	ldr	r3, [pc, #436]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4a6c      	ldr	r2, [pc, #432]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6213      	str	r3, [r2, #32]
 8001988:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a69      	ldr	r2, [pc, #420]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0x36e>
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4a66      	ldr	r2, [pc, #408]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6213      	str	r3, [r2, #32]
 80019a2:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4a63      	ldr	r2, [pc, #396]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d015      	beq.n	80019e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb81 	bl	80010bc <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff fb7d 	bl	80010bc <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0ab      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ee      	beq.n	80019be <HAL_RCC_OscConfig+0x37e>
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb6b 	bl	80010bc <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff fb67 	bl	80010bc <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e095      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ee      	bne.n	80019ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d105      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a12:	4b48      	ldr	r3, [pc, #288]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a47      	ldr	r2, [pc, #284]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8081 	beq.w	8001b2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a28:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d061      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d146      	bne.n	8001aca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <HAL_RCC_OscConfig+0x4fc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fb3b 	bl	80010bc <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff fb37 	bl	80010bc <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e067      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a70:	d108      	bne.n	8001a84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	492d      	ldr	r1, [pc, #180]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a19      	ldr	r1, [r3, #32]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	430b      	orrs	r3, r1
 8001a96:	4927      	ldr	r1, [pc, #156]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x4fc>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fb0b 	bl	80010bc <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fb07 	bl	80010bc <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e037      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46a>
 8001ac8:	e02f      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_RCC_OscConfig+0x4fc>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff faf4 	bl	80010bc <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff faf0 	bl	80010bc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e020      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x498>
 8001af6:	e018      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e013      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42420060 	.word	0x42420060

08001b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0d0      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d910      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 0207 	bic.w	r2, r3, #7
 8001b6a:	4965      	ldr	r1, [pc, #404]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0b8      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b9c:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ba6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4a52      	ldr	r2, [pc, #328]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	494d      	ldr	r1, [pc, #308]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d040      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d115      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e073      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06b      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f023 0203 	bic.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4936      	ldr	r1, [pc, #216]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c30:	f7ff fa44 	bl	80010bc <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff fa40 	bl	80010bc <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e053      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 020c 	and.w	r2, r3, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1eb      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d210      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0207 	bic.w	r2, r3, #7
 8001c76:	4922      	ldr	r1, [pc, #136]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e032      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4916      	ldr	r1, [pc, #88]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	490e      	ldr	r1, [pc, #56]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cce:	f000 f821 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	490a      	ldr	r1, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	5ccb      	ldrb	r3, [r1, r3]
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1d0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f9a2 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08002644 	.word	0x08002644
 8001d0c:	20000014 	.word	0x20000014
 8001d10:	20000018 	.word	0x20000018

08001d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x30>
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x36>
 8001d42:	e027      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_RCC_GetSysClockFreq+0x98>)
 8001d46:	613b      	str	r3, [r7, #16]
      break;
 8001d48:	e027      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	0c9b      	lsrs	r3, r3, #18
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d010      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	0c5b      	lsrs	r3, r3, #17
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_RCC_GetSysClockFreq+0x98>)
 8001d76:	fb02 f203 	mul.w	r2, r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e004      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	613b      	str	r3, [r7, #16]
      break;
 8001d92:	e002      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_RCC_GetSysClockFreq+0x98>)
 8001d96:	613b      	str	r3, [r7, #16]
      break;
 8001d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9a:	693b      	ldr	r3, [r7, #16]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	007a1200 	.word	0x007a1200
 8001db0:	08002654 	.word	0x08002654
 8001db4:	08002664 	.word	0x08002664
 8001db8:	003d0900 	.word	0x003d0900

08001dbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <RCC_Delay+0x34>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <RCC_Delay+0x38>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0a5b      	lsrs	r3, r3, #9
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dd8:	bf00      	nop
  }
  while (Delay --);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	60fa      	str	r2, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <RCC_Delay+0x1c>
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20000014 	.word	0x20000014
 8001df4:	10624dd3 	.word	0x10624dd3

08001df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e041      	b.n	8001e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff f804 	bl	8000e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3304      	adds	r3, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4610      	mov	r0, r2
 8001e38:	f000 fa6e 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d001      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e035      	b.n	8001f1c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <HAL_TIM_Base_Start_IT+0x90>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x4e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eda:	d004      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x4e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <HAL_TIM_Base_Start_IT+0x94>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d111      	bne.n	8001f0a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d010      	beq.n	8001f1a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f08:	e007      	b.n	8001f1a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40012c00 	.word	0x40012c00
 8001f2c:	40000400 	.word	0x40000400

08001f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d122      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d11b      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0202 	mvn.w	r2, #2
 8001f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f9b4 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f9a7 	bl	80022ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f9b6 	bl	80022f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d122      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0204 	mvn.w	r2, #4
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f98a 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f97d 	bl	80022ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f98c 	bl	80022f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d122      	bne.n	8002034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d11b      	bne.n	8002034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0208 	mvn.w	r2, #8
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2204      	movs	r2, #4
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f960 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f953 	bl	80022ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f962 	bl	80022f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d122      	bne.n	8002088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b10      	cmp	r3, #16
 800204e:	d11b      	bne.n	8002088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0210 	mvn.w	r2, #16
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2208      	movs	r2, #8
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f936 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f929 	bl	80022ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f938 	bl	80022f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0201 	mvn.w	r2, #1
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fe7a 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d107      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fa6b 	bl	80025b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d107      	bne.n	800210c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8fc 	bl	8002304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b20      	cmp	r3, #32
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b20      	cmp	r3, #32
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0220 	mvn.w	r2, #32
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fa36 	bl	80025a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_TIM_ConfigClockSource+0x1c>
 8002158:	2302      	movs	r3, #2
 800215a:	e0b4      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x186>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800217a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002194:	d03e      	beq.n	8002214 <HAL_TIM_ConfigClockSource+0xd4>
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219a:	f200 8087 	bhi.w	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 800219e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a2:	f000 8086 	beq.w	80022b2 <HAL_TIM_ConfigClockSource+0x172>
 80021a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021aa:	d87f      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021ac:	2b70      	cmp	r3, #112	; 0x70
 80021ae:	d01a      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0xa6>
 80021b0:	2b70      	cmp	r3, #112	; 0x70
 80021b2:	d87b      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021b4:	2b60      	cmp	r3, #96	; 0x60
 80021b6:	d050      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x11a>
 80021b8:	2b60      	cmp	r3, #96	; 0x60
 80021ba:	d877      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021bc:	2b50      	cmp	r3, #80	; 0x50
 80021be:	d03c      	beq.n	800223a <HAL_TIM_ConfigClockSource+0xfa>
 80021c0:	2b50      	cmp	r3, #80	; 0x50
 80021c2:	d873      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021c4:	2b40      	cmp	r3, #64	; 0x40
 80021c6:	d058      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x13a>
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d86f      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021cc:	2b30      	cmp	r3, #48	; 0x30
 80021ce:	d064      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x15a>
 80021d0:	2b30      	cmp	r3, #48	; 0x30
 80021d2:	d86b      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d060      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x15a>
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d867      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d05c      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x15a>
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d05a      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x15a>
 80021e4:	e062      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6899      	ldr	r1, [r3, #8]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f000 f95e 	bl	80024b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	609a      	str	r2, [r3, #8]
      break;
 8002212:	e04f      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f000 f947 	bl	80024b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002236:	609a      	str	r2, [r3, #8]
      break;
 8002238:	e03c      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	461a      	mov	r2, r3
 8002248:	f000 f8be 	bl	80023c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2150      	movs	r1, #80	; 0x50
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f915 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002258:	e02c      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	f000 f8dc 	bl	8002424 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2160      	movs	r1, #96	; 0x60
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f905 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002278:	e01c      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	461a      	mov	r2, r3
 8002288:	f000 f89e 	bl	80023c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2140      	movs	r1, #64	; 0x40
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f8f5 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002298:	e00c      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f000 f8ec 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 80022aa:	e003      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      break;
 80022b0:	e000      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
	...

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a25      	ldr	r2, [pc, #148]	; (80023c0 <TIM_Base_SetConfig+0xa8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <TIM_Base_SetConfig+0x28>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d003      	beq.n	8002340 <TIM_Base_SetConfig+0x28>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <TIM_Base_SetConfig+0xac>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d108      	bne.n	8002352 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <TIM_Base_SetConfig+0xa8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <TIM_Base_SetConfig+0x52>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002360:	d003      	beq.n	800236a <TIM_Base_SetConfig+0x52>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <TIM_Base_SetConfig+0xac>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d108      	bne.n	800237c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <TIM_Base_SetConfig+0xa8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40000400 	.word	0x40000400

080023c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f023 0201 	bic.w	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f023 030a 	bic.w	r3, r3, #10
 8002404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	621a      	str	r2, [r3, #32]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f023 0210 	bic.w	r2, r3, #16
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800244e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	031b      	lsls	r3, r3, #12
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002460:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	621a      	str	r2, [r3, #32]
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	f043 0307 	orr.w	r3, r3, #7
 80024a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	609a      	str	r2, [r3, #8]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b087      	sub	sp, #28
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	021a      	lsls	r2, r3, #8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	431a      	orrs	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4313      	orrs	r3, r2
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	609a      	str	r2, [r3, #8]
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002508:	2302      	movs	r3, #2
 800250a:	e041      	b.n	8002590 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d009      	beq.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002558:	d004      	beq.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d10c      	bne.n	800257e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800256a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	4313      	orrs	r3, r2
 8002574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	40000400 	.word	0x40000400

080025a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <__libc_init_array>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	2600      	movs	r6, #0
 80025cc:	4d0c      	ldr	r5, [pc, #48]	; (8002600 <__libc_init_array+0x38>)
 80025ce:	4c0d      	ldr	r4, [pc, #52]	; (8002604 <__libc_init_array+0x3c>)
 80025d0:	1b64      	subs	r4, r4, r5
 80025d2:	10a4      	asrs	r4, r4, #2
 80025d4:	42a6      	cmp	r6, r4
 80025d6:	d109      	bne.n	80025ec <__libc_init_array+0x24>
 80025d8:	f000 f822 	bl	8002620 <_init>
 80025dc:	2600      	movs	r6, #0
 80025de:	4d0a      	ldr	r5, [pc, #40]	; (8002608 <__libc_init_array+0x40>)
 80025e0:	4c0a      	ldr	r4, [pc, #40]	; (800260c <__libc_init_array+0x44>)
 80025e2:	1b64      	subs	r4, r4, r5
 80025e4:	10a4      	asrs	r4, r4, #2
 80025e6:	42a6      	cmp	r6, r4
 80025e8:	d105      	bne.n	80025f6 <__libc_init_array+0x2e>
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
 80025ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f0:	4798      	blx	r3
 80025f2:	3601      	adds	r6, #1
 80025f4:	e7ee      	b.n	80025d4 <__libc_init_array+0xc>
 80025f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fa:	4798      	blx	r3
 80025fc:	3601      	adds	r6, #1
 80025fe:	e7f2      	b.n	80025e6 <__libc_init_array+0x1e>
 8002600:	08002668 	.word	0x08002668
 8002604:	08002668 	.word	0x08002668
 8002608:	08002668 	.word	0x08002668
 800260c:	0800266c 	.word	0x0800266c

08002610 <memset>:
 8002610:	4603      	mov	r3, r0
 8002612:	4402      	add	r2, r0
 8002614:	4293      	cmp	r3, r2
 8002616:	d100      	bne.n	800261a <memset+0xa>
 8002618:	4770      	bx	lr
 800261a:	f803 1b01 	strb.w	r1, [r3], #1
 800261e:	e7f9      	b.n	8002614 <memset+0x4>

08002620 <_init>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr

0800262c <_fini>:
 800262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262e:	bf00      	nop
 8002630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002632:	bc08      	pop	{r3}
 8002634:	469e      	mov	lr, r3
 8002636:	4770      	bx	lr
