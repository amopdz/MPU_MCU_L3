
L3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aec  08002aec  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002aec  08002aec  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aec  08002aec  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000020  08002b14  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002b14  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091b8  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190e  00000000  00000000  00029201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002ab10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016829  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af2a  00000000  00000000  000426f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082545  00000000  00000000  0004d61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfb60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  000cfbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aa4 	.word	0x08002aa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002aa4 	.word	0x08002aa4

0800014c <display7SEG>:
		normalInit=0;

uint8_t intervalCounter=0;
const uint8_t maxInterval = 2;

void display7SEG(uint8_t number){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if(number>=0 && number<10)segOut=digitMask[number];
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b09      	cmp	r3, #9
 800015a:	d804      	bhi.n	8000166 <display7SEG+0x1a>
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	4a04      	ldr	r2, [pc, #16]	; (8000170 <display7SEG+0x24>)
 8000160:	5cd2      	ldrb	r2, [r2, r3]
 8000162:	4b04      	ldr	r3, [pc, #16]	; (8000174 <display7SEG+0x28>)
 8000164:	701a      	strb	r2, [r3, #0]
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	08002abc 	.word	0x08002abc
 8000174:	2000003f 	.word	0x2000003f

08000178 <update7SEG>:

void update7SEG(int index){
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	display7SEG(led_buffer[index]);
 8000180:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <update7SEG+0x60>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4618      	mov	r0, r3
 800018a:	f7ff ffdf 	bl	800014c <display7SEG>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2b03      	cmp	r3, #3
 8000192:	d81b      	bhi.n	80001cc <update7SEG+0x54>
 8000194:	a201      	add	r2, pc, #4	; (adr r2, 800019c <update7SEG+0x24>)
 8000196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019a:	bf00      	nop
 800019c:	080001ad 	.word	0x080001ad
 80001a0:	080001b5 	.word	0x080001b5
 80001a4:	080001bd 	.word	0x080001bd
 80001a8:	080001c5 	.word	0x080001c5
	switch(index){
		case 0:
			enOut=0xE;
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <update7SEG+0x64>)
 80001ae:	220e      	movs	r2, #14
 80001b0:	701a      	strb	r2, [r3, #0]
			break;
 80001b2:	e00c      	b.n	80001ce <update7SEG+0x56>
		case 1:
			enOut=0xD;
 80001b4:	4b09      	ldr	r3, [pc, #36]	; (80001dc <update7SEG+0x64>)
 80001b6:	220d      	movs	r2, #13
 80001b8:	701a      	strb	r2, [r3, #0]
			break;
 80001ba:	e008      	b.n	80001ce <update7SEG+0x56>
		case 2:
			enOut=0xB;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <update7SEG+0x64>)
 80001be:	220b      	movs	r2, #11
 80001c0:	701a      	strb	r2, [r3, #0]
			break;
 80001c2:	e004      	b.n	80001ce <update7SEG+0x56>
		case 3:
			enOut=0x7;
 80001c4:	4b05      	ldr	r3, [pc, #20]	; (80001dc <update7SEG+0x64>)
 80001c6:	2207      	movs	r2, #7
 80001c8:	701a      	strb	r2, [r3, #0]
			break;
 80001ca:	e000      	b.n	80001ce <update7SEG+0x56>
		default:
			break;
 80001cc:	bf00      	nop
	}
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	20000040 	.word	0x20000040
 80001dc:	2000003e 	.word	0x2000003e

080001e0 <update7SEGMain>:

void update7SEGMain(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	led7SegCounter=led7SegCounter>=MAX7SEG-1?0:led7SegCounter+1;
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <update7SEGMain+0x30>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	461a      	mov	r2, r3
 80001ea:	2304      	movs	r3, #4
 80001ec:	3b01      	subs	r3, #1
 80001ee:	429a      	cmp	r2, r3
 80001f0:	da04      	bge.n	80001fc <update7SEGMain+0x1c>
 80001f2:	4b07      	ldr	r3, [pc, #28]	; (8000210 <update7SEGMain+0x30>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	e000      	b.n	80001fe <update7SEGMain+0x1e>
 80001fc:	2300      	movs	r3, #0
 80001fe:	4a04      	ldr	r2, [pc, #16]	; (8000210 <update7SEGMain+0x30>)
 8000200:	7013      	strb	r3, [r2, #0]
	update7SEG(led7SegCounter);
 8000202:	4b03      	ldr	r3, [pc, #12]	; (8000210 <update7SEGMain+0x30>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4618      	mov	r0, r3
 8000208:	f7ff ffb6 	bl	8000178 <update7SEG>
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000000 	.word	0x20000000

08000214 <fsm_for_mode_button>:

void fsm_for_mode_button(){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	switch(modeButtonState){
 8000218:	4b57      	ldr	r3, [pc, #348]	; (8000378 <fsm_for_mode_button+0x164>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b02      	cmp	r3, #2
 800021e:	d027      	beq.n	8000270 <fsm_for_mode_button+0x5c>
 8000220:	2b02      	cmp	r3, #2
 8000222:	f300 80a7 	bgt.w	8000374 <fsm_for_mode_button+0x160>
 8000226:	2b00      	cmp	r3, #0
 8000228:	d002      	beq.n	8000230 <fsm_for_mode_button+0x1c>
 800022a:	2b01      	cmp	r3, #1
 800022c:	d00b      	beq.n	8000246 <fsm_for_mode_button+0x32>
				durationYellowWaiting = durationYellow;
				durationGreenWaiting = durationGreen;
			}
			break;
	}
}
 800022e:	e0a1      	b.n	8000374 <fsm_for_mode_button+0x160>
			if(is_button_pressed(0)){
 8000230:	2000      	movs	r0, #0
 8000232:	f000 fd67 	bl	8000d04 <is_button_pressed>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	f000 8096 	beq.w	800036a <fsm_for_mode_button+0x156>
				modeButtonState = BUTTON_PRESSED;
 800023e:	4b4e      	ldr	r3, [pc, #312]	; (8000378 <fsm_for_mode_button+0x164>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
			break;
 8000244:	e091      	b.n	800036a <fsm_for_mode_button+0x156>
			if(!is_button_pressed(0)){
 8000246:	2000      	movs	r0, #0
 8000248:	f000 fd5c 	bl	8000d04 <is_button_pressed>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d103      	bne.n	800025a <fsm_for_mode_button+0x46>
				modeButtonState = BUTTON_RELEASED;
 8000252:	4b49      	ldr	r3, [pc, #292]	; (8000378 <fsm_for_mode_button+0x164>)
 8000254:	2200      	movs	r2, #0
 8000256:	701a      	strb	r2, [r3, #0]
			break;
 8000258:	e089      	b.n	800036e <fsm_for_mode_button+0x15a>
				if(is_button_pressed_1s(0)){
 800025a:	2000      	movs	r0, #0
 800025c:	f000 fd6c 	bl	8000d38 <is_button_pressed_1s>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	f000 8083 	beq.w	800036e <fsm_for_mode_button+0x15a>
					modeButtonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000268:	4b43      	ldr	r3, [pc, #268]	; (8000378 <fsm_for_mode_button+0x164>)
 800026a:	2202      	movs	r2, #2
 800026c:	701a      	strb	r2, [r3, #0]
			break;
 800026e:	e07e      	b.n	800036e <fsm_for_mode_button+0x15a>
			if(!is_button_pressed(0)){
 8000270:	2000      	movs	r0, #0
 8000272:	f000 fd47 	bl	8000d04 <is_button_pressed>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d17a      	bne.n	8000372 <fsm_for_mode_button+0x15e>
				modeButtonState = BUTTON_RELEASED;
 800027c:	4b3e      	ldr	r3, [pc, #248]	; (8000378 <fsm_for_mode_button+0x164>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
				switch(mode){
 8000282:	4b3e      	ldr	r3, [pc, #248]	; (800037c <fsm_for_mode_button+0x168>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b03      	cmp	r3, #3
 8000288:	d85f      	bhi.n	800034a <fsm_for_mode_button+0x136>
 800028a:	a201      	add	r2, pc, #4	; (adr r2, 8000290 <fsm_for_mode_button+0x7c>)
 800028c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000290:	080002a1 	.word	0x080002a1
 8000294:	080002af 	.word	0x080002af
 8000298:	080002bd 	.word	0x080002bd
 800029c:	080002cb 	.word	0x080002cb
						normalInit=0;
 80002a0:	4b37      	ldr	r3, [pc, #220]	; (8000380 <fsm_for_mode_button+0x16c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
						mode=MOD_RED;
 80002a6:	4b35      	ldr	r3, [pc, #212]	; (800037c <fsm_for_mode_button+0x168>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]
						break;
 80002ac:	e04d      	b.n	800034a <fsm_for_mode_button+0x136>
						normalInit=0;
 80002ae:	4b34      	ldr	r3, [pc, #208]	; (8000380 <fsm_for_mode_button+0x16c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
						mode=MOD_YELLOW;
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <fsm_for_mode_button+0x168>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	701a      	strb	r2, [r3, #0]
						break;
 80002ba:	e046      	b.n	800034a <fsm_for_mode_button+0x136>
						normalInit=0;
 80002bc:	4b30      	ldr	r3, [pc, #192]	; (8000380 <fsm_for_mode_button+0x16c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
						mode=MOD_GREEN;
 80002c2:	4b2e      	ldr	r3, [pc, #184]	; (800037c <fsm_for_mode_button+0x168>)
 80002c4:	2203      	movs	r2, #3
 80002c6:	701a      	strb	r2, [r3, #0]
						break;
 80002c8:	e03f      	b.n	800034a <fsm_for_mode_button+0x136>
						normalInit=0;
 80002ca:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <fsm_for_mode_button+0x16c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
						mode=NORMAL;
 80002d0:	4b2a      	ldr	r3, [pc, #168]	; (800037c <fsm_for_mode_button+0x168>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
						if(durationRed>durationYellow+durationGreen){
 80002d6:	4b2b      	ldr	r3, [pc, #172]	; (8000384 <fsm_for_mode_button+0x170>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <fsm_for_mode_button+0x174>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	4619      	mov	r1, r3
 80002e2:	4b2a      	ldr	r3, [pc, #168]	; (800038c <fsm_for_mode_button+0x178>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	440b      	add	r3, r1
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dd08      	ble.n	80002fe <fsm_for_mode_button+0xea>
							durationGreen=durationRed-durationYellow;
 80002ec:	4b25      	ldr	r3, [pc, #148]	; (8000384 <fsm_for_mode_button+0x170>)
 80002ee:	781a      	ldrb	r2, [r3, #0]
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <fsm_for_mode_button+0x174>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	4b24      	ldr	r3, [pc, #144]	; (800038c <fsm_for_mode_button+0x178>)
 80002fa:	701a      	strb	r2, [r3, #0]
						break;
 80002fc:	e024      	b.n	8000348 <fsm_for_mode_button+0x134>
						}else if(durationRed<durationYellow+durationGreen){
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <fsm_for_mode_button+0x170>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	4b20      	ldr	r3, [pc, #128]	; (8000388 <fsm_for_mode_button+0x174>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4619      	mov	r1, r3
 800030a:	4b20      	ldr	r3, [pc, #128]	; (800038c <fsm_for_mode_button+0x178>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	440b      	add	r3, r1
 8000310:	429a      	cmp	r2, r3
 8000312:	da19      	bge.n	8000348 <fsm_for_mode_button+0x134>
							if(durationGreen+durationYellow>99){
 8000314:	4b1d      	ldr	r3, [pc, #116]	; (800038c <fsm_for_mode_button+0x178>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	461a      	mov	r2, r3
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <fsm_for_mode_button+0x174>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	4413      	add	r3, r2
 8000320:	2b63      	cmp	r3, #99	; 0x63
 8000322:	dd09      	ble.n	8000338 <fsm_for_mode_button+0x124>
								durationRed=99;
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <fsm_for_mode_button+0x170>)
 8000326:	2263      	movs	r2, #99	; 0x63
 8000328:	701a      	strb	r2, [r3, #0]
								durationGreen=96;
 800032a:	4b18      	ldr	r3, [pc, #96]	; (800038c <fsm_for_mode_button+0x178>)
 800032c:	2260      	movs	r2, #96	; 0x60
 800032e:	701a      	strb	r2, [r3, #0]
								durationYellow=3;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <fsm_for_mode_button+0x174>)
 8000332:	2203      	movs	r2, #3
 8000334:	701a      	strb	r2, [r3, #0]
						break;
 8000336:	e007      	b.n	8000348 <fsm_for_mode_button+0x134>
							}else durationRed=durationGreen+durationYellow;
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <fsm_for_mode_button+0x178>)
 800033a:	781a      	ldrb	r2, [r3, #0]
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <fsm_for_mode_button+0x174>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	4413      	add	r3, r2
 8000342:	b2da      	uxtb	r2, r3
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <fsm_for_mode_button+0x170>)
 8000346:	701a      	strb	r2, [r3, #0]
						break;
 8000348:	bf00      	nop
				counter=0;
 800034a:	4b11      	ldr	r3, [pc, #68]	; (8000390 <fsm_for_mode_button+0x17c>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
				durationRedWaiting = durationRed;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <fsm_for_mode_button+0x170>)
 8000352:	781a      	ldrb	r2, [r3, #0]
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <fsm_for_mode_button+0x180>)
 8000356:	701a      	strb	r2, [r3, #0]
				durationYellowWaiting = durationYellow;
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <fsm_for_mode_button+0x174>)
 800035a:	781a      	ldrb	r2, [r3, #0]
 800035c:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <fsm_for_mode_button+0x184>)
 800035e:	701a      	strb	r2, [r3, #0]
				durationGreenWaiting = durationGreen;
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <fsm_for_mode_button+0x178>)
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <fsm_for_mode_button+0x188>)
 8000366:	701a      	strb	r2, [r3, #0]
			break;
 8000368:	e003      	b.n	8000372 <fsm_for_mode_button+0x15e>
			break;
 800036a:	bf00      	nop
 800036c:	e002      	b.n	8000374 <fsm_for_mode_button+0x160>
			break;
 800036e:	bf00      	nop
 8000370:	e000      	b.n	8000374 <fsm_for_mode_button+0x160>
			break;
 8000372:	bf00      	nop
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000044 	.word	0x20000044
 800037c:	20000047 	.word	0x20000047
 8000380:	20000048 	.word	0x20000048
 8000384:	20000001 	.word	0x20000001
 8000388:	20000002 	.word	0x20000002
 800038c:	20000003 	.word	0x20000003
 8000390:	20000088 	.word	0x20000088
 8000394:	2000008a 	.word	0x2000008a
 8000398:	20000085 	.word	0x20000085
 800039c:	20000084 	.word	0x20000084

080003a0 <done_interval>:

uint8_t done_interval(){
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	if(intervalCounter>0){
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <done_interval+0x2c>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d007      	beq.n	80003bc <done_interval+0x1c>
		intervalCounter--;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <done_interval+0x2c>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	3b01      	subs	r3, #1
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <done_interval+0x2c>)
 80003b6:	701a      	strb	r2, [r3, #0]
		return 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	e003      	b.n	80003c4 <done_interval+0x24>
	}
	intervalCounter=maxInterval;
 80003bc:	2202      	movs	r2, #2
 80003be:	4b03      	ldr	r3, [pc, #12]	; (80003cc <done_interval+0x2c>)
 80003c0:	701a      	strb	r2, [r3, #0]
	return 1;
 80003c2:	2301      	movs	r3, #1
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	20000049 	.word	0x20000049

080003d0 <fsm_for_modify_button>:

void fsm_for_modify_button(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	switch(modifyButtonState){
 80003d4:	4b96      	ldr	r3, [pc, #600]	; (8000630 <fsm_for_modify_button+0x260>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	f200 80bf 	bhi.w	800055c <fsm_for_modify_button+0x18c>
 80003de:	a201      	add	r2, pc, #4	; (adr r2, 80003e4 <fsm_for_modify_button+0x14>)
 80003e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e4:	080003f5 	.word	0x080003f5
 80003e8:	0800040b 	.word	0x0800040b
 80003ec:	08000435 	.word	0x08000435
 80003f0:	080004c9 	.word	0x080004c9
		case BUTTON_RELEASED:
			if(is_button_pressed(1)){
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fc85 	bl	8000d04 <is_button_pressed>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	f000 80a6 	beq.w	800054e <fsm_for_modify_button+0x17e>
				modifyButtonState = BUTTON_PRESSED;
 8000402:	4b8b      	ldr	r3, [pc, #556]	; (8000630 <fsm_for_modify_button+0x260>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000408:	e0a1      	b.n	800054e <fsm_for_modify_button+0x17e>
		case BUTTON_PRESSED:
			if(!is_button_pressed(1)){
 800040a:	2001      	movs	r0, #1
 800040c:	f000 fc7a 	bl	8000d04 <is_button_pressed>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d103      	bne.n	800041e <fsm_for_modify_button+0x4e>
				modifyButtonState = BUTTON_RELEASED;
 8000416:	4b86      	ldr	r3, [pc, #536]	; (8000630 <fsm_for_modify_button+0x260>)
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
			} else {
				if(is_button_pressed_1s(1)){
					modifyButtonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 800041c:	e099      	b.n	8000552 <fsm_for_modify_button+0x182>
				if(is_button_pressed_1s(1)){
 800041e:	2001      	movs	r0, #1
 8000420:	f000 fc8a 	bl	8000d38 <is_button_pressed_1s>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	f000 8093 	beq.w	8000552 <fsm_for_modify_button+0x182>
					modifyButtonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800042c:	4b80      	ldr	r3, [pc, #512]	; (8000630 <fsm_for_modify_button+0x260>)
 800042e:	2202      	movs	r2, #2
 8000430:	701a      	strb	r2, [r3, #0]
			break;
 8000432:	e08e      	b.n	8000552 <fsm_for_modify_button+0x182>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if(!is_button_pressed(1)){
 8000434:	2001      	movs	r0, #1
 8000436:	f000 fc65 	bl	8000d04 <is_button_pressed>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d135      	bne.n	80004ac <fsm_for_modify_button+0xdc>
				modifyButtonState = BUTTON_RELEASED;
 8000440:	4b7b      	ldr	r3, [pc, #492]	; (8000630 <fsm_for_modify_button+0x260>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
				switch(mode){
 8000446:	4b7b      	ldr	r3, [pc, #492]	; (8000634 <fsm_for_modify_button+0x264>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b03      	cmp	r3, #3
 800044c:	d021      	beq.n	8000492 <fsm_for_modify_button+0xc2>
 800044e:	2b03      	cmp	r3, #3
 8000450:	f300 8081 	bgt.w	8000556 <fsm_for_modify_button+0x186>
 8000454:	2b01      	cmp	r3, #1
 8000456:	d002      	beq.n	800045e <fsm_for_modify_button+0x8e>
 8000458:	2b02      	cmp	r3, #2
 800045a:	d00d      	beq.n	8000478 <fsm_for_modify_button+0xa8>
				if(is_button_pressed_3s(1)){
					modifyButtonState = BUTTON_PRESSED_MORE_THAN_3_SECONDS;
					intervalCounter=maxInterval;
				}
			}
			break;
 800045c:	e07b      	b.n	8000556 <fsm_for_modify_button+0x186>
						durationRedWaiting = durationRedWaiting >= 99 ? 1 : durationRedWaiting + 1;
 800045e:	4b76      	ldr	r3, [pc, #472]	; (8000638 <fsm_for_modify_button+0x268>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b62      	cmp	r3, #98	; 0x62
 8000464:	d804      	bhi.n	8000470 <fsm_for_modify_button+0xa0>
 8000466:	4b74      	ldr	r3, [pc, #464]	; (8000638 <fsm_for_modify_button+0x268>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	b2db      	uxtb	r3, r3
 800046e:	e000      	b.n	8000472 <fsm_for_modify_button+0xa2>
 8000470:	2301      	movs	r3, #1
 8000472:	4a71      	ldr	r2, [pc, #452]	; (8000638 <fsm_for_modify_button+0x268>)
 8000474:	7013      	strb	r3, [r2, #0]
						break;
 8000476:	e026      	b.n	80004c6 <fsm_for_modify_button+0xf6>
						durationYellowWaiting = durationYellowWaiting >= 99 ? 1 : durationYellowWaiting + 1;
 8000478:	4b70      	ldr	r3, [pc, #448]	; (800063c <fsm_for_modify_button+0x26c>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b62      	cmp	r3, #98	; 0x62
 800047e:	d804      	bhi.n	800048a <fsm_for_modify_button+0xba>
 8000480:	4b6e      	ldr	r3, [pc, #440]	; (800063c <fsm_for_modify_button+0x26c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	b2db      	uxtb	r3, r3
 8000488:	e000      	b.n	800048c <fsm_for_modify_button+0xbc>
 800048a:	2301      	movs	r3, #1
 800048c:	4a6b      	ldr	r2, [pc, #428]	; (800063c <fsm_for_modify_button+0x26c>)
 800048e:	7013      	strb	r3, [r2, #0]
						break;
 8000490:	e019      	b.n	80004c6 <fsm_for_modify_button+0xf6>
						durationGreenWaiting = durationGreenWaiting >= 99 ? 1 : durationGreenWaiting + 1;
 8000492:	4b6b      	ldr	r3, [pc, #428]	; (8000640 <fsm_for_modify_button+0x270>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b62      	cmp	r3, #98	; 0x62
 8000498:	d804      	bhi.n	80004a4 <fsm_for_modify_button+0xd4>
 800049a:	4b69      	ldr	r3, [pc, #420]	; (8000640 <fsm_for_modify_button+0x270>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	3301      	adds	r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	e000      	b.n	80004a6 <fsm_for_modify_button+0xd6>
 80004a4:	2301      	movs	r3, #1
 80004a6:	4a66      	ldr	r2, [pc, #408]	; (8000640 <fsm_for_modify_button+0x270>)
 80004a8:	7013      	strb	r3, [r2, #0]
						break;
 80004aa:	e00c      	b.n	80004c6 <fsm_for_modify_button+0xf6>
				if(is_button_pressed_3s(1)){
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 fc5d 	bl	8000d6c <is_button_pressed_3s>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d04e      	beq.n	8000556 <fsm_for_modify_button+0x186>
					modifyButtonState = BUTTON_PRESSED_MORE_THAN_3_SECONDS;
 80004b8:	4b5d      	ldr	r3, [pc, #372]	; (8000630 <fsm_for_modify_button+0x260>)
 80004ba:	2203      	movs	r2, #3
 80004bc:	701a      	strb	r2, [r3, #0]
					intervalCounter=maxInterval;
 80004be:	2202      	movs	r2, #2
 80004c0:	4b60      	ldr	r3, [pc, #384]	; (8000644 <fsm_for_modify_button+0x274>)
 80004c2:	701a      	strb	r2, [r3, #0]
			break;
 80004c4:	e047      	b.n	8000556 <fsm_for_modify_button+0x186>
 80004c6:	e046      	b.n	8000556 <fsm_for_modify_button+0x186>
		case BUTTON_PRESSED_MORE_THAN_3_SECONDS:
			if(!is_button_pressed(1)){
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 fc1b 	bl	8000d04 <is_button_pressed>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d103      	bne.n	80004dc <fsm_for_modify_button+0x10c>
				modifyButtonState = BUTTON_RELEASED;
 80004d4:	4b56      	ldr	r3, [pc, #344]	; (8000630 <fsm_for_modify_button+0x260>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
					case MOD_GREEN:
						durationGreenWaiting = durationGreenWaiting >= 99 ? 1 : durationGreenWaiting + 1;
						break;
				}
			}
			break;
 80004da:	e03e      	b.n	800055a <fsm_for_modify_button+0x18a>
			}else if(done_interval()==1){
 80004dc:	f7ff ff60 	bl	80003a0 <done_interval>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d131      	bne.n	800054a <fsm_for_modify_button+0x17a>
				switch(mode){
 80004e6:	4b53      	ldr	r3, [pc, #332]	; (8000634 <fsm_for_modify_button+0x264>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d020      	beq.n	8000530 <fsm_for_modify_button+0x160>
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	dc33      	bgt.n	800055a <fsm_for_modify_button+0x18a>
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d002      	beq.n	80004fc <fsm_for_modify_button+0x12c>
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d00d      	beq.n	8000516 <fsm_for_modify_button+0x146>
			break;
 80004fa:	e02e      	b.n	800055a <fsm_for_modify_button+0x18a>
						durationRedWaiting = durationRedWaiting >= 99 ? 1 : durationRedWaiting + 1;
 80004fc:	4b4e      	ldr	r3, [pc, #312]	; (8000638 <fsm_for_modify_button+0x268>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b62      	cmp	r3, #98	; 0x62
 8000502:	d804      	bhi.n	800050e <fsm_for_modify_button+0x13e>
 8000504:	4b4c      	ldr	r3, [pc, #304]	; (8000638 <fsm_for_modify_button+0x268>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	e000      	b.n	8000510 <fsm_for_modify_button+0x140>
 800050e:	2301      	movs	r3, #1
 8000510:	4a49      	ldr	r2, [pc, #292]	; (8000638 <fsm_for_modify_button+0x268>)
 8000512:	7013      	strb	r3, [r2, #0]
						break;
 8000514:	e01a      	b.n	800054c <fsm_for_modify_button+0x17c>
						durationYellowWaiting = durationYellowWaiting >= 99 ? 1 : durationYellowWaiting + 1;
 8000516:	4b49      	ldr	r3, [pc, #292]	; (800063c <fsm_for_modify_button+0x26c>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b62      	cmp	r3, #98	; 0x62
 800051c:	d804      	bhi.n	8000528 <fsm_for_modify_button+0x158>
 800051e:	4b47      	ldr	r3, [pc, #284]	; (800063c <fsm_for_modify_button+0x26c>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	e000      	b.n	800052a <fsm_for_modify_button+0x15a>
 8000528:	2301      	movs	r3, #1
 800052a:	4a44      	ldr	r2, [pc, #272]	; (800063c <fsm_for_modify_button+0x26c>)
 800052c:	7013      	strb	r3, [r2, #0]
						break;
 800052e:	e00d      	b.n	800054c <fsm_for_modify_button+0x17c>
						durationGreenWaiting = durationGreenWaiting >= 99 ? 1 : durationGreenWaiting + 1;
 8000530:	4b43      	ldr	r3, [pc, #268]	; (8000640 <fsm_for_modify_button+0x270>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b62      	cmp	r3, #98	; 0x62
 8000536:	d804      	bhi.n	8000542 <fsm_for_modify_button+0x172>
 8000538:	4b41      	ldr	r3, [pc, #260]	; (8000640 <fsm_for_modify_button+0x270>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	e000      	b.n	8000544 <fsm_for_modify_button+0x174>
 8000542:	2301      	movs	r3, #1
 8000544:	4a3e      	ldr	r2, [pc, #248]	; (8000640 <fsm_for_modify_button+0x270>)
 8000546:	7013      	strb	r3, [r2, #0]
						break;
 8000548:	e000      	b.n	800054c <fsm_for_modify_button+0x17c>
			}
 800054a:	bf00      	nop
			break;
 800054c:	e005      	b.n	800055a <fsm_for_modify_button+0x18a>
			break;
 800054e:	bf00      	nop
 8000550:	e004      	b.n	800055c <fsm_for_modify_button+0x18c>
			break;
 8000552:	bf00      	nop
 8000554:	e002      	b.n	800055c <fsm_for_modify_button+0x18c>
			break;
 8000556:	bf00      	nop
 8000558:	e000      	b.n	800055c <fsm_for_modify_button+0x18c>
			break;
 800055a:	bf00      	nop
	}
	switch(mode){
 800055c:	4b35      	ldr	r3, [pc, #212]	; (8000634 <fsm_for_modify_button+0x264>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d075      	beq.n	8000650 <fsm_for_modify_button+0x280>
 8000564:	2b03      	cmp	r3, #3
 8000566:	f300 80a2 	bgt.w	80006ae <fsm_for_modify_button+0x2de>
 800056a:	2b01      	cmp	r3, #1
 800056c:	d002      	beq.n	8000574 <fsm_for_modify_button+0x1a4>
 800056e:	2b02      	cmp	r3, #2
 8000570:	d02f      	beq.n	80005d2 <fsm_for_modify_button+0x202>
			led_buffer[1]=durationGreenWaiting%10;
			led_buffer[2]=durationGreenWaiting/10;
			led_buffer[3]=durationGreenWaiting%10;
			break;
	}
}
 8000572:	e09c      	b.n	80006ae <fsm_for_modify_button+0x2de>
			led_buffer[0]=durationRedWaiting/10;
 8000574:	4b30      	ldr	r3, [pc, #192]	; (8000638 <fsm_for_modify_button+0x268>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4a33      	ldr	r2, [pc, #204]	; (8000648 <fsm_for_modify_button+0x278>)
 800057a:	fba2 2303 	umull	r2, r3, r2, r3
 800057e:	08db      	lsrs	r3, r3, #3
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <fsm_for_modify_button+0x27c>)
 8000584:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationRedWaiting%10;
 8000586:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <fsm_for_modify_button+0x268>)
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	4b2f      	ldr	r3, [pc, #188]	; (8000648 <fsm_for_modify_button+0x278>)
 800058c:	fba3 1302 	umull	r1, r3, r3, r2
 8000590:	08d9      	lsrs	r1, r3, #3
 8000592:	460b      	mov	r3, r1
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	440b      	add	r3, r1
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <fsm_for_modify_button+0x27c>)
 80005a0:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationRedWaiting/10;
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <fsm_for_modify_button+0x268>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <fsm_for_modify_button+0x278>)
 80005a8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ac:	08db      	lsrs	r3, r3, #3
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <fsm_for_modify_button+0x27c>)
 80005b2:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationRedWaiting%10;
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <fsm_for_modify_button+0x268>)
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <fsm_for_modify_button+0x278>)
 80005ba:	fba3 1302 	umull	r1, r3, r3, r2
 80005be:	08d9      	lsrs	r1, r3, #3
 80005c0:	460b      	mov	r3, r1
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	440b      	add	r3, r1
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <fsm_for_modify_button+0x27c>)
 80005ce:	70da      	strb	r2, [r3, #3]
			break;
 80005d0:	e06d      	b.n	80006ae <fsm_for_modify_button+0x2de>
			led_buffer[0]=durationYellowWaiting/10;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <fsm_for_modify_button+0x26c>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <fsm_for_modify_button+0x278>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	08db      	lsrs	r3, r3, #3
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <fsm_for_modify_button+0x27c>)
 80005e2:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationYellowWaiting%10;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <fsm_for_modify_button+0x26c>)
 80005e6:	781a      	ldrb	r2, [r3, #0]
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <fsm_for_modify_button+0x278>)
 80005ea:	fba3 1302 	umull	r1, r3, r3, r2
 80005ee:	08d9      	lsrs	r1, r3, #3
 80005f0:	460b      	mov	r3, r1
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	440b      	add	r3, r1
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <fsm_for_modify_button+0x27c>)
 80005fe:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationYellowWaiting/10;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <fsm_for_modify_button+0x26c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <fsm_for_modify_button+0x278>)
 8000606:	fba2 2303 	umull	r2, r3, r2, r3
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <fsm_for_modify_button+0x27c>)
 8000610:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationYellowWaiting%10;
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <fsm_for_modify_button+0x26c>)
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <fsm_for_modify_button+0x278>)
 8000618:	fba3 1302 	umull	r1, r3, r3, r2
 800061c:	08d9      	lsrs	r1, r3, #3
 800061e:	460b      	mov	r3, r1
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <fsm_for_modify_button+0x27c>)
 800062c:	70da      	strb	r2, [r3, #3]
			break;
 800062e:	e03e      	b.n	80006ae <fsm_for_modify_button+0x2de>
 8000630:	20000045 	.word	0x20000045
 8000634:	20000047 	.word	0x20000047
 8000638:	2000008a 	.word	0x2000008a
 800063c:	20000085 	.word	0x20000085
 8000640:	20000084 	.word	0x20000084
 8000644:	20000049 	.word	0x20000049
 8000648:	cccccccd 	.word	0xcccccccd
 800064c:	20000040 	.word	0x20000040
			led_buffer[0]=durationGreenWaiting/10;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <fsm_for_modify_button+0x2e4>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <fsm_for_modify_button+0x2e8>)
 8000656:	fba2 2303 	umull	r2, r3, r2, r3
 800065a:	08db      	lsrs	r3, r3, #3
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <fsm_for_modify_button+0x2ec>)
 8000660:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationGreenWaiting%10;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <fsm_for_modify_button+0x2e4>)
 8000664:	781a      	ldrb	r2, [r3, #0]
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <fsm_for_modify_button+0x2e8>)
 8000668:	fba3 1302 	umull	r1, r3, r3, r2
 800066c:	08d9      	lsrs	r1, r3, #3
 800066e:	460b      	mov	r3, r1
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	440b      	add	r3, r1
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <fsm_for_modify_button+0x2ec>)
 800067c:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationGreenWaiting/10;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <fsm_for_modify_button+0x2e4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <fsm_for_modify_button+0x2e8>)
 8000684:	fba2 2303 	umull	r2, r3, r2, r3
 8000688:	08db      	lsrs	r3, r3, #3
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <fsm_for_modify_button+0x2ec>)
 800068e:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationGreenWaiting%10;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <fsm_for_modify_button+0x2e4>)
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <fsm_for_modify_button+0x2e8>)
 8000696:	fba3 1302 	umull	r1, r3, r3, r2
 800069a:	08d9      	lsrs	r1, r3, #3
 800069c:	460b      	mov	r3, r1
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <fsm_for_modify_button+0x2ec>)
 80006aa:	70da      	strb	r2, [r3, #3]
			break;
 80006ac:	bf00      	nop
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000084 	.word	0x20000084
 80006b8:	cccccccd 	.word	0xcccccccd
 80006bc:	20000040 	.word	0x20000040

080006c0 <fsm_for_set_button>:

void fsm_for_set_button(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	switch(setButtonState){
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <fsm_for_set_button+0x90>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d024      	beq.n	8000716 <fsm_for_set_button+0x56>
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	dc3d      	bgt.n	800074c <fsm_for_set_button+0x8c>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d002      	beq.n	80006da <fsm_for_set_button+0x1a>
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d00a      	beq.n	80006ee <fsm_for_set_button+0x2e>
				durationYellow = durationYellowWaiting;
				durationGreen = durationGreenWaiting;
			}
			break;
	}
}
 80006d8:	e038      	b.n	800074c <fsm_for_set_button+0x8c>
			if(is_button_pressed(2)){
 80006da:	2002      	movs	r0, #2
 80006dc:	f000 fb12 	bl	8000d04 <is_button_pressed>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d02d      	beq.n	8000742 <fsm_for_set_button+0x82>
				setButtonState = BUTTON_PRESSED;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <fsm_for_set_button+0x90>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
			break;
 80006ec:	e029      	b.n	8000742 <fsm_for_set_button+0x82>
			if(!is_button_pressed(2)){
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 fb08 	bl	8000d04 <is_button_pressed>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d103      	bne.n	8000702 <fsm_for_set_button+0x42>
				setButtonState = BUTTON_RELEASED;
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <fsm_for_set_button+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
			break;
 8000700:	e021      	b.n	8000746 <fsm_for_set_button+0x86>
				if(is_button_pressed_1s(2)){
 8000702:	2002      	movs	r0, #2
 8000704:	f000 fb18 	bl	8000d38 <is_button_pressed_1s>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d01b      	beq.n	8000746 <fsm_for_set_button+0x86>
					setButtonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <fsm_for_set_button+0x90>)
 8000710:	2202      	movs	r2, #2
 8000712:	701a      	strb	r2, [r3, #0]
			break;
 8000714:	e017      	b.n	8000746 <fsm_for_set_button+0x86>
			if(!is_button_pressed(2)){
 8000716:	2002      	movs	r0, #2
 8000718:	f000 faf4 	bl	8000d04 <is_button_pressed>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d113      	bne.n	800074a <fsm_for_set_button+0x8a>
				setButtonState = BUTTON_RELEASED;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <fsm_for_set_button+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
				durationRed = durationRedWaiting;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <fsm_for_set_button+0x94>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <fsm_for_set_button+0x98>)
 800072e:	701a      	strb	r2, [r3, #0]
				durationYellow = durationYellowWaiting;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <fsm_for_set_button+0x9c>)
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <fsm_for_set_button+0xa0>)
 8000736:	701a      	strb	r2, [r3, #0]
				durationGreen = durationGreenWaiting;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <fsm_for_set_button+0xa4>)
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <fsm_for_set_button+0xa8>)
 800073e:	701a      	strb	r2, [r3, #0]
			break;
 8000740:	e003      	b.n	800074a <fsm_for_set_button+0x8a>
			break;
 8000742:	bf00      	nop
 8000744:	e002      	b.n	800074c <fsm_for_set_button+0x8c>
			break;
 8000746:	bf00      	nop
 8000748:	e000      	b.n	800074c <fsm_for_set_button+0x8c>
			break;
 800074a:	bf00      	nop
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000046 	.word	0x20000046
 8000754:	2000008a 	.word	0x2000008a
 8000758:	20000001 	.word	0x20000001
 800075c:	20000085 	.word	0x20000085
 8000760:	20000002 	.word	0x20000002
 8000764:	20000084 	.word	0x20000084
 8000768:	20000003 	.word	0x20000003

0800076c <mainMode>:

void mainMode(){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	switch(mode){
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <mainMode+0x40>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d817      	bhi.n	80007a8 <mainMode+0x3c>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <mainMode+0x14>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	08000797 	.word	0x08000797
 8000788:	0800079d 	.word	0x0800079d
 800078c:	080007a3 	.word	0x080007a3
		case NORMAL:
			mode_normal();
 8000790:	f000 f80e 	bl	80007b0 <mode_normal>
			break;
 8000794:	e008      	b.n	80007a8 <mainMode+0x3c>
		case MOD_RED:
			mode_mod_red();
 8000796:	f000 f925 	bl	80009e4 <mode_mod_red>
			break;
 800079a:	e005      	b.n	80007a8 <mainMode+0x3c>
		case MOD_YELLOW:
			mode_mod_yellow();
 800079c:	f000 f956 	bl	8000a4c <mode_mod_yellow>
			break;
 80007a0:	e002      	b.n	80007a8 <mainMode+0x3c>
		case MOD_GREEN:
			mode_mod_green();
 80007a2:	f000 f987 	bl	8000ab4 <mode_mod_green>
			break;
 80007a6:	bf00      	nop
	}
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000047 	.word	0x20000047

080007b0 <mode_normal>:

void mode_normal(){
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	if(normalInit==0){
 80007b4:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <mode_normal+0x204>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d117      	bne.n	80007ec <mode_normal+0x3c>
		traff1Out=6;
 80007bc:	4b7e      	ldr	r3, [pc, #504]	; (80009b8 <mode_normal+0x208>)
 80007be:	2206      	movs	r2, #6
 80007c0:	701a      	strb	r2, [r3, #0]
		traff2Out=3;
 80007c2:	4b7e      	ldr	r3, [pc, #504]	; (80009bc <mode_normal+0x20c>)
 80007c4:	2203      	movs	r2, #3
 80007c6:	701a      	strb	r2, [r3, #0]
		traffCond=RG;
 80007c8:	4b7d      	ldr	r3, [pc, #500]	; (80009c0 <mode_normal+0x210>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
		light1Time=durationRed;
 80007ce:	4b7d      	ldr	r3, [pc, #500]	; (80009c4 <mode_normal+0x214>)
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	4b7d      	ldr	r3, [pc, #500]	; (80009c8 <mode_normal+0x218>)
 80007d4:	701a      	strb	r2, [r3, #0]
		light2Time=durationGreen;
 80007d6:	4b7d      	ldr	r3, [pc, #500]	; (80009cc <mode_normal+0x21c>)
 80007d8:	781a      	ldrb	r2, [r3, #0]
 80007da:	4b7d      	ldr	r3, [pc, #500]	; (80009d0 <mode_normal+0x220>)
 80007dc:	701a      	strb	r2, [r3, #0]
		normalInit=1;
 80007de:	4b75      	ldr	r3, [pc, #468]	; (80009b4 <mode_normal+0x204>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
		counter=4*MAIN_MODE_PERIOD/TIMER_INTERRUPT_PERIOD;
 80007e4:	4b7b      	ldr	r3, [pc, #492]	; (80009d4 <mode_normal+0x224>)
 80007e6:	2214      	movs	r2, #20
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	e0b1      	b.n	8000950 <mode_normal+0x1a0>
	}else{
		if(counter>0)counter--;
 80007ec:	4b79      	ldr	r3, [pc, #484]	; (80009d4 <mode_normal+0x224>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d006      	beq.n	8000802 <mode_normal+0x52>
 80007f4:	4b77      	ldr	r3, [pc, #476]	; (80009d4 <mode_normal+0x224>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b75      	ldr	r3, [pc, #468]	; (80009d4 <mode_normal+0x224>)
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	e0a6      	b.n	8000950 <mode_normal+0x1a0>
		else{
			counter=4*MAIN_MODE_PERIOD/TIMER_INTERRUPT_PERIOD;
 8000802:	4b74      	ldr	r3, [pc, #464]	; (80009d4 <mode_normal+0x224>)
 8000804:	2214      	movs	r2, #20
 8000806:	701a      	strb	r2, [r3, #0]
			switch(traffCond){
 8000808:	4b6d      	ldr	r3, [pc, #436]	; (80009c0 <mode_normal+0x210>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b03      	cmp	r3, #3
 800080e:	f200 809f 	bhi.w	8000950 <mode_normal+0x1a0>
 8000812:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <mode_normal+0x68>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	08000829 	.word	0x08000829
 800081c:	0800086f 	.word	0x0800086f
 8000820:	080008bd 	.word	0x080008bd
 8000824:	08000903 	.word	0x08000903
				case RG:
					if(light1Time>0&&light2Time>0){
 8000828:	4b67      	ldr	r3, [pc, #412]	; (80009c8 <mode_normal+0x218>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d010      	beq.n	8000852 <mode_normal+0xa2>
 8000830:	4b67      	ldr	r3, [pc, #412]	; (80009d0 <mode_normal+0x220>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00c      	beq.n	8000852 <mode_normal+0xa2>
						light1Time--;
 8000838:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <mode_normal+0x218>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b61      	ldr	r3, [pc, #388]	; (80009c8 <mode_normal+0x218>)
 8000842:	701a      	strb	r2, [r3, #0]
						light2Time--;
 8000844:	4b62      	ldr	r3, [pc, #392]	; (80009d0 <mode_normal+0x220>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	3b01      	subs	r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b60      	ldr	r3, [pc, #384]	; (80009d0 <mode_normal+0x220>)
 800084e:	701a      	strb	r2, [r3, #0]
						traff1Out=6;
						traff2Out=5;
						light2Time=durationYellow;
						traffCond=RY;
					}
					break;
 8000850:	e07e      	b.n	8000950 <mode_normal+0x1a0>
						traff1Out=6;
 8000852:	4b59      	ldr	r3, [pc, #356]	; (80009b8 <mode_normal+0x208>)
 8000854:	2206      	movs	r2, #6
 8000856:	701a      	strb	r2, [r3, #0]
						traff2Out=5;
 8000858:	4b58      	ldr	r3, [pc, #352]	; (80009bc <mode_normal+0x20c>)
 800085a:	2205      	movs	r2, #5
 800085c:	701a      	strb	r2, [r3, #0]
						light2Time=durationYellow;
 800085e:	4b5e      	ldr	r3, [pc, #376]	; (80009d8 <mode_normal+0x228>)
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	4b5b      	ldr	r3, [pc, #364]	; (80009d0 <mode_normal+0x220>)
 8000864:	701a      	strb	r2, [r3, #0]
						traffCond=RY;
 8000866:	4b56      	ldr	r3, [pc, #344]	; (80009c0 <mode_normal+0x210>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
					break;
 800086c:	e070      	b.n	8000950 <mode_normal+0x1a0>
				case RY:
					if(light1Time>0&&light2Time>0){
 800086e:	4b56      	ldr	r3, [pc, #344]	; (80009c8 <mode_normal+0x218>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d010      	beq.n	8000898 <mode_normal+0xe8>
 8000876:	4b56      	ldr	r3, [pc, #344]	; (80009d0 <mode_normal+0x220>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00c      	beq.n	8000898 <mode_normal+0xe8>
						light1Time--;
 800087e:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <mode_normal+0x218>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	3b01      	subs	r3, #1
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <mode_normal+0x218>)
 8000888:	701a      	strb	r2, [r3, #0]
						light2Time--;
 800088a:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <mode_normal+0x220>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <mode_normal+0x220>)
 8000894:	701a      	strb	r2, [r3, #0]
						traff2Out=6;
						light1Time=durationGreen;
						light2Time=durationRed;
						traffCond=GR;
					}
					break;
 8000896:	e05b      	b.n	8000950 <mode_normal+0x1a0>
						traff1Out=3;
 8000898:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <mode_normal+0x208>)
 800089a:	2203      	movs	r2, #3
 800089c:	701a      	strb	r2, [r3, #0]
						traff2Out=6;
 800089e:	4b47      	ldr	r3, [pc, #284]	; (80009bc <mode_normal+0x20c>)
 80008a0:	2206      	movs	r2, #6
 80008a2:	701a      	strb	r2, [r3, #0]
						light1Time=durationGreen;
 80008a4:	4b49      	ldr	r3, [pc, #292]	; (80009cc <mode_normal+0x21c>)
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	4b47      	ldr	r3, [pc, #284]	; (80009c8 <mode_normal+0x218>)
 80008aa:	701a      	strb	r2, [r3, #0]
						light2Time=durationRed;
 80008ac:	4b45      	ldr	r3, [pc, #276]	; (80009c4 <mode_normal+0x214>)
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <mode_normal+0x220>)
 80008b2:	701a      	strb	r2, [r3, #0]
						traffCond=GR;
 80008b4:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <mode_normal+0x210>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	701a      	strb	r2, [r3, #0]
					break;
 80008ba:	e049      	b.n	8000950 <mode_normal+0x1a0>
				case GR:
					if(light1Time>0&&light2Time>0){
 80008bc:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <mode_normal+0x218>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d010      	beq.n	80008e6 <mode_normal+0x136>
 80008c4:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <mode_normal+0x220>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00c      	beq.n	80008e6 <mode_normal+0x136>
						light1Time--;
 80008cc:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <mode_normal+0x218>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b3c      	ldr	r3, [pc, #240]	; (80009c8 <mode_normal+0x218>)
 80008d6:	701a      	strb	r2, [r3, #0]
						light2Time--;
 80008d8:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <mode_normal+0x220>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <mode_normal+0x220>)
 80008e2:	701a      	strb	r2, [r3, #0]
						traff1Out=5;
						traff2Out=6;
						light1Time=durationYellow;
						traffCond=YR;
					}
					break;
 80008e4:	e034      	b.n	8000950 <mode_normal+0x1a0>
						traff1Out=5;
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <mode_normal+0x208>)
 80008e8:	2205      	movs	r2, #5
 80008ea:	701a      	strb	r2, [r3, #0]
						traff2Out=6;
 80008ec:	4b33      	ldr	r3, [pc, #204]	; (80009bc <mode_normal+0x20c>)
 80008ee:	2206      	movs	r2, #6
 80008f0:	701a      	strb	r2, [r3, #0]
						light1Time=durationYellow;
 80008f2:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <mode_normal+0x228>)
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <mode_normal+0x218>)
 80008f8:	701a      	strb	r2, [r3, #0]
						traffCond=YR;
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <mode_normal+0x210>)
 80008fc:	2203      	movs	r2, #3
 80008fe:	701a      	strb	r2, [r3, #0]
					break;
 8000900:	e026      	b.n	8000950 <mode_normal+0x1a0>
				case YR:
					if(light1Time>0&&light2Time>0){
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <mode_normal+0x218>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d010      	beq.n	800092c <mode_normal+0x17c>
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <mode_normal+0x220>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d00c      	beq.n	800092c <mode_normal+0x17c>
						light1Time--;
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <mode_normal+0x218>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	3b01      	subs	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <mode_normal+0x218>)
 800091c:	701a      	strb	r2, [r3, #0]
						light2Time--;
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <mode_normal+0x220>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	3b01      	subs	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <mode_normal+0x220>)
 8000928:	701a      	strb	r2, [r3, #0]
						traff2Out=3;
						light2Time=durationGreen;
						light1Time=durationRed;
						traffCond=RG;
					}
					break;
 800092a:	e010      	b.n	800094e <mode_normal+0x19e>
						traff1Out=6;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <mode_normal+0x208>)
 800092e:	2206      	movs	r2, #6
 8000930:	701a      	strb	r2, [r3, #0]
						traff2Out=3;
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <mode_normal+0x20c>)
 8000934:	2203      	movs	r2, #3
 8000936:	701a      	strb	r2, [r3, #0]
						light2Time=durationGreen;
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <mode_normal+0x21c>)
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <mode_normal+0x220>)
 800093e:	701a      	strb	r2, [r3, #0]
						light1Time=durationRed;
 8000940:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <mode_normal+0x214>)
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <mode_normal+0x218>)
 8000946:	701a      	strb	r2, [r3, #0]
						traffCond=RG;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <mode_normal+0x210>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
					break;
 800094e:	bf00      	nop
			}
		}
	}
	led_buffer[0]=light1Time/10;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <mode_normal+0x218>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <mode_normal+0x22c>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <mode_normal+0x230>)
 8000960:	701a      	strb	r2, [r3, #0]
	led_buffer[1]=light1Time%10;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <mode_normal+0x218>)
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <mode_normal+0x22c>)
 8000968:	fba3 1302 	umull	r1, r3, r3, r2
 800096c:	08d9      	lsrs	r1, r3, #3
 800096e:	460b      	mov	r3, r1
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <mode_normal+0x230>)
 800097c:	705a      	strb	r2, [r3, #1]
	led_buffer[2]=light2Time/10;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <mode_normal+0x220>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <mode_normal+0x22c>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <mode_normal+0x230>)
 800098e:	709a      	strb	r2, [r3, #2]
	led_buffer[3]=light2Time%10;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <mode_normal+0x220>)
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <mode_normal+0x22c>)
 8000996:	fba3 1302 	umull	r1, r3, r3, r2
 800099a:	08d9      	lsrs	r1, r3, #3
 800099c:	460b      	mov	r3, r1
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	440b      	add	r3, r1
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <mode_normal+0x230>)
 80009aa:	70da      	strb	r2, [r3, #3]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	20000048 	.word	0x20000048
 80009b8:	2000003c 	.word	0x2000003c
 80009bc:	2000003d 	.word	0x2000003d
 80009c0:	20000087 	.word	0x20000087
 80009c4:	20000001 	.word	0x20000001
 80009c8:	20000089 	.word	0x20000089
 80009cc:	20000003 	.word	0x20000003
 80009d0:	20000086 	.word	0x20000086
 80009d4:	20000088 	.word	0x20000088
 80009d8:	20000002 	.word	0x20000002
 80009dc:	cccccccd 	.word	0xcccccccd
 80009e0:	20000040 	.word	0x20000040

080009e4 <mode_mod_red>:

void mode_mod_red(){
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	if(counter>0)counter--;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <mode_mod_red+0x58>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d006      	beq.n	80009fe <mode_mod_red+0x1a>
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <mode_mod_red+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <mode_mod_red+0x58>)
 80009fa:	701a      	strb	r2, [r3, #0]
			normalInit=0;
			traff1Out=7;
			traff2Out=7;
		}
	}
}
 80009fc:	e019      	b.n	8000a32 <mode_mod_red+0x4e>
		counter=MAIN_MODE_PERIOD/TIMER_INTERRUPT_PERIOD;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <mode_mod_red+0x58>)
 8000a00:	2205      	movs	r2, #5
 8000a02:	701a      	strb	r2, [r3, #0]
		if(normalInit==0){
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <mode_mod_red+0x5c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d109      	bne.n	8000a20 <mode_mod_red+0x3c>
			traff1Out=6;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <mode_mod_red+0x60>)
 8000a0e:	2206      	movs	r2, #6
 8000a10:	701a      	strb	r2, [r3, #0]
			traff2Out=6;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <mode_mod_red+0x64>)
 8000a14:	2206      	movs	r2, #6
 8000a16:	701a      	strb	r2, [r3, #0]
			normalInit=1;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <mode_mod_red+0x5c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
}
 8000a1e:	e008      	b.n	8000a32 <mode_mod_red+0x4e>
			normalInit=0;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <mode_mod_red+0x5c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
			traff1Out=7;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <mode_mod_red+0x60>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	701a      	strb	r2, [r3, #0]
			traff2Out=7;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <mode_mod_red+0x64>)
 8000a2e:	2207      	movs	r2, #7
 8000a30:	701a      	strb	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000088 	.word	0x20000088
 8000a40:	20000048 	.word	0x20000048
 8000a44:	2000003c 	.word	0x2000003c
 8000a48:	2000003d 	.word	0x2000003d

08000a4c <mode_mod_yellow>:

void mode_mod_yellow(){
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
	if(counter>0)counter--;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <mode_mod_yellow+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <mode_mod_yellow+0x1a>
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <mode_mod_yellow+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <mode_mod_yellow+0x58>)
 8000a62:	701a      	strb	r2, [r3, #0]
			normalInit=0;
			traff1Out=7;
			traff2Out=7;
		}
	}
}
 8000a64:	e019      	b.n	8000a9a <mode_mod_yellow+0x4e>
		counter=MAIN_MODE_PERIOD/TIMER_INTERRUPT_PERIOD;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <mode_mod_yellow+0x58>)
 8000a68:	2205      	movs	r2, #5
 8000a6a:	701a      	strb	r2, [r3, #0]
		if(normalInit==0){
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <mode_mod_yellow+0x5c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d109      	bne.n	8000a88 <mode_mod_yellow+0x3c>
			traff1Out=5;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <mode_mod_yellow+0x60>)
 8000a76:	2205      	movs	r2, #5
 8000a78:	701a      	strb	r2, [r3, #0]
			traff2Out=5;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <mode_mod_yellow+0x64>)
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	701a      	strb	r2, [r3, #0]
			normalInit=1;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <mode_mod_yellow+0x5c>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
}
 8000a86:	e008      	b.n	8000a9a <mode_mod_yellow+0x4e>
			normalInit=0;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <mode_mod_yellow+0x5c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
			traff1Out=7;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <mode_mod_yellow+0x60>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	701a      	strb	r2, [r3, #0]
			traff2Out=7;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <mode_mod_yellow+0x64>)
 8000a96:	2207      	movs	r2, #7
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000088 	.word	0x20000088
 8000aa8:	20000048 	.word	0x20000048
 8000aac:	2000003c 	.word	0x2000003c
 8000ab0:	2000003d 	.word	0x2000003d

08000ab4 <mode_mod_green>:

void mode_mod_green(){
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	if(counter>0)counter--;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <mode_mod_green+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <mode_mod_green+0x1a>
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <mode_mod_green+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <mode_mod_green+0x58>)
 8000aca:	701a      	strb	r2, [r3, #0]
			normalInit=0;
			traff1Out=7;
			traff2Out=7;
		}
	}
}
 8000acc:	e019      	b.n	8000b02 <mode_mod_green+0x4e>
		counter=MAIN_MODE_PERIOD/TIMER_INTERRUPT_PERIOD;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <mode_mod_green+0x58>)
 8000ad0:	2205      	movs	r2, #5
 8000ad2:	701a      	strb	r2, [r3, #0]
		if(normalInit==0){
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <mode_mod_green+0x5c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d109      	bne.n	8000af0 <mode_mod_green+0x3c>
			traff1Out=3;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <mode_mod_green+0x60>)
 8000ade:	2203      	movs	r2, #3
 8000ae0:	701a      	strb	r2, [r3, #0]
			traff2Out=3;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <mode_mod_green+0x64>)
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	701a      	strb	r2, [r3, #0]
			normalInit=1;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <mode_mod_green+0x5c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
}
 8000aee:	e008      	b.n	8000b02 <mode_mod_green+0x4e>
			normalInit=0;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <mode_mod_green+0x5c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
			traff1Out=7;
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <mode_mod_green+0x60>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	701a      	strb	r2, [r3, #0]
			traff2Out=7;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <mode_mod_green+0x64>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	701a      	strb	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000088 	.word	0x20000088
 8000b10:	20000048 	.word	0x20000048
 8000b14:	2000003c 	.word	0x2000003c
 8000b18:	2000003d 	.word	0x2000003d

08000b1c <displayAll>:
		case MOD_GREEN:
			break;
	}
}

void displayAll(){
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	GPIOA->ODR=(traff1Out<<12)|(traff2Out<<4);
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <displayAll+0x30>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	031a      	lsls	r2, r3, #12
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <displayAll+0x34>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <displayAll+0x38>)
 8000b30:	60da      	str	r2, [r3, #12]
	GPIOB->ODR=(enOut<<8)|(segOut);
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <displayAll+0x3c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <displayAll+0x40>)
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <displayAll+0x44>)
 8000b40:	60da      	str	r2, [r3, #12]
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	2000003c 	.word	0x2000003c
 8000b50:	2000003d 	.word	0x2000003d
 8000b54:	40010800 	.word	0x40010800
 8000b58:	2000003e 	.word	0x2000003e
 8000b5c:	2000003f 	.word	0x2000003f
 8000b60:	40010c00 	.word	0x40010c00

08000b64 <button_reading>:
uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
uint8_t flagForButtonPress3s[N0_OF_BUTTONS];

uint16_t counterForButtonPress[N0_OF_BUTTONS];

void button_reading(){
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	e0b0      	b.n	8000cd2 <button_reading+0x16e>
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	495b      	ldr	r1, [pc, #364]	; (8000ce4 <button_reading+0x180>)
 8000b76:	5c89      	ldrb	r1, [r1, r2]
 8000b78:	4a5b      	ldr	r2, [pc, #364]	; (8000ce8 <button_reading+0x184>)
 8000b7a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000b7c:	79fa      	ldrb	r2, [r7, #7]
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	495a      	ldr	r1, [pc, #360]	; (8000cec <button_reading+0x188>)
 8000b82:	5c89      	ldrb	r1, [r1, r2]
 8000b84:	4a57      	ldr	r2, [pc, #348]	; (8000ce4 <button_reading+0x180>)
 8000b86:	54d1      	strb	r1, [r2, r3]
		switch(i){
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d01c      	beq.n	8000bc8 <button_reading+0x64>
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	dc25      	bgt.n	8000bde <button_reading+0x7a>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <button_reading+0x38>
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d00b      	beq.n	8000bb2 <button_reading+0x4e>
 8000b9a:	e020      	b.n	8000bde <button_reading+0x7a>
			case 0:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin);
 8000b9c:	79fc      	ldrb	r4, [r7, #7]
 8000b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba2:	4853      	ldr	r0, [pc, #332]	; (8000cf0 <button_reading+0x18c>)
 8000ba4:	f000 ff5e 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b4f      	ldr	r3, [pc, #316]	; (8000cec <button_reading+0x188>)
 8000bae:	551a      	strb	r2, [r3, r4]
				break;
 8000bb0:	e015      	b.n	8000bde <button_reading+0x7a>
			case 1:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 8000bb2:	79fc      	ldrb	r4, [r7, #7]
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	484d      	ldr	r0, [pc, #308]	; (8000cf0 <button_reading+0x18c>)
 8000bba:	f000 ff53 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <button_reading+0x188>)
 8000bc4:	551a      	strb	r2, [r3, r4]
				break;
 8000bc6:	e00a      	b.n	8000bde <button_reading+0x7a>
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 8000bc8:	79fc      	ldrb	r4, [r7, #7]
 8000bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bce:	4848      	ldr	r0, [pc, #288]	; (8000cf0 <button_reading+0x18c>)
 8000bd0:	f000 ff48 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b44      	ldr	r3, [pc, #272]	; (8000cec <button_reading+0x188>)
 8000bda:	551a      	strb	r2, [r3, r4]
				break;
 8000bdc:	bf00      	nop
		}
		if((debounceButtonBuffer1[i] == debounceButtonBuffer2[i])&&(debounceButtonBuffer2[i] == debounceButtonBuffer3[i])){
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4a42      	ldr	r2, [pc, #264]	; (8000cec <button_reading+0x188>)
 8000be2:	5cd2      	ldrb	r2, [r2, r3]
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	493f      	ldr	r1, [pc, #252]	; (8000ce4 <button_reading+0x180>)
 8000be8:	5ccb      	ldrb	r3, [r1, r3]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d161      	bne.n	8000cb2 <button_reading+0x14e>
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4a3c      	ldr	r2, [pc, #240]	; (8000ce4 <button_reading+0x180>)
 8000bf2:	5cd2      	ldrb	r2, [r2, r3]
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	493c      	ldr	r1, [pc, #240]	; (8000ce8 <button_reading+0x184>)
 8000bf8:	5ccb      	ldrb	r3, [r1, r3]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d159      	bne.n	8000cb2 <button_reading+0x14e>
			if(debounceButtonBuffer3[i]!=debounceButtonBuffer4[i]){
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4a39      	ldr	r2, [pc, #228]	; (8000ce8 <button_reading+0x184>)
 8000c02:	5cd2      	ldrb	r2, [r2, r3]
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	493b      	ldr	r1, [pc, #236]	; (8000cf4 <button_reading+0x190>)
 8000c08:	5ccb      	ldrb	r3, [r1, r3]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d01a      	beq.n	8000c44 <button_reading+0xe0>
				debounceButtonBuffer4[i]=debounceButtonBuffer3[i];
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	4935      	ldr	r1, [pc, #212]	; (8000ce8 <button_reading+0x184>)
 8000c14:	5c89      	ldrb	r1, [r1, r2]
 8000c16:	4a37      	ldr	r2, [pc, #220]	; (8000cf4 <button_reading+0x190>)
 8000c18:	54d1      	strb	r1, [r2, r3]
				if((debounceButtonBuffer4[i]==BUTTON_IS_PRESSED)&&(flagForButtonPress1s[i]==0)&&(flagForButtonPress3s[i]==0)){
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4a35      	ldr	r2, [pc, #212]	; (8000cf4 <button_reading+0x190>)
 8000c1e:	5cd3      	ldrb	r3, [r2, r3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d146      	bne.n	8000cb2 <button_reading+0x14e>
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	4a34      	ldr	r2, [pc, #208]	; (8000cf8 <button_reading+0x194>)
 8000c28:	5cd3      	ldrb	r3, [r2, r3]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d141      	bne.n	8000cb2 <button_reading+0x14e>
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4a32      	ldr	r2, [pc, #200]	; (8000cfc <button_reading+0x198>)
 8000c32:	5cd3      	ldrb	r3, [r2, r3]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d13c      	bne.n	8000cb2 <button_reading+0x14e>
					counterForButtonPress[i] = DURATION_FOR_AUTO_INCREASING;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <button_reading+0x19c>)
 8000c3c:	2164      	movs	r1, #100	; 0x64
 8000c3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c42:	e036      	b.n	8000cb2 <button_reading+0x14e>
				}
			}else{
				if((debounceButtonBuffer4[i]==BUTTON_IS_PRESSED)&&((flagForButtonPress1s[i]==0)||(flagForButtonPress3s[i]==0))){
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4a2b      	ldr	r2, [pc, #172]	; (8000cf4 <button_reading+0x190>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d131      	bne.n	8000cb2 <button_reading+0x14e>
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <button_reading+0x194>)
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <button_reading+0xfe>
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a28      	ldr	r2, [pc, #160]	; (8000cfc <button_reading+0x198>)
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d127      	bne.n	8000cb2 <button_reading+0x14e>
					if(counterForButtonPress[i]>0){
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a26      	ldr	r2, [pc, #152]	; (8000d00 <button_reading+0x19c>)
 8000c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d021      	beq.n	8000cb2 <button_reading+0x14e>
						counterForButtonPress[i]--;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <button_reading+0x19c>)
 8000c72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c76:	3a01      	subs	r2, #1
 8000c78:	b291      	uxth	r1, r2
 8000c7a:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <button_reading+0x19c>)
 8000c7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						if(counterForButtonPress[i]==0){
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <button_reading+0x19c>)
 8000c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d112      	bne.n	8000cb2 <button_reading+0x14e>
							if(flagForButtonPress1s[i]==0){
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <button_reading+0x194>)
 8000c90:	5cd3      	ldrb	r3, [r2, r3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d109      	bne.n	8000caa <button_reading+0x146>
								counterForButtonPress[i] = 2*DURATION_FOR_AUTO_INCREASING;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <button_reading+0x19c>)
 8000c9a:	21c8      	movs	r1, #200	; 0xc8
 8000c9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								flagForButtonPress1s[i]=1;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <button_reading+0x194>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	54d1      	strb	r1, [r2, r3]
 8000ca8:	e003      	b.n	8000cb2 <button_reading+0x14e>
							}else flagForButtonPress3s[i]=1;
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <button_reading+0x198>)
 8000cae:	2101      	movs	r1, #1
 8000cb0:	54d1      	strb	r1, [r2, r3]
						}
					}
				}
			}
		}
		if(debounceButtonBuffer4[i]==BUTTON_IS_RELEASED){
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <button_reading+0x190>)
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d107      	bne.n	8000ccc <button_reading+0x168>
			flagForButtonPress1s[i]=0;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <button_reading+0x194>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	54d1      	strb	r1, [r2, r3]
			flagForButtonPress3s[i]=0;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <button_reading+0x198>)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	f67f af4b 	bls.w	8000b70 <button_reading+0xc>
		}
	}
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	20000010 	.word	0x20000010
 8000cf8:	20000090 	.word	0x20000090
 8000cfc:	2000008c 	.word	0x2000008c
 8000d00:	20000094 	.word	0x20000094

08000d04 <is_button_pressed>:

uint8_t is_button_pressed(uint8_t index){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d901      	bls.n	8000d18 <is_button_pressed+0x14>
 8000d14:	2300      	movs	r3, #0
 8000d16:	e007      	b.n	8000d28 <is_button_pressed+0x24>
	return (debounceButtonBuffer4[index]==BUTTON_IS_PRESSED);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <is_button_pressed+0x30>)
 8000d1c:	5cd3      	ldrb	r3, [r2, r3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	bf0c      	ite	eq
 8000d22:	2301      	moveq	r3, #1
 8000d24:	2300      	movne	r3, #0
 8000d26:	b2db      	uxtb	r3, r3
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000010 	.word	0x20000010

08000d38 <is_button_pressed_1s>:

uint8_t is_button_pressed_1s(uint8_t index){
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d901      	bls.n	8000d4c <is_button_pressed_1s+0x14>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e007      	b.n	8000d5c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <is_button_pressed_1s+0x30>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	bf0c      	ite	eq
 8000d56:	2301      	moveq	r3, #1
 8000d58:	2300      	movne	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000090 	.word	0x20000090

08000d6c <is_button_pressed_3s>:

uint8_t is_button_pressed_3s(uint8_t index){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d901      	bls.n	8000d80 <is_button_pressed_3s+0x14>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e007      	b.n	8000d90 <is_button_pressed_3s+0x24>
	return (flagForButtonPress3s[index] == 1);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <is_button_pressed_3s+0x30>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	bf0c      	ite	eq
 8000d8a:	2301      	moveq	r3, #1
 8000d8c:	2300      	movne	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	2000008c 	.word	0x2000008c

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f000 fb74 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f86c 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000dac:	f000 f8a6 	bl	8000efc <MX_TIM2_Init>
  MX_GPIO_Init();
 8000db0:	f000 f8f0 	bl	8000f94 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000db4:	482b      	ldr	r0, [pc, #172]	; (8000e64 <main+0xc4>)
 8000db6:	f001 fab1 	bl	800231c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(21);
 8000dba:	2015      	movs	r0, #21
 8000dbc:	f000 f9ec 	bl	8001198 <setTimer1>
  setTimer2(31);
 8000dc0:	201f      	movs	r0, #31
 8000dc2:	f000 fa05 	bl	80011d0 <setTimer2>
  setTimer3(51);
 8000dc6:	2033      	movs	r0, #51	; 0x33
 8000dc8:	f000 fa1e 	bl	8001208 <setTimer3>
  setTimer4(71);
 8000dcc:	2047      	movs	r0, #71	; 0x47
 8000dce:	f000 fa37 	bl	8001240 <setTimer4>
  setTimer5(91);
 8000dd2:	205b      	movs	r0, #91	; 0x5b
 8000dd4:	f000 fa50 	bl	8001278 <setTimer5>
  setTimer6(111);
 8000dd8:	206f      	movs	r0, #111	; 0x6f
 8000dda:	f000 fa69 	bl	80012b0 <setTimer6>
  setTimer7(131);
 8000dde:	2083      	movs	r0, #131	; 0x83
 8000de0:	f000 fa82 	bl	80012e8 <setTimer7>
  while (1)
  {
	  if(timer1Flag==1){
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <main+0xc8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d104      	bne.n	8000df6 <main+0x56>
		  setTimer1(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f000 f9d3 	bl	8001198 <setTimer1>
		  button_reading();
 8000df2:	f7ff feb7 	bl	8000b64 <button_reading>
	  }
	  if(timer2Flag==1){
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <main+0xcc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d104      	bne.n	8000e08 <main+0x68>
		  setTimer2(MAIN_MODE_PERIOD);
 8000dfe:	2032      	movs	r0, #50	; 0x32
 8000e00:	f000 f9e6 	bl	80011d0 <setTimer2>
		  mainMode();
 8000e04:	f7ff fcb2 	bl	800076c <mainMode>
	  }
	  if(timer3Flag==1){
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <main+0xd0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d104      	bne.n	8000e1a <main+0x7a>
		  setTimer3(250);
 8000e10:	20fa      	movs	r0, #250	; 0xfa
 8000e12:	f000 f9f9 	bl	8001208 <setTimer3>
		  update7SEGMain();
 8000e16:	f7ff f9e3 	bl	80001e0 <update7SEGMain>
	  }
	  if(timer4Flag==1){
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <main+0xd4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d104      	bne.n	8000e2c <main+0x8c>
		  setTimer4(250);
 8000e22:	20fa      	movs	r0, #250	; 0xfa
 8000e24:	f000 fa0c 	bl	8001240 <setTimer4>
		  displayAll();
 8000e28:	f7ff fe78 	bl	8000b1c <displayAll>
	  }
	  if(timer5Flag==1){
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <main+0xd8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d104      	bne.n	8000e3e <main+0x9e>
		  setTimer5(50);
 8000e34:	2032      	movs	r0, #50	; 0x32
 8000e36:	f000 fa1f 	bl	8001278 <setTimer5>
		  fsm_for_mode_button();
 8000e3a:	f7ff f9eb 	bl	8000214 <fsm_for_mode_button>
	  }
	  if(timer6Flag==1){
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <main+0xdc>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d104      	bne.n	8000e50 <main+0xb0>
		  setTimer6(50);
 8000e46:	2032      	movs	r0, #50	; 0x32
 8000e48:	f000 fa32 	bl	80012b0 <setTimer6>
		  fsm_for_modify_button();
 8000e4c:	f7ff fac0 	bl	80003d0 <fsm_for_modify_button>
	  }
	  if(timer7Flag==1){
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <main+0xe0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d1c5      	bne.n	8000de4 <main+0x44>
		  setTimer7(50);
 8000e58:	2032      	movs	r0, #50	; 0x32
 8000e5a:	f000 fa45 	bl	80012e8 <setTimer7>
		  fsm_for_set_button();
 8000e5e:	f7ff fc2f 	bl	80006c0 <fsm_for_set_button>
	  if(timer1Flag==1){
 8000e62:	e7bf      	b.n	8000de4 <main+0x44>
 8000e64:	2000009c 	.word	0x2000009c
 8000e68:	2000004c 	.word	0x2000004c
 8000e6c:	20000054 	.word	0x20000054
 8000e70:	2000005c 	.word	0x2000005c
 8000e74:	20000064 	.word	0x20000064
 8000e78:	2000006c 	.word	0x2000006c
 8000e7c:	20000074 	.word	0x20000074
 8000e80:	2000007c 	.word	0x2000007c

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b090      	sub	sp, #64	; 0x40
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	2228      	movs	r2, #40	; 0x28
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fdfe 	bl	8002a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fe02 	bl	8001ac4 <HAL_RCC_OscConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ec6:	f000 f8d3 	bl	8001070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	230f      	movs	r3, #15
 8000ecc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 f86e 	bl	8001fc4 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000eee:	f000 f8bf 	bl	8001070 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3740      	adds	r7, #64	; 0x40
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <MX_TIM2_Init+0x94>)
 8000f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <MX_TIM2_Init+0x94>)
 8000f22:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <MX_TIM2_Init+0x94>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_TIM2_Init+0x94>)
 8000f30:	2209      	movs	r2, #9
 8000f32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <MX_TIM2_Init+0x94>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_TIM2_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f40:	4813      	ldr	r0, [pc, #76]	; (8000f90 <MX_TIM2_Init+0x94>)
 8000f42:	f001 f99b 	bl	800227c <HAL_TIM_Base_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f4c:	f000 f890 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_TIM2_Init+0x94>)
 8000f5e:	f001 fb31 	bl	80025c4 <HAL_TIM_ConfigClockSource>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f68:	f000 f882 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_TIM2_Init+0x94>)
 8000f7a:	f001 fcfd 	bl	8002978 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f84:	f000 f874 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000009c 	.word	0x2000009c

08000f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_GPIO_Init+0xbc>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a28      	ldr	r2, [pc, #160]	; (8001050 <MX_GPIO_Init+0xbc>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_GPIO_Init+0xbc>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_GPIO_Init+0xbc>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <MX_GPIO_Init+0xbc>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_GPIO_Init+0xbc>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|GPIO_PIN_7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <MX_GPIO_Init+0xc0>)
 8000fe0:	f000 fd57 	bl	8001a92 <HAL_GPIO_WritePin>
                          |RED0_Pin|YELLOW0_Pin|GREEN0_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG00_Pin|SEG01_Pin|SEG02_Pin|EN2_Pin
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f640 717f 	movw	r1, #3967	; 0xf7f
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <MX_GPIO_Init+0xc4>)
 8000fec:	f000 fd51 	bl	8001a92 <HAL_GPIO_WritePin>
                          |EN3_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin PA7
                           RED0_Pin YELLOW0_Pin GREEN0_Pin PA15 */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|GPIO_PIN_7
 8000ff0:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 8000ff4:	60bb      	str	r3, [r7, #8]
                          |RED0_Pin|YELLOW0_Pin|GREEN0_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2302      	movs	r3, #2
 8001000:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4619      	mov	r1, r3
 8001008:	4812      	ldr	r0, [pc, #72]	; (8001054 <MX_GPIO_Init+0xc0>)
 800100a:	f000 fbb1 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG00_Pin SEG01_Pin SEG02_Pin EN2_Pin
                           EN3_Pin SEG03_Pin SEG04_Pin SEG05_Pin
                           SEG06_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = SEG00_Pin|SEG01_Pin|SEG02_Pin|EN2_Pin
 800100e:	f640 737f 	movw	r3, #3967	; 0xf7f
 8001012:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2302      	movs	r3, #2
 800101e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4619      	mov	r1, r3
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <MX_GPIO_Init+0xc4>)
 8001028:	f000 fba2 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin;
 800102c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001030:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4619      	mov	r1, r3
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_GPIO_Init+0xc0>)
 8001042:	f000 fb95 	bl	8001770 <HAL_GPIO_Init>

}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800
 8001058:	40010c00 	.word	0x40010c00

0800105c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	timerRun();
 8001064:	f000 f95c 	bl	8001320 <timerRun>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_MspInit+0x5c>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_MspInit+0x5c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_MspInit+0x5c>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_MspInit+0x5c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_MspInit+0x60>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_MspInit+0x60>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000

080010e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d113      	bne.n	800111a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201c      	movs	r0, #28
 8001110:	f000 faf7 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001114:	201c      	movs	r0, #28
 8001116:	f000 fb10 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116e:	f000 f9d5 	bl	800151c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM2_IRQHandler+0x10>)
 800117e:	f001 f919 	bl	80023b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000009c 	.word	0x2000009c

0800118c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <setTimer1>:
	timer4Flag=0,timer4=0,
	timer5Flag=0,timer5=0,
	timer6Flag=0,timer6=0,
	timer7Flag=0,timer7=0;

void setTimer1(int duration){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	timer1=duration/TIMER_INTERRUPT_PERIOD;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <setTimer1+0x2c>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1092      	asrs	r2, r2, #2
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <setTimer1+0x30>)
 80011b0:	6013      	str	r3, [r2, #0]
	timer1Flag=0;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <setTimer1+0x34>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	66666667 	.word	0x66666667
 80011c8:	20000050 	.word	0x20000050
 80011cc:	2000004c 	.word	0x2000004c

080011d0 <setTimer2>:

void setTimer2(int duration){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	timer2=duration/TIMER_INTERRUPT_PERIOD;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <setTimer2+0x2c>)
 80011dc:	fb82 1203 	smull	r1, r2, r2, r3
 80011e0:	1092      	asrs	r2, r2, #2
 80011e2:	17db      	asrs	r3, r3, #31
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	4a06      	ldr	r2, [pc, #24]	; (8001200 <setTimer2+0x30>)
 80011e8:	6013      	str	r3, [r2, #0]
	timer2Flag=0;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <setTimer2+0x34>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	66666667 	.word	0x66666667
 8001200:	20000058 	.word	0x20000058
 8001204:	20000054 	.word	0x20000054

08001208 <setTimer3>:

void setTimer3(int duration){
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	timer3=duration/TIMER_INTERRUPT_PERIOD;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <setTimer3+0x2c>)
 8001214:	fb82 1203 	smull	r1, r2, r2, r3
 8001218:	1092      	asrs	r2, r2, #2
 800121a:	17db      	asrs	r3, r3, #31
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <setTimer3+0x30>)
 8001220:	6013      	str	r3, [r2, #0]
	timer3Flag=0;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <setTimer3+0x34>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	66666667 	.word	0x66666667
 8001238:	20000060 	.word	0x20000060
 800123c:	2000005c 	.word	0x2000005c

08001240 <setTimer4>:

void setTimer4(int duration){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	timer4=duration/TIMER_INTERRUPT_PERIOD;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <setTimer4+0x2c>)
 800124c:	fb82 1203 	smull	r1, r2, r2, r3
 8001250:	1092      	asrs	r2, r2, #2
 8001252:	17db      	asrs	r3, r3, #31
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	4a06      	ldr	r2, [pc, #24]	; (8001270 <setTimer4+0x30>)
 8001258:	6013      	str	r3, [r2, #0]
	timer4Flag=0;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <setTimer4+0x34>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	66666667 	.word	0x66666667
 8001270:	20000068 	.word	0x20000068
 8001274:	20000064 	.word	0x20000064

08001278 <setTimer5>:

void setTimer5(int duration){
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	timer5=duration/TIMER_INTERRUPT_PERIOD;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <setTimer5+0x2c>)
 8001284:	fb82 1203 	smull	r1, r2, r2, r3
 8001288:	1092      	asrs	r2, r2, #2
 800128a:	17db      	asrs	r3, r3, #31
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <setTimer5+0x30>)
 8001290:	6013      	str	r3, [r2, #0]
	timer5Flag=0;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <setTimer5+0x34>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	66666667 	.word	0x66666667
 80012a8:	20000070 	.word	0x20000070
 80012ac:	2000006c 	.word	0x2000006c

080012b0 <setTimer6>:

void setTimer6(int duration){
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	timer6=duration/TIMER_INTERRUPT_PERIOD;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <setTimer6+0x2c>)
 80012bc:	fb82 1203 	smull	r1, r2, r2, r3
 80012c0:	1092      	asrs	r2, r2, #2
 80012c2:	17db      	asrs	r3, r3, #31
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <setTimer6+0x30>)
 80012c8:	6013      	str	r3, [r2, #0]
	timer6Flag=0;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <setTimer6+0x34>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	66666667 	.word	0x66666667
 80012e0:	20000078 	.word	0x20000078
 80012e4:	20000074 	.word	0x20000074

080012e8 <setTimer7>:

void setTimer7(int duration){
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	timer7=duration/TIMER_INTERRUPT_PERIOD;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <setTimer7+0x2c>)
 80012f4:	fb82 1203 	smull	r1, r2, r2, r3
 80012f8:	1092      	asrs	r2, r2, #2
 80012fa:	17db      	asrs	r3, r3, #31
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	4a06      	ldr	r2, [pc, #24]	; (8001318 <setTimer7+0x30>)
 8001300:	6013      	str	r3, [r2, #0]
	timer7Flag=0;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <setTimer7+0x34>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	66666667 	.word	0x66666667
 8001318:	20000080 	.word	0x20000080
 800131c:	2000007c 	.word	0x2000007c

08001320 <timerRun>:

void timerRun(){
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	if(timer1>0){
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <timerRun+0xec>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	dd0b      	ble.n	8001344 <timerRun+0x24>
		timer1--;
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <timerRun+0xec>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3b01      	subs	r3, #1
 8001332:	4a36      	ldr	r2, [pc, #216]	; (800140c <timerRun+0xec>)
 8001334:	6013      	str	r3, [r2, #0]
		if(timer1<=0)timer1Flag=1;
 8001336:	4b35      	ldr	r3, [pc, #212]	; (800140c <timerRun+0xec>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	dc02      	bgt.n	8001344 <timerRun+0x24>
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <timerRun+0xf0>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]
	}
	if(timer2>0){
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <timerRun+0xf4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd0b      	ble.n	8001364 <timerRun+0x44>
		timer2--;
 800134c:	4b31      	ldr	r3, [pc, #196]	; (8001414 <timerRun+0xf4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3b01      	subs	r3, #1
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <timerRun+0xf4>)
 8001354:	6013      	str	r3, [r2, #0]
		if(timer2<=0)timer2Flag=1;
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <timerRun+0xf4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	dc02      	bgt.n	8001364 <timerRun+0x44>
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <timerRun+0xf8>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
	}
	if(timer3>0){
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <timerRun+0xfc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd0b      	ble.n	8001384 <timerRun+0x64>
		timer3--;
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <timerRun+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	4a2a      	ldr	r2, [pc, #168]	; (800141c <timerRun+0xfc>)
 8001374:	6013      	str	r3, [r2, #0]
		if(timer3<=0)timer3Flag=1;
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <timerRun+0xfc>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	dc02      	bgt.n	8001384 <timerRun+0x64>
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <timerRun+0x100>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]
	}
	if(timer4>0){
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <timerRun+0x104>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	dd0b      	ble.n	80013a4 <timerRun+0x84>
		timer4--;
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <timerRun+0x104>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3b01      	subs	r3, #1
 8001392:	4a24      	ldr	r2, [pc, #144]	; (8001424 <timerRun+0x104>)
 8001394:	6013      	str	r3, [r2, #0]
		if(timer4<=0)timer4Flag=1;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <timerRun+0x104>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	dc02      	bgt.n	80013a4 <timerRun+0x84>
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <timerRun+0x108>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
	}
	if(timer5>0){
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <timerRun+0x10c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dd0b      	ble.n	80013c4 <timerRun+0xa4>
		timer5--;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <timerRun+0x10c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <timerRun+0x10c>)
 80013b4:	6013      	str	r3, [r2, #0]
		if(timer5<=0)timer5Flag=1;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <timerRun+0x10c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dc02      	bgt.n	80013c4 <timerRun+0xa4>
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <timerRun+0x110>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
	}
	if(timer6>0){
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <timerRun+0x114>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dd0b      	ble.n	80013e4 <timerRun+0xc4>
		timer6--;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <timerRun+0x114>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a18      	ldr	r2, [pc, #96]	; (8001434 <timerRun+0x114>)
 80013d4:	6013      	str	r3, [r2, #0]
		if(timer6<=0)timer6Flag=1;
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <timerRun+0x114>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dc02      	bgt.n	80013e4 <timerRun+0xc4>
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <timerRun+0x118>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
	}
	if(timer7>0){
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <timerRun+0x11c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	dd0b      	ble.n	8001404 <timerRun+0xe4>
		timer7--;
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <timerRun+0x11c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <timerRun+0x11c>)
 80013f4:	6013      	str	r3, [r2, #0]
		if(timer7<=0)timer7Flag=1;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <timerRun+0x11c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc02      	bgt.n	8001404 <timerRun+0xe4>
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <timerRun+0x120>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
	}
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000050 	.word	0x20000050
 8001410:	2000004c 	.word	0x2000004c
 8001414:	20000058 	.word	0x20000058
 8001418:	20000054 	.word	0x20000054
 800141c:	20000060 	.word	0x20000060
 8001420:	2000005c 	.word	0x2000005c
 8001424:	20000068 	.word	0x20000068
 8001428:	20000064 	.word	0x20000064
 800142c:	20000070 	.word	0x20000070
 8001430:	2000006c 	.word	0x2000006c
 8001434:	20000078 	.word	0x20000078
 8001438:	20000074 	.word	0x20000074
 800143c:	20000080 	.word	0x20000080
 8001440:	2000007c 	.word	0x2000007c

08001444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff fea2 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800144a:	490c      	ldr	r1, [pc, #48]	; (800147c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <LoopFillZerobss+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001460:	4c09      	ldr	r4, [pc, #36]	; (8001488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f001 faed 	bl	8002a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001472:	f7ff fc95 	bl	8000da0 <main>
  bx lr
 8001476:	4770      	bx	lr
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001480:	08002af4 	.word	0x08002af4
  ldr r2, =_sbss
 8001484:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001488:	200000e8 	.word	0x200000e8

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_Init+0x28>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_Init+0x28>)
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f923 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	200f      	movs	r0, #15
 80014a8:	f000 f808 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ac:	f7ff fde6 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40022000 	.word	0x40022000

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x54>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f93b 	bl	8001756 <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d80a      	bhi.n	8001506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 f903 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4a06      	ldr	r2, [pc, #24]	; (8001518 <HAL_InitTick+0x5c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000014 	.word	0x20000014
 8001514:	2000001c 	.word	0x2000001c
 8001518:	20000018 	.word	0x20000018

0800151c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_IncTick+0x1c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x20>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_IncTick+0x20>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	2000001c 	.word	0x2000001c
 800153c:	200000e4 	.word	0x200000e4

08001540 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b02      	ldr	r3, [pc, #8]	; (8001550 <HAL_GetTick+0x10>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	200000e4 	.word	0x200000e4

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4906      	ldr	r1, [pc, #24]	; (80015ec <__NVIC_EnableIRQ+0x34>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	; (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff90 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff2d 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff42 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff90 	bl	8001644 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5f 	bl	80015f0 <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff35 	bl	80015b8 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b08b      	sub	sp, #44	; 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e148      	b.n	8001a16 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001784:	2201      	movs	r2, #1
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 8137 	bne.w	8001a10 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4aa3      	ldr	r2, [pc, #652]	; (8001a34 <HAL_GPIO_Init+0x2c4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d05e      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017ac:	4aa1      	ldr	r2, [pc, #644]	; (8001a34 <HAL_GPIO_Init+0x2c4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d875      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017b2:	4aa1      	ldr	r2, [pc, #644]	; (8001a38 <HAL_GPIO_Init+0x2c8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d058      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017b8:	4a9f      	ldr	r2, [pc, #636]	; (8001a38 <HAL_GPIO_Init+0x2c8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d86f      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017be:	4a9f      	ldr	r2, [pc, #636]	; (8001a3c <HAL_GPIO_Init+0x2cc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d052      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017c4:	4a9d      	ldr	r2, [pc, #628]	; (8001a3c <HAL_GPIO_Init+0x2cc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d869      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017ca:	4a9d      	ldr	r2, [pc, #628]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d04c      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017d0:	4a9b      	ldr	r2, [pc, #620]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d863      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017d6:	4a9b      	ldr	r2, [pc, #620]	; (8001a44 <HAL_GPIO_Init+0x2d4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d046      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017dc:	4a99      	ldr	r2, [pc, #612]	; (8001a44 <HAL_GPIO_Init+0x2d4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d85d      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d82a      	bhi.n	800183c <HAL_GPIO_Init+0xcc>
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d859      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <HAL_GPIO_Init+0x80>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	0800186b 	.word	0x0800186b
 80017f4:	08001845 	.word	0x08001845
 80017f8:	08001857 	.word	0x08001857
 80017fc:	08001899 	.word	0x08001899
 8001800:	0800189f 	.word	0x0800189f
 8001804:	0800189f 	.word	0x0800189f
 8001808:	0800189f 	.word	0x0800189f
 800180c:	0800189f 	.word	0x0800189f
 8001810:	0800189f 	.word	0x0800189f
 8001814:	0800189f 	.word	0x0800189f
 8001818:	0800189f 	.word	0x0800189f
 800181c:	0800189f 	.word	0x0800189f
 8001820:	0800189f 	.word	0x0800189f
 8001824:	0800189f 	.word	0x0800189f
 8001828:	0800189f 	.word	0x0800189f
 800182c:	0800189f 	.word	0x0800189f
 8001830:	0800189f 	.word	0x0800189f
 8001834:	0800184d 	.word	0x0800184d
 8001838:	08001861 	.word	0x08001861
 800183c:	4a82      	ldr	r2, [pc, #520]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001842:	e02c      	b.n	800189e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e029      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	3304      	adds	r3, #4
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e024      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	3308      	adds	r3, #8
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e01f      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	330c      	adds	r3, #12
 8001866:	623b      	str	r3, [r7, #32]
          break;
 8001868:	e01a      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001872:	2304      	movs	r3, #4
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e013      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	611a      	str	r2, [r3, #16]
          break;
 800188a:	e009      	b.n	80018a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	615a      	str	r2, [r3, #20]
          break;
 8001896:	e003      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          break;
 800189e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2bff      	cmp	r3, #255	; 0xff
 80018a4:	d801      	bhi.n	80018aa <HAL_GPIO_Init+0x13a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	e001      	b.n	80018ae <HAL_GPIO_Init+0x13e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d802      	bhi.n	80018bc <HAL_GPIO_Init+0x14c>
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x152>
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	3b08      	subs	r3, #8
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	210f      	movs	r1, #15
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	6a39      	ldr	r1, [r7, #32]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8090 	beq.w	8001a10 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f0:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_GPIO_Init+0x2dc>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a55      	ldr	r2, [pc, #340]	; (8001a4c <HAL_GPIO_Init+0x2dc>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b53      	ldr	r3, [pc, #332]	; (8001a4c <HAL_GPIO_Init+0x2dc>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001908:	4a51      	ldr	r2, [pc, #324]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <HAL_GPIO_Init+0x2e4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00d      	beq.n	8001950 <HAL_GPIO_Init+0x1e0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a48      	ldr	r2, [pc, #288]	; (8001a58 <HAL_GPIO_Init+0x2e8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d007      	beq.n	800194c <HAL_GPIO_Init+0x1dc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a47      	ldr	r2, [pc, #284]	; (8001a5c <HAL_GPIO_Init+0x2ec>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d101      	bne.n	8001948 <HAL_GPIO_Init+0x1d8>
 8001944:	2302      	movs	r3, #2
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 8001948:	2303      	movs	r3, #3
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 8001950:	2300      	movs	r3, #0
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001962:	493b      	ldr	r1, [pc, #236]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800197c:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4937      	ldr	r1, [pc, #220]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800198a:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	43db      	mvns	r3, r3
 8001992:	4933      	ldr	r1, [pc, #204]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 8001994:	4013      	ands	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a4:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	492d      	ldr	r1, [pc, #180]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4929      	ldr	r1, [pc, #164]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4923      	ldr	r1, [pc, #140]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	491f      	ldr	r1, [pc, #124]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4919      	ldr	r1, [pc, #100]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4915      	ldr	r1, [pc, #84]	; (8001a60 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	3301      	adds	r3, #1
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f47f aeaf 	bne.w	8001784 <HAL_GPIO_Init+0x14>
  }
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	372c      	adds	r7, #44	; 0x2c
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	10320000 	.word	0x10320000
 8001a38:	10310000 	.word	0x10310000
 8001a3c:	10220000 	.word	0x10220000
 8001a40:	10210000 	.word	0x10210000
 8001a44:	10120000 	.word	0x10120000
 8001a48:	10110000 	.word	0x10110000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000
 8001a54:	40010800 	.word	0x40010800
 8001a58:	40010c00 	.word	0x40010c00
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	807b      	strh	r3, [r7, #2]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa2:	787b      	ldrb	r3, [r7, #1]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aae:	e003      	b.n	8001ab8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	611a      	str	r2, [r3, #16]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e26c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8087 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae4:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d00c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af0:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d112      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
 8001afc:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d10b      	bne.n	8001b22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	4b89      	ldr	r3, [pc, #548]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d06c      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d168      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e246      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x76>
 8001b2c:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a7f      	ldr	r2, [pc, #508]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e02e      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x98>
 8001b42:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7a      	ldr	r2, [pc, #488]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a77      	ldr	r2, [pc, #476]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e01d      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0xbc>
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a71      	ldr	r2, [pc, #452]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b6f      	ldr	r3, [pc, #444]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6e      	ldr	r2, [pc, #440]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0xd4>
 8001b80:	4b6b      	ldr	r3, [pc, #428]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6a      	ldr	r2, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a67      	ldr	r2, [pc, #412]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fcce 	bl	8001540 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fcca 	bl	8001540 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1fa      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe4>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fcba 	bl	8001540 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fcb6 	bl	8001540 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1e6      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x10c>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d063      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0a:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d11c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x18c>
 8001c16:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x176>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1ba      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4939      	ldr	r1, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	e03a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fc6f 	bl	8001540 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fc6b 	bl	8001540 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e19b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4927      	ldr	r1, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fc4e 	bl	8001540 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fc4a 	bl	8001540 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e17a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d03a      	beq.n	8001d48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d019      	beq.n	8001d0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fc2e 	bl	8001540 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fc2a 	bl	8001540 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e15a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 fa9a 	bl	8002240 <RCC_Delay>
 8001d0c:	e01c      	b.n	8001d48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_RCC_OscConfig+0x274>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff fc14 	bl	8001540 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1a:	e00f      	b.n	8001d3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fc10 	bl	8001540 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d908      	bls.n	8001d3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e140      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	42420000 	.word	0x42420000
 8001d38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b9e      	ldr	r3, [pc, #632]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e9      	bne.n	8001d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a6 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10d      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a93      	ldr	r2, [pc, #588]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b8b      	ldr	r3, [pc, #556]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a8a      	ldr	r2, [pc, #552]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fbd1 	bl	8001540 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff fbcd 	bl	8001540 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0fd      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x312>
 8001dc8:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a7a      	ldr	r2, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e02d      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x334>
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	e01c      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCC_OscConfig+0x356>
 8001e00:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a6c      	ldr	r2, [pc, #432]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a69      	ldr	r2, [pc, #420]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0x36e>
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a66      	ldr	r2, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d015      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb81 	bl	8001540 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff fb7d 	bl	8001540 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0ab      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0ee      	beq.n	8001e42 <HAL_RCC_OscConfig+0x37e>
 8001e64:	e014      	b.n	8001e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fb6b 	bl	8001540 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7ff fb67 	bl	8001540 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e095      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d105      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8081 	beq.w	8001fae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d061      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d146      	bne.n	8001f4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec0:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fb3b 	bl	8001540 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff fb37 	bl	8001540 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e067      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ef6:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	492d      	ldr	r1, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a19      	ldr	r1, [r3, #32]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	4927      	ldr	r1, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fb0b 	bl	8001540 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff fb07 	bl	8001540 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e037      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x46a>
 8001f4c:	e02f      	b.n	8001fae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff faf4 	bl	8001540 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff faf0 	bl	8001540 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e020      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x498>
 8001f7a:	e018      	b.n	8001fae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e013      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	42420060 	.word	0x42420060

08001fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0d0      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4965      	ldr	r1, [pc, #404]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0b8      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	494d      	ldr	r1, [pc, #308]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d040      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e07f      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e073      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06b      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4936      	ldr	r1, [pc, #216]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b4:	f7ff fa44 	bl	8001540 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7ff fa40 	bl	8001540 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e053      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d210      	bcs.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4922      	ldr	r1, [pc, #136]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e032      	b.n	800217a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4916      	ldr	r1, [pc, #88]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002152:	f000 f821 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002156:	4602      	mov	r2, r0
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	490a      	ldr	r1, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	5ccb      	ldrb	r3, [r1, r3]
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1cc>)
 800216c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1d0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f9a2 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40022000 	.word	0x40022000
 8002188:	40021000 	.word	0x40021000
 800218c:	08002ac8 	.word	0x08002ac8
 8002190:	20000014 	.word	0x20000014
 8002194:	20000018 	.word	0x20000018

08002198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_RCC_GetSysClockFreq+0x94>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x30>
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x36>
 80021c6:	e027      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ca:	613b      	str	r3, [r7, #16]
      break;
 80021cc:	e027      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	0c9b      	lsrs	r3, r3, #18
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d010      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_GetSysClockFreq+0x94>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0c5b      	lsrs	r3, r3, #17
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <HAL_RCC_GetSysClockFreq+0x98>)
 80021fa:	fb02 f203 	mul.w	r2, r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e004      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <HAL_RCC_GetSysClockFreq+0xa4>)
 800220c:	fb02 f303 	mul.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	613b      	str	r3, [r7, #16]
      break;
 8002216:	e002      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetSysClockFreq+0x98>)
 800221a:	613b      	str	r3, [r7, #16]
      break;
 800221c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221e:	693b      	ldr	r3, [r7, #16]
}
 8002220:	4618      	mov	r0, r3
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	007a1200 	.word	0x007a1200
 8002234:	08002ad8 	.word	0x08002ad8
 8002238:	08002ae8 	.word	0x08002ae8
 800223c:	003d0900 	.word	0x003d0900

08002240 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <RCC_Delay+0x34>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <RCC_Delay+0x38>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0a5b      	lsrs	r3, r3, #9
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800225c:	bf00      	nop
  }
  while (Delay --);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1e5a      	subs	r2, r3, #1
 8002262:	60fa      	str	r2, [r7, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f9      	bne.n	800225c <RCC_Delay+0x1c>
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000014 	.word	0x20000014
 8002278:	10624dd3 	.word	0x10624dd3

0800227c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e041      	b.n	8002312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe ff1c 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f000 fa6e 	bl	800279c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d001      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e035      	b.n	80023a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_TIM_Base_Start_IT+0x90>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d009      	beq.n	800236a <HAL_TIM_Base_Start_IT+0x4e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235e:	d004      	beq.n	800236a <HAL_TIM_Base_Start_IT+0x4e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d111      	bne.n	800238e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b06      	cmp	r3, #6
 800237a:	d010      	beq.n	800239e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238c:	e007      	b.n	800239e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40000400 	.word	0x40000400

080023b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0202 	mvn.w	r2, #2
 80023e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f9b4 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f9a7 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f9b6 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b04      	cmp	r3, #4
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0204 	mvn.w	r2, #4
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2202      	movs	r2, #2
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f98a 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f97d 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f98c 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b08      	cmp	r3, #8
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b08      	cmp	r3, #8
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0208 	mvn.w	r2, #8
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2204      	movs	r2, #4
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f960 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f953 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f962 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0210 	mvn.w	r2, #16
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2208      	movs	r2, #8
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f936 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f929 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f938 	bl	8002776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10e      	bne.n	8002538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d107      	bne.n	8002538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0201 	mvn.w	r2, #1
 8002530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fd92 	bl	800105c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002542:	2b80      	cmp	r3, #128	; 0x80
 8002544:	d10e      	bne.n	8002564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002550:	2b80      	cmp	r3, #128	; 0x80
 8002552:	d107      	bne.n	8002564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800255c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa6b 	bl	8002a3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d10e      	bne.n	8002590 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d107      	bne.n	8002590 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8fc 	bl	8002788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b20      	cmp	r3, #32
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d107      	bne.n	80025bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0220 	mvn.w	r2, #32
 80025b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fa36 	bl	8002a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_TIM_ConfigClockSource+0x1c>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0b4      	b.n	800274a <HAL_TIM_ConfigClockSource+0x186>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002618:	d03e      	beq.n	8002698 <HAL_TIM_ConfigClockSource+0xd4>
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261e:	f200 8087 	bhi.w	8002730 <HAL_TIM_ConfigClockSource+0x16c>
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	f000 8086 	beq.w	8002736 <HAL_TIM_ConfigClockSource+0x172>
 800262a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262e:	d87f      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x16c>
 8002630:	2b70      	cmp	r3, #112	; 0x70
 8002632:	d01a      	beq.n	800266a <HAL_TIM_ConfigClockSource+0xa6>
 8002634:	2b70      	cmp	r3, #112	; 0x70
 8002636:	d87b      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x16c>
 8002638:	2b60      	cmp	r3, #96	; 0x60
 800263a:	d050      	beq.n	80026de <HAL_TIM_ConfigClockSource+0x11a>
 800263c:	2b60      	cmp	r3, #96	; 0x60
 800263e:	d877      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x16c>
 8002640:	2b50      	cmp	r3, #80	; 0x50
 8002642:	d03c      	beq.n	80026be <HAL_TIM_ConfigClockSource+0xfa>
 8002644:	2b50      	cmp	r3, #80	; 0x50
 8002646:	d873      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x16c>
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d058      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x13a>
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d86f      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x16c>
 8002650:	2b30      	cmp	r3, #48	; 0x30
 8002652:	d064      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x15a>
 8002654:	2b30      	cmp	r3, #48	; 0x30
 8002656:	d86b      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x16c>
 8002658:	2b20      	cmp	r3, #32
 800265a:	d060      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x15a>
 800265c:	2b20      	cmp	r3, #32
 800265e:	d867      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x16c>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d05c      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x15a>
 8002664:	2b10      	cmp	r3, #16
 8002666:	d05a      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x15a>
 8002668:	e062      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6899      	ldr	r1, [r3, #8]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f000 f95e 	bl	800293a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800268c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	609a      	str	r2, [r3, #8]
      break;
 8002696:	e04f      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6899      	ldr	r1, [r3, #8]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f000 f947 	bl	800293a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ba:	609a      	str	r2, [r3, #8]
      break;
 80026bc:	e03c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f000 f8be 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2150      	movs	r1, #80	; 0x50
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f915 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80026dc:	e02c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 f8dc 	bl	80028a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2160      	movs	r1, #96	; 0x60
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f905 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e01c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	461a      	mov	r2, r3
 800270c:	f000 f89e 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2140      	movs	r1, #64	; 0x40
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f8f5 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 800271c:	e00c      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f000 f8ec 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 800272e:	e003      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      break;
 8002734:	e000      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
	...

0800279c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a25      	ldr	r2, [pc, #148]	; (8002844 <TIM_Base_SetConfig+0xa8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d007      	beq.n	80027c4 <TIM_Base_SetConfig+0x28>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d003      	beq.n	80027c4 <TIM_Base_SetConfig+0x28>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a22      	ldr	r2, [pc, #136]	; (8002848 <TIM_Base_SetConfig+0xac>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d108      	bne.n	80027d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <TIM_Base_SetConfig+0xa8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <TIM_Base_SetConfig+0x52>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e4:	d003      	beq.n	80027ee <TIM_Base_SetConfig+0x52>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a17      	ldr	r2, [pc, #92]	; (8002848 <TIM_Base_SetConfig+0xac>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d108      	bne.n	8002800 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a07      	ldr	r2, [pc, #28]	; (8002844 <TIM_Base_SetConfig+0xa8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d103      	bne.n	8002834 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	615a      	str	r2, [r3, #20]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40000400 	.word	0x40000400

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0210 	bic.w	r2, r3, #16
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	031b      	lsls	r3, r3, #12
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800298c:	2302      	movs	r3, #2
 800298e:	e041      	b.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d004      	beq.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10c      	bne.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40000400 	.word	0x40000400

08002a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <__libc_init_array>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2600      	movs	r6, #0
 8002a50:	4d0c      	ldr	r5, [pc, #48]	; (8002a84 <__libc_init_array+0x38>)
 8002a52:	4c0d      	ldr	r4, [pc, #52]	; (8002a88 <__libc_init_array+0x3c>)
 8002a54:	1b64      	subs	r4, r4, r5
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	42a6      	cmp	r6, r4
 8002a5a:	d109      	bne.n	8002a70 <__libc_init_array+0x24>
 8002a5c:	f000 f822 	bl	8002aa4 <_init>
 8002a60:	2600      	movs	r6, #0
 8002a62:	4d0a      	ldr	r5, [pc, #40]	; (8002a8c <__libc_init_array+0x40>)
 8002a64:	4c0a      	ldr	r4, [pc, #40]	; (8002a90 <__libc_init_array+0x44>)
 8002a66:	1b64      	subs	r4, r4, r5
 8002a68:	10a4      	asrs	r4, r4, #2
 8002a6a:	42a6      	cmp	r6, r4
 8002a6c:	d105      	bne.n	8002a7a <__libc_init_array+0x2e>
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a74:	4798      	blx	r3
 8002a76:	3601      	adds	r6, #1
 8002a78:	e7ee      	b.n	8002a58 <__libc_init_array+0xc>
 8002a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7e:	4798      	blx	r3
 8002a80:	3601      	adds	r6, #1
 8002a82:	e7f2      	b.n	8002a6a <__libc_init_array+0x1e>
 8002a84:	08002aec 	.word	0x08002aec
 8002a88:	08002aec 	.word	0x08002aec
 8002a8c:	08002aec 	.word	0x08002aec
 8002a90:	08002af0 	.word	0x08002af0

08002a94 <memset>:
 8002a94:	4603      	mov	r3, r0
 8002a96:	4402      	add	r2, r0
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d100      	bne.n	8002a9e <memset+0xa>
 8002a9c:	4770      	bx	lr
 8002a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002aa2:	e7f9      	b.n	8002a98 <memset+0x4>

08002aa4 <_init>:
 8002aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa6:	bf00      	nop
 8002aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aaa:	bc08      	pop	{r3}
 8002aac:	469e      	mov	lr, r3
 8002aae:	4770      	bx	lr

08002ab0 <_fini>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	bf00      	nop
 8002ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab6:	bc08      	pop	{r3}
 8002ab8:	469e      	mov	lr, r3
 8002aba:	4770      	bx	lr
