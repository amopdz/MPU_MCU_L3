
L3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ddc  08003ddc  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003ddc  08003ddc  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ddc  08003ddc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ddc  08003ddc  00013ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000084  08003e68  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08003e68  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7ee  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219c  00000000  00000000  0002c89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  0002f700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fb3  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee11  00000000  00000000  00048293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d65  00000000  00000000  000570a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfe09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003814  00000000  00000000  000dfe5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d54 	.word	0x08003d54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003d54 	.word	0x08003d54

0800014c <display7Seg>:
		segOut=0,
		enOut=0;

//FUNCTIONS
//7Seg & 7Seg buffer & Driver code for these functions
void display7Seg(uint8_t number){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if(number>=0 && number<10)segOut=digitMask[number];
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b09      	cmp	r3, #9
 800015a:	d804      	bhi.n	8000166 <display7Seg+0x1a>
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	4a04      	ldr	r2, [pc, #16]	; (8000170 <display7Seg+0x24>)
 8000160:	5cd2      	ldrb	r2, [r2, r3]
 8000162:	4b04      	ldr	r3, [pc, #16]	; (8000174 <display7Seg+0x28>)
 8000164:	701a      	strb	r2, [r3, #0]
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	08003d84 	.word	0x08003d84
 8000174:	200000a0 	.word	0x200000a0

08000178 <update7Seg>:

void update7Seg(int index){
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	display7Seg(led_buffer[index]);
 8000180:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <update7Seg+0x60>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4618      	mov	r0, r3
 800018a:	f7ff ffdf 	bl	800014c <display7Seg>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2b03      	cmp	r3, #3
 8000192:	d81b      	bhi.n	80001cc <update7Seg+0x54>
 8000194:	a201      	add	r2, pc, #4	; (adr r2, 800019c <update7Seg+0x24>)
 8000196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019a:	bf00      	nop
 800019c:	080001ad 	.word	0x080001ad
 80001a0:	080001b5 	.word	0x080001b5
 80001a4:	080001bd 	.word	0x080001bd
 80001a8:	080001c5 	.word	0x080001c5
	switch(index){
		case 0:
			enOut=0xE;
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <update7Seg+0x64>)
 80001ae:	220e      	movs	r2, #14
 80001b0:	701a      	strb	r2, [r3, #0]
			break;
 80001b2:	e00c      	b.n	80001ce <update7Seg+0x56>
		case 1:
			enOut=0xD;
 80001b4:	4b09      	ldr	r3, [pc, #36]	; (80001dc <update7Seg+0x64>)
 80001b6:	220d      	movs	r2, #13
 80001b8:	701a      	strb	r2, [r3, #0]
			break;
 80001ba:	e008      	b.n	80001ce <update7Seg+0x56>
		case 2:
			enOut=0xB;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <update7Seg+0x64>)
 80001be:	220b      	movs	r2, #11
 80001c0:	701a      	strb	r2, [r3, #0]
			break;
 80001c2:	e004      	b.n	80001ce <update7Seg+0x56>
		case 3:
			enOut=0x7;
 80001c4:	4b05      	ldr	r3, [pc, #20]	; (80001dc <update7Seg+0x64>)
 80001c6:	2207      	movs	r2, #7
 80001c8:	701a      	strb	r2, [r3, #0]
			break;
 80001ca:	e000      	b.n	80001ce <update7Seg+0x56>
		default:
			break;
 80001cc:	bf00      	nop
	}
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	200000a1 	.word	0x200000a1

080001e0 <update7SegMain>:

void update7SegMain(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	led7SegCounter=led7SegCounter>=MAX7SEG-1?0:led7SegCounter+1;
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <update7SegMain+0x2c>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	d804      	bhi.n	80001f6 <update7SegMain+0x16>
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <update7SegMain+0x2c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	e000      	b.n	80001f8 <update7SegMain+0x18>
 80001f6:	2300      	movs	r3, #0
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <update7SegMain+0x2c>)
 80001fa:	7013      	strb	r3, [r2, #0]
	update7Seg(led7SegCounter);
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <update7SegMain+0x2c>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f7ff ffb9 	bl	8000178 <update7Seg>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000000 	.word	0x20000000

08000210 <displayAll>:

//Registering output to pins
void displayAll(){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	GPIOA->ODR=(traff1Out<<12)|(traff2Out<<4);
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <displayAll+0x30>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	031a      	lsls	r2, r3, #12
 800021a:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <displayAll+0x34>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	011b      	lsls	r3, r3, #4
 8000220:	431a      	orrs	r2, r3
 8000222:	4b09      	ldr	r3, [pc, #36]	; (8000248 <displayAll+0x38>)
 8000224:	60da      	str	r2, [r3, #12]
	GPIOB->ODR=(enOut<<8)|(segOut);
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <displayAll+0x3c>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	021b      	lsls	r3, r3, #8
 800022c:	4a08      	ldr	r2, [pc, #32]	; (8000250 <displayAll+0x40>)
 800022e:	7812      	ldrb	r2, [r2, #0]
 8000230:	431a      	orrs	r2, r3
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <displayAll+0x44>)
 8000234:	60da      	str	r2, [r3, #12]
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	200000c3 	.word	0x200000c3
 8000244:	200000c2 	.word	0x200000c2
 8000248:	40010800 	.word	0x40010800
 800024c:	200000a1 	.word	0x200000a1
 8000250:	200000a0 	.word	0x200000a0
 8000254:	40010c00 	.word	0x40010c00

08000258 <fsm_automatic>:
		traffCond,	//FSM for the traffic lights
		traff1Out,	//Buffer for 2 traffic lights
		traff2Out;

//FSM for buttons
void fsm_automatic(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	switch(mode){
 800025c:	4b94      	ldr	r3, [pc, #592]	; (80004b0 <fsm_automatic+0x258>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b04      	cmp	r3, #4
 8000262:	f200 81ff 	bhi.w	8000664 <fsm_automatic+0x40c>
 8000266:	a201      	add	r2, pc, #4	; (adr r2, 800026c <fsm_automatic+0x14>)
 8000268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026c:	08000281 	.word	0x08000281
 8000270:	08000397 	.word	0x08000397
 8000274:	080003e7 	.word	0x080003e7
 8000278:	080004ed 	.word	0x080004ed
 800027c:	080005b1 	.word	0x080005b1
		case INIT:
			durationRedWaiting=durationRed;
 8000280:	4b8c      	ldr	r3, [pc, #560]	; (80004b4 <fsm_automatic+0x25c>)
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <fsm_automatic+0x260>)
 8000286:	701a      	strb	r2, [r3, #0]
			durationYellowWaiting=durationYellow;
 8000288:	4b8c      	ldr	r3, [pc, #560]	; (80004bc <fsm_automatic+0x264>)
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	4b8c      	ldr	r3, [pc, #560]	; (80004c0 <fsm_automatic+0x268>)
 800028e:	701a      	strb	r2, [r3, #0]
			durationGreenWaiting=durationGreen;
 8000290:	4b8c      	ldr	r3, [pc, #560]	; (80004c4 <fsm_automatic+0x26c>)
 8000292:	781a      	ldrb	r2, [r3, #0]
 8000294:	4b8c      	ldr	r3, [pc, #560]	; (80004c8 <fsm_automatic+0x270>)
 8000296:	701a      	strb	r2, [r3, #0]
			if(durationRed>durationYellow+durationGreen){
 8000298:	4b86      	ldr	r3, [pc, #536]	; (80004b4 <fsm_automatic+0x25c>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	461a      	mov	r2, r3
 800029e:	4b87      	ldr	r3, [pc, #540]	; (80004bc <fsm_automatic+0x264>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	4619      	mov	r1, r3
 80002a4:	4b87      	ldr	r3, [pc, #540]	; (80004c4 <fsm_automatic+0x26c>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	440b      	add	r3, r1
 80002aa:	429a      	cmp	r2, r3
 80002ac:	dd08      	ble.n	80002c0 <fsm_automatic+0x68>
				durationGreen=durationRed-durationYellow;
 80002ae:	4b81      	ldr	r3, [pc, #516]	; (80004b4 <fsm_automatic+0x25c>)
 80002b0:	781a      	ldrb	r2, [r3, #0]
 80002b2:	4b82      	ldr	r3, [pc, #520]	; (80004bc <fsm_automatic+0x264>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b82      	ldr	r3, [pc, #520]	; (80004c4 <fsm_automatic+0x26c>)
 80002bc:	701a      	strb	r2, [r3, #0]
 80002be:	e024      	b.n	800030a <fsm_automatic+0xb2>
			}else if(durationRed<durationYellow+durationGreen){
 80002c0:	4b7c      	ldr	r3, [pc, #496]	; (80004b4 <fsm_automatic+0x25c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	461a      	mov	r2, r3
 80002c6:	4b7d      	ldr	r3, [pc, #500]	; (80004bc <fsm_automatic+0x264>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4619      	mov	r1, r3
 80002cc:	4b7d      	ldr	r3, [pc, #500]	; (80004c4 <fsm_automatic+0x26c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	440b      	add	r3, r1
 80002d2:	429a      	cmp	r2, r3
 80002d4:	da19      	bge.n	800030a <fsm_automatic+0xb2>
				if(durationGreen+durationYellow>99){
 80002d6:	4b7b      	ldr	r3, [pc, #492]	; (80004c4 <fsm_automatic+0x26c>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b77      	ldr	r3, [pc, #476]	; (80004bc <fsm_automatic+0x264>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	4413      	add	r3, r2
 80002e2:	2b63      	cmp	r3, #99	; 0x63
 80002e4:	dd09      	ble.n	80002fa <fsm_automatic+0xa2>
					durationRed=99;
 80002e6:	4b73      	ldr	r3, [pc, #460]	; (80004b4 <fsm_automatic+0x25c>)
 80002e8:	2263      	movs	r2, #99	; 0x63
 80002ea:	701a      	strb	r2, [r3, #0]
					durationGreen=96;
 80002ec:	4b75      	ldr	r3, [pc, #468]	; (80004c4 <fsm_automatic+0x26c>)
 80002ee:	2260      	movs	r2, #96	; 0x60
 80002f0:	701a      	strb	r2, [r3, #0]
					durationYellow=3;
 80002f2:	4b72      	ldr	r3, [pc, #456]	; (80004bc <fsm_automatic+0x264>)
 80002f4:	2203      	movs	r2, #3
 80002f6:	701a      	strb	r2, [r3, #0]
 80002f8:	e007      	b.n	800030a <fsm_automatic+0xb2>
				}else durationRed=durationGreen+durationYellow;
 80002fa:	4b72      	ldr	r3, [pc, #456]	; (80004c4 <fsm_automatic+0x26c>)
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	4b6f      	ldr	r3, [pc, #444]	; (80004bc <fsm_automatic+0x264>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4413      	add	r3, r2
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b6b      	ldr	r3, [pc, #428]	; (80004b4 <fsm_automatic+0x25c>)
 8000308:	701a      	strb	r2, [r3, #0]
			}
			light1Time=durationRed;
 800030a:	4b6a      	ldr	r3, [pc, #424]	; (80004b4 <fsm_automatic+0x25c>)
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	4b6f      	ldr	r3, [pc, #444]	; (80004cc <fsm_automatic+0x274>)
 8000310:	701a      	strb	r2, [r3, #0]
			light2Time=durationGreen;
 8000312:	4b6c      	ldr	r3, [pc, #432]	; (80004c4 <fsm_automatic+0x26c>)
 8000314:	781a      	ldrb	r2, [r3, #0]
 8000316:	4b6e      	ldr	r3, [pc, #440]	; (80004d0 <fsm_automatic+0x278>)
 8000318:	701a      	strb	r2, [r3, #0]
			traffCond=RG;
 800031a:	4b6e      	ldr	r3, [pc, #440]	; (80004d4 <fsm_automatic+0x27c>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
			led_buffer[0]=light1Time/10;
 8000320:	4b6a      	ldr	r3, [pc, #424]	; (80004cc <fsm_automatic+0x274>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	4a6c      	ldr	r2, [pc, #432]	; (80004d8 <fsm_automatic+0x280>)
 8000326:	fba2 2303 	umull	r2, r3, r2, r3
 800032a:	08db      	lsrs	r3, r3, #3
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b6b      	ldr	r3, [pc, #428]	; (80004dc <fsm_automatic+0x284>)
 8000330:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=light1Time%10;
 8000332:	4b66      	ldr	r3, [pc, #408]	; (80004cc <fsm_automatic+0x274>)
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b68      	ldr	r3, [pc, #416]	; (80004d8 <fsm_automatic+0x280>)
 8000338:	fba3 1302 	umull	r1, r3, r3, r2
 800033c:	08d9      	lsrs	r1, r3, #3
 800033e:	460b      	mov	r3, r1
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	440b      	add	r3, r1
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	1ad3      	subs	r3, r2, r3
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b64      	ldr	r3, [pc, #400]	; (80004dc <fsm_automatic+0x284>)
 800034c:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=light2Time/10;
 800034e:	4b60      	ldr	r3, [pc, #384]	; (80004d0 <fsm_automatic+0x278>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	4a61      	ldr	r2, [pc, #388]	; (80004d8 <fsm_automatic+0x280>)
 8000354:	fba2 2303 	umull	r2, r3, r2, r3
 8000358:	08db      	lsrs	r3, r3, #3
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b5f      	ldr	r3, [pc, #380]	; (80004dc <fsm_automatic+0x284>)
 800035e:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=light2Time%10;
 8000360:	4b5b      	ldr	r3, [pc, #364]	; (80004d0 <fsm_automatic+0x278>)
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	4b5c      	ldr	r3, [pc, #368]	; (80004d8 <fsm_automatic+0x280>)
 8000366:	fba3 1302 	umull	r1, r3, r3, r2
 800036a:	08d9      	lsrs	r1, r3, #3
 800036c:	460b      	mov	r3, r1
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	440b      	add	r3, r1
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b58      	ldr	r3, [pc, #352]	; (80004dc <fsm_automatic+0x284>)
 800037a:	70da      	strb	r2, [r3, #3]
			buttonFlag[0]=0;
 800037c:	4b58      	ldr	r3, [pc, #352]	; (80004e0 <fsm_automatic+0x288>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
			buttonFlag[1]=0;
 8000382:	4b57      	ldr	r3, [pc, #348]	; (80004e0 <fsm_automatic+0x288>)
 8000384:	2200      	movs	r2, #0
 8000386:	705a      	strb	r2, [r3, #1]
			buttonFlag[2]=0;
 8000388:	4b55      	ldr	r3, [pc, #340]	; (80004e0 <fsm_automatic+0x288>)
 800038a:	2200      	movs	r2, #0
 800038c:	709a      	strb	r2, [r3, #2]
			mode=NORMAL;
 800038e:	4b48      	ldr	r3, [pc, #288]	; (80004b0 <fsm_automatic+0x258>)
 8000390:	2201      	movs	r2, #1
 8000392:	701a      	strb	r2, [r3, #0]
			break;
 8000394:	e166      	b.n	8000664 <fsm_automatic+0x40c>
		case NORMAL:
			if(is_button_pressed(0))buttonFlag[0]=1;
 8000396:	2000      	movs	r0, #0
 8000398:	f000 fb96 	bl	8000ac8 <is_button_pressed>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d002      	beq.n	80003a8 <fsm_automatic+0x150>
 80003a2:	4b4f      	ldr	r3, [pc, #316]	; (80004e0 <fsm_automatic+0x288>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 fb8d 	bl	8000ac8 <is_button_pressed>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f040 8150 	bne.w	8000656 <fsm_automatic+0x3fe>
 80003b6:	4b4a      	ldr	r3, [pc, #296]	; (80004e0 <fsm_automatic+0x288>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f000 814b 	beq.w	8000656 <fsm_automatic+0x3fe>
				mode=MOD_RED;
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <fsm_automatic+0x258>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	701a      	strb	r2, [r3, #0]
				traff1Out=6;
 80003c6:	4b47      	ldr	r3, [pc, #284]	; (80004e4 <fsm_automatic+0x28c>)
 80003c8:	2206      	movs	r2, #6
 80003ca:	701a      	strb	r2, [r3, #0]
				traff2Out=6;
 80003cc:	4b46      	ldr	r3, [pc, #280]	; (80004e8 <fsm_automatic+0x290>)
 80003ce:	2206      	movs	r2, #6
 80003d0:	701a      	strb	r2, [r3, #0]
				buttonFlag[0]=0;
 80003d2:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <fsm_automatic+0x288>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
				buttonFlag[1]=0;
 80003d8:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <fsm_automatic+0x288>)
 80003da:	2200      	movs	r2, #0
 80003dc:	705a      	strb	r2, [r3, #1]
				buttonFlag[2]=0;
 80003de:	4b40      	ldr	r3, [pc, #256]	; (80004e0 <fsm_automatic+0x288>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	709a      	strb	r2, [r3, #2]
			}
			break;
 80003e4:	e137      	b.n	8000656 <fsm_automatic+0x3fe>
		case MOD_RED:
			if(is_button_pressed(0))buttonFlag[0]=1;
 80003e6:	2000      	movs	r0, #0
 80003e8:	f000 fb6e 	bl	8000ac8 <is_button_pressed>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d002      	beq.n	80003f8 <fsm_automatic+0x1a0>
 80003f2:	4b3b      	ldr	r3, [pc, #236]	; (80004e0 <fsm_automatic+0x288>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 fb65 	bl	8000ac8 <is_button_pressed>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d115      	bne.n	8000430 <fsm_automatic+0x1d8>
 8000404:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <fsm_automatic+0x288>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d011      	beq.n	8000430 <fsm_automatic+0x1d8>
				mode=MOD_YELLOW;
 800040c:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <fsm_automatic+0x258>)
 800040e:	2203      	movs	r2, #3
 8000410:	701a      	strb	r2, [r3, #0]
				traff1Out=3;
 8000412:	4b34      	ldr	r3, [pc, #208]	; (80004e4 <fsm_automatic+0x28c>)
 8000414:	2203      	movs	r2, #3
 8000416:	701a      	strb	r2, [r3, #0]
				traff2Out=3;
 8000418:	4b33      	ldr	r3, [pc, #204]	; (80004e8 <fsm_automatic+0x290>)
 800041a:	2203      	movs	r2, #3
 800041c:	701a      	strb	r2, [r3, #0]
				buttonFlag[0]=0;
 800041e:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <fsm_automatic+0x288>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
				buttonFlag[1]=0;
 8000424:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <fsm_automatic+0x288>)
 8000426:	2200      	movs	r2, #0
 8000428:	705a      	strb	r2, [r3, #1]
				buttonFlag[2]=0;
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <fsm_automatic+0x288>)
 800042c:	2200      	movs	r2, #0
 800042e:	709a      	strb	r2, [r3, #2]
			}
			if(is_button_pressed(1))buttonFlag[1]=1;
 8000430:	2001      	movs	r0, #1
 8000432:	f000 fb49 	bl	8000ac8 <is_button_pressed>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <fsm_automatic+0x1ea>
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <fsm_automatic+0x288>)
 800043e:	2201      	movs	r2, #1
 8000440:	705a      	strb	r2, [r3, #1]
			if((!is_button_pressed(1)) && (buttonFlag[1])){
 8000442:	2001      	movs	r0, #1
 8000444:	f000 fb40 	bl	8000ac8 <is_button_pressed>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d112      	bne.n	8000474 <fsm_automatic+0x21c>
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <fsm_automatic+0x288>)
 8000450:	785b      	ldrb	r3, [r3, #1]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d00e      	beq.n	8000474 <fsm_automatic+0x21c>
				durationRedWaiting = durationRedWaiting >= 99 ? 1 : durationRedWaiting + 1;
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <fsm_automatic+0x260>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b62      	cmp	r3, #98	; 0x62
 800045c:	d804      	bhi.n	8000468 <fsm_automatic+0x210>
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <fsm_automatic+0x260>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	b2db      	uxtb	r3, r3
 8000466:	e000      	b.n	800046a <fsm_automatic+0x212>
 8000468:	2301      	movs	r3, #1
 800046a:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <fsm_automatic+0x260>)
 800046c:	7013      	strb	r3, [r2, #0]
				buttonFlag[1]=0;
 800046e:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <fsm_automatic+0x288>)
 8000470:	2200      	movs	r2, #0
 8000472:	705a      	strb	r2, [r3, #1]
			}
			if(is_button_pressed(2))buttonFlag[2]=1;
 8000474:	2002      	movs	r0, #2
 8000476:	f000 fb27 	bl	8000ac8 <is_button_pressed>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <fsm_automatic+0x22e>
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <fsm_automatic+0x288>)
 8000482:	2201      	movs	r2, #1
 8000484:	709a      	strb	r2, [r3, #2]
			if((!is_button_pressed(2)) && (buttonFlag[2])){
 8000486:	2002      	movs	r0, #2
 8000488:	f000 fb1e 	bl	8000ac8 <is_button_pressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	f040 80e3 	bne.w	800065a <fsm_automatic+0x402>
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <fsm_automatic+0x288>)
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	2b00      	cmp	r3, #0
 800049a:	f000 80de 	beq.w	800065a <fsm_automatic+0x402>
				durationRed = durationRedWaiting;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <fsm_automatic+0x260>)
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <fsm_automatic+0x25c>)
 80004a4:	701a      	strb	r2, [r3, #0]
				buttonFlag[2]=0;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <fsm_automatic+0x288>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	709a      	strb	r2, [r3, #2]
			}
			break;
 80004ac:	e0d5      	b.n	800065a <fsm_automatic+0x402>
 80004ae:	bf00      	nop
 80004b0:	200000a2 	.word	0x200000a2
 80004b4:	20000001 	.word	0x20000001
 80004b8:	200000c5 	.word	0x200000c5
 80004bc:	20000002 	.word	0x20000002
 80004c0:	200000b5 	.word	0x200000b5
 80004c4:	20000003 	.word	0x20000003
 80004c8:	200000b4 	.word	0x200000b4
 80004cc:	200000c4 	.word	0x200000c4
 80004d0:	200000c0 	.word	0x200000c0
 80004d4:	200000c1 	.word	0x200000c1
 80004d8:	cccccccd 	.word	0xcccccccd
 80004dc:	200000bc 	.word	0x200000bc
 80004e0:	200000b8 	.word	0x200000b8
 80004e4:	200000c3 	.word	0x200000c3
 80004e8:	200000c2 	.word	0x200000c2
		case MOD_YELLOW:
			if(is_button_pressed(0))buttonFlag[0]=1;
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 faeb 	bl	8000ac8 <is_button_pressed>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <fsm_automatic+0x2a6>
 80004f8:	4b5b      	ldr	r3, [pc, #364]	; (8000668 <fsm_automatic+0x410>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 fae2 	bl	8000ac8 <is_button_pressed>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d115      	bne.n	8000536 <fsm_automatic+0x2de>
 800050a:	4b57      	ldr	r3, [pc, #348]	; (8000668 <fsm_automatic+0x410>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d011      	beq.n	8000536 <fsm_automatic+0x2de>
				mode=MOD_GREEN;
 8000512:	4b56      	ldr	r3, [pc, #344]	; (800066c <fsm_automatic+0x414>)
 8000514:	2204      	movs	r2, #4
 8000516:	701a      	strb	r2, [r3, #0]
				traff1Out=3;
 8000518:	4b55      	ldr	r3, [pc, #340]	; (8000670 <fsm_automatic+0x418>)
 800051a:	2203      	movs	r2, #3
 800051c:	701a      	strb	r2, [r3, #0]
				traff2Out=3;
 800051e:	4b55      	ldr	r3, [pc, #340]	; (8000674 <fsm_automatic+0x41c>)
 8000520:	2203      	movs	r2, #3
 8000522:	701a      	strb	r2, [r3, #0]
				buttonFlag[0]=0;
 8000524:	4b50      	ldr	r3, [pc, #320]	; (8000668 <fsm_automatic+0x410>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
				buttonFlag[1]=0;
 800052a:	4b4f      	ldr	r3, [pc, #316]	; (8000668 <fsm_automatic+0x410>)
 800052c:	2200      	movs	r2, #0
 800052e:	705a      	strb	r2, [r3, #1]
				buttonFlag[2]=0;
 8000530:	4b4d      	ldr	r3, [pc, #308]	; (8000668 <fsm_automatic+0x410>)
 8000532:	2200      	movs	r2, #0
 8000534:	709a      	strb	r2, [r3, #2]
			}
			if(is_button_pressed(1))buttonFlag[1]=1;
 8000536:	2001      	movs	r0, #1
 8000538:	f000 fac6 	bl	8000ac8 <is_button_pressed>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <fsm_automatic+0x2f0>
 8000542:	4b49      	ldr	r3, [pc, #292]	; (8000668 <fsm_automatic+0x410>)
 8000544:	2201      	movs	r2, #1
 8000546:	705a      	strb	r2, [r3, #1]
			if((!is_button_pressed(1)) && (buttonFlag[1])){
 8000548:	2001      	movs	r0, #1
 800054a:	f000 fabd 	bl	8000ac8 <is_button_pressed>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d112      	bne.n	800057a <fsm_automatic+0x322>
 8000554:	4b44      	ldr	r3, [pc, #272]	; (8000668 <fsm_automatic+0x410>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00e      	beq.n	800057a <fsm_automatic+0x322>
				durationYellowWaiting = durationYellowWaiting >= 99 ? 1 : durationYellowWaiting + 1;
 800055c:	4b46      	ldr	r3, [pc, #280]	; (8000678 <fsm_automatic+0x420>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b62      	cmp	r3, #98	; 0x62
 8000562:	d804      	bhi.n	800056e <fsm_automatic+0x316>
 8000564:	4b44      	ldr	r3, [pc, #272]	; (8000678 <fsm_automatic+0x420>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2db      	uxtb	r3, r3
 800056c:	e000      	b.n	8000570 <fsm_automatic+0x318>
 800056e:	2301      	movs	r3, #1
 8000570:	4a41      	ldr	r2, [pc, #260]	; (8000678 <fsm_automatic+0x420>)
 8000572:	7013      	strb	r3, [r2, #0]
				buttonFlag[1]=0;
 8000574:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <fsm_automatic+0x410>)
 8000576:	2200      	movs	r2, #0
 8000578:	705a      	strb	r2, [r3, #1]
			}
			if(is_button_pressed(2))buttonFlag[2]=1;
 800057a:	2002      	movs	r0, #2
 800057c:	f000 faa4 	bl	8000ac8 <is_button_pressed>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <fsm_automatic+0x334>
 8000586:	4b38      	ldr	r3, [pc, #224]	; (8000668 <fsm_automatic+0x410>)
 8000588:	2201      	movs	r2, #1
 800058a:	709a      	strb	r2, [r3, #2]
			if((!is_button_pressed(2)) && (buttonFlag[2])){
 800058c:	2002      	movs	r0, #2
 800058e:	f000 fa9b 	bl	8000ac8 <is_button_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d162      	bne.n	800065e <fsm_automatic+0x406>
 8000598:	4b33      	ldr	r3, [pc, #204]	; (8000668 <fsm_automatic+0x410>)
 800059a:	789b      	ldrb	r3, [r3, #2]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d05e      	beq.n	800065e <fsm_automatic+0x406>
				durationYellow = durationYellowWaiting;
 80005a0:	4b35      	ldr	r3, [pc, #212]	; (8000678 <fsm_automatic+0x420>)
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	4b35      	ldr	r3, [pc, #212]	; (800067c <fsm_automatic+0x424>)
 80005a6:	701a      	strb	r2, [r3, #0]
				buttonFlag[2]=2;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <fsm_automatic+0x410>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	709a      	strb	r2, [r3, #2]
			}
			break;
 80005ae:	e056      	b.n	800065e <fsm_automatic+0x406>
		case MOD_GREEN:
			if(is_button_pressed(0))buttonFlag[0]=1;
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fa89 	bl	8000ac8 <is_button_pressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <fsm_automatic+0x36a>
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <fsm_automatic+0x410>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fa80 	bl	8000ac8 <is_button_pressed>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <fsm_automatic+0x384>
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <fsm_automatic+0x410>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <fsm_automatic+0x384>
				mode=INIT;
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <fsm_automatic+0x414>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
			}
			if(is_button_pressed(1))buttonFlag[1]=1;
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fa73 	bl	8000ac8 <is_button_pressed>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <fsm_automatic+0x396>
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <fsm_automatic+0x410>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	705a      	strb	r2, [r3, #1]
			if((!is_button_pressed(1)) && (buttonFlag[1])){
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fa6a 	bl	8000ac8 <is_button_pressed>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d112      	bne.n	8000620 <fsm_automatic+0x3c8>
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <fsm_automatic+0x410>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00e      	beq.n	8000620 <fsm_automatic+0x3c8>
				durationGreenWaiting = durationGreenWaiting >= 99 ? 1 : durationGreenWaiting + 1;
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <fsm_automatic+0x428>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b62      	cmp	r3, #98	; 0x62
 8000608:	d804      	bhi.n	8000614 <fsm_automatic+0x3bc>
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <fsm_automatic+0x428>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	e000      	b.n	8000616 <fsm_automatic+0x3be>
 8000614:	2301      	movs	r3, #1
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <fsm_automatic+0x428>)
 8000618:	7013      	strb	r3, [r2, #0]
				buttonFlag[1]=0;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <fsm_automatic+0x410>)
 800061c:	2200      	movs	r2, #0
 800061e:	705a      	strb	r2, [r3, #1]
			}
			if(is_button_pressed(2))buttonFlag[2]=1;
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fa51 	bl	8000ac8 <is_button_pressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <fsm_automatic+0x3da>
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <fsm_automatic+0x410>)
 800062e:	2201      	movs	r2, #1
 8000630:	709a      	strb	r2, [r3, #2]
			if((!is_button_pressed(2)) && (buttonFlag[2])){
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fa48 	bl	8000ac8 <is_button_pressed>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d111      	bne.n	8000662 <fsm_automatic+0x40a>
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <fsm_automatic+0x410>)
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00d      	beq.n	8000662 <fsm_automatic+0x40a>
				durationGreen = durationGreenWaiting;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <fsm_automatic+0x428>)
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <fsm_automatic+0x42c>)
 800064c:	701a      	strb	r2, [r3, #0]
				buttonFlag[2]=0;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <fsm_automatic+0x410>)
 8000650:	2200      	movs	r2, #0
 8000652:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000654:	e005      	b.n	8000662 <fsm_automatic+0x40a>
			break;
 8000656:	bf00      	nop
 8000658:	e004      	b.n	8000664 <fsm_automatic+0x40c>
			break;
 800065a:	bf00      	nop
 800065c:	e002      	b.n	8000664 <fsm_automatic+0x40c>
			break;
 800065e:	bf00      	nop
 8000660:	e000      	b.n	8000664 <fsm_automatic+0x40c>
			break;
 8000662:	bf00      	nop
	}
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000b8 	.word	0x200000b8
 800066c:	200000a2 	.word	0x200000a2
 8000670:	200000c3 	.word	0x200000c3
 8000674:	200000c2 	.word	0x200000c2
 8000678:	200000b5 	.word	0x200000b5
 800067c:	20000002 	.word	0x20000002
 8000680:	200000b4 	.word	0x200000b4
 8000684:	20000003 	.word	0x20000003

08000688 <led_processing>:

//Function for handling LEDs
void led_processing(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	switch(mode){
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <led_processing+0xf4>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d02c      	beq.n	80006ee <led_processing+0x66>
 8000694:	2b04      	cmp	r3, #4
 8000696:	dc3d      	bgt.n	8000714 <led_processing+0x8c>
 8000698:	2b02      	cmp	r3, #2
 800069a:	d002      	beq.n	80006a2 <led_processing+0x1a>
 800069c:	2b03      	cmp	r3, #3
 800069e:	d013      	beq.n	80006c8 <led_processing+0x40>
 80006a0:	e038      	b.n	8000714 <led_processing+0x8c>
		case MOD_RED:
			traff1Out=traff1Out==6?7:6;
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <led_processing+0xf8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d101      	bne.n	80006ae <led_processing+0x26>
 80006aa:	2207      	movs	r2, #7
 80006ac:	e000      	b.n	80006b0 <led_processing+0x28>
 80006ae:	2206      	movs	r2, #6
 80006b0:	4b33      	ldr	r3, [pc, #204]	; (8000780 <led_processing+0xf8>)
 80006b2:	701a      	strb	r2, [r3, #0]
			traff2Out=traff2Out==6?7:6;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <led_processing+0xfc>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d101      	bne.n	80006c0 <led_processing+0x38>
 80006bc:	2207      	movs	r2, #7
 80006be:	e000      	b.n	80006c2 <led_processing+0x3a>
 80006c0:	2206      	movs	r2, #6
 80006c2:	4b30      	ldr	r3, [pc, #192]	; (8000784 <led_processing+0xfc>)
 80006c4:	701a      	strb	r2, [r3, #0]
			break;
 80006c6:	e025      	b.n	8000714 <led_processing+0x8c>
		case MOD_YELLOW:
			traff1Out=traff1Out==5?7:5;
 80006c8:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <led_processing+0xf8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b05      	cmp	r3, #5
 80006ce:	d101      	bne.n	80006d4 <led_processing+0x4c>
 80006d0:	2207      	movs	r2, #7
 80006d2:	e000      	b.n	80006d6 <led_processing+0x4e>
 80006d4:	2205      	movs	r2, #5
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <led_processing+0xf8>)
 80006d8:	701a      	strb	r2, [r3, #0]
			traff2Out=traff2Out==5?7:5;
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <led_processing+0xfc>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b05      	cmp	r3, #5
 80006e0:	d101      	bne.n	80006e6 <led_processing+0x5e>
 80006e2:	2207      	movs	r2, #7
 80006e4:	e000      	b.n	80006e8 <led_processing+0x60>
 80006e6:	2205      	movs	r2, #5
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <led_processing+0xfc>)
 80006ea:	701a      	strb	r2, [r3, #0]
			break;
 80006ec:	e012      	b.n	8000714 <led_processing+0x8c>
		case MOD_GREEN:
			traff1Out=traff1Out==3?7:3;
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <led_processing+0xf8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d101      	bne.n	80006fa <led_processing+0x72>
 80006f6:	2207      	movs	r2, #7
 80006f8:	e000      	b.n	80006fc <led_processing+0x74>
 80006fa:	2203      	movs	r2, #3
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <led_processing+0xf8>)
 80006fe:	701a      	strb	r2, [r3, #0]
			traff2Out=traff2Out==3?7:3;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <led_processing+0xfc>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b03      	cmp	r3, #3
 8000706:	d101      	bne.n	800070c <led_processing+0x84>
 8000708:	2207      	movs	r2, #7
 800070a:	e000      	b.n	800070e <led_processing+0x86>
 800070c:	2203      	movs	r2, #3
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <led_processing+0xfc>)
 8000710:	701a      	strb	r2, [r3, #0]
			break;
 8000712:	bf00      	nop
	}
	if(mode!=NORMAL)return;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <led_processing+0xf4>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d12b      	bne.n	8000774 <led_processing+0xec>
	switch(traffCond){
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <led_processing+0x100>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d828      	bhi.n	8000776 <led_processing+0xee>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <led_processing+0xa4>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800073d 	.word	0x0800073d
 8000730:	0800074b 	.word	0x0800074b
 8000734:	08000759 	.word	0x08000759
 8000738:	08000767 	.word	0x08000767
		case RG:
			traff1Out=6;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <led_processing+0xf8>)
 800073e:	2206      	movs	r2, #6
 8000740:	701a      	strb	r2, [r3, #0]
			traff2Out=3;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <led_processing+0xfc>)
 8000744:	2203      	movs	r2, #3
 8000746:	701a      	strb	r2, [r3, #0]
			break;
 8000748:	e015      	b.n	8000776 <led_processing+0xee>
		case RY:
			traff1Out=6;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <led_processing+0xf8>)
 800074c:	2206      	movs	r2, #6
 800074e:	701a      	strb	r2, [r3, #0]
			traff2Out=5;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <led_processing+0xfc>)
 8000752:	2205      	movs	r2, #5
 8000754:	701a      	strb	r2, [r3, #0]
			break;
 8000756:	e00e      	b.n	8000776 <led_processing+0xee>
		case GR:
			traff1Out=3;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <led_processing+0xf8>)
 800075a:	2203      	movs	r2, #3
 800075c:	701a      	strb	r2, [r3, #0]
			traff2Out=6;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <led_processing+0xfc>)
 8000760:	2206      	movs	r2, #6
 8000762:	701a      	strb	r2, [r3, #0]
			break;
 8000764:	e007      	b.n	8000776 <led_processing+0xee>
		case YR:
			traff1Out=5;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <led_processing+0xf8>)
 8000768:	2205      	movs	r2, #5
 800076a:	701a      	strb	r2, [r3, #0]
			traff2Out=6;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <led_processing+0xfc>)
 800076e:	2206      	movs	r2, #6
 8000770:	701a      	strb	r2, [r3, #0]
			break;
 8000772:	e000      	b.n	8000776 <led_processing+0xee>
	if(mode!=NORMAL)return;
 8000774:	bf00      	nop
	}
}
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	200000a2 	.word	0x200000a2
 8000780:	200000c3 	.word	0x200000c3
 8000784:	200000c2 	.word	0x200000c2
 8000788:	200000c1 	.word	0x200000c1

0800078c <buffer_processing>:

//Function for handling 7 segments LED buffer & decreasing the time
void buffer_processing(){
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
	switch(mode){
 8000790:	4b95      	ldr	r3, [pc, #596]	; (80009e8 <buffer_processing+0x25c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d065      	beq.n	8000864 <buffer_processing+0xd8>
 8000798:	2b04      	cmp	r3, #4
 800079a:	f300 8092 	bgt.w	80008c2 <buffer_processing+0x136>
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d002      	beq.n	80007a8 <buffer_processing+0x1c>
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d02f      	beq.n	8000806 <buffer_processing+0x7a>
 80007a6:	e08c      	b.n	80008c2 <buffer_processing+0x136>
		case MOD_RED:
			led_buffer[0]=durationRedWaiting/10;
 80007a8:	4b90      	ldr	r3, [pc, #576]	; (80009ec <buffer_processing+0x260>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4a90      	ldr	r2, [pc, #576]	; (80009f0 <buffer_processing+0x264>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b8f      	ldr	r3, [pc, #572]	; (80009f4 <buffer_processing+0x268>)
 80007b8:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationRedWaiting%10;
 80007ba:	4b8c      	ldr	r3, [pc, #560]	; (80009ec <buffer_processing+0x260>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <buffer_processing+0x264>)
 80007c0:	fba3 1302 	umull	r1, r3, r3, r2
 80007c4:	08d9      	lsrs	r1, r3, #3
 80007c6:	460b      	mov	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b88      	ldr	r3, [pc, #544]	; (80009f4 <buffer_processing+0x268>)
 80007d4:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationRedWaiting/10;
 80007d6:	4b85      	ldr	r3, [pc, #532]	; (80009ec <buffer_processing+0x260>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4a85      	ldr	r2, [pc, #532]	; (80009f0 <buffer_processing+0x264>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b83      	ldr	r3, [pc, #524]	; (80009f4 <buffer_processing+0x268>)
 80007e6:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationRedWaiting%10;
 80007e8:	4b80      	ldr	r3, [pc, #512]	; (80009ec <buffer_processing+0x260>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b80      	ldr	r3, [pc, #512]	; (80009f0 <buffer_processing+0x264>)
 80007ee:	fba3 1302 	umull	r1, r3, r3, r2
 80007f2:	08d9      	lsrs	r1, r3, #3
 80007f4:	460b      	mov	r3, r1
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	440b      	add	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <buffer_processing+0x268>)
 8000802:	70da      	strb	r2, [r3, #3]
			break;
 8000804:	e05d      	b.n	80008c2 <buffer_processing+0x136>
		case MOD_YELLOW:
			led_buffer[0]=durationYellowWaiting/10;
 8000806:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <buffer_processing+0x26c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4a79      	ldr	r2, [pc, #484]	; (80009f0 <buffer_processing+0x264>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b77      	ldr	r3, [pc, #476]	; (80009f4 <buffer_processing+0x268>)
 8000816:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationYellowWaiting%10;
 8000818:	4b77      	ldr	r3, [pc, #476]	; (80009f8 <buffer_processing+0x26c>)
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	4b74      	ldr	r3, [pc, #464]	; (80009f0 <buffer_processing+0x264>)
 800081e:	fba3 1302 	umull	r1, r3, r3, r2
 8000822:	08d9      	lsrs	r1, r3, #3
 8000824:	460b      	mov	r3, r1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b70      	ldr	r3, [pc, #448]	; (80009f4 <buffer_processing+0x268>)
 8000832:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationYellowWaiting/10;
 8000834:	4b70      	ldr	r3, [pc, #448]	; (80009f8 <buffer_processing+0x26c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4a6d      	ldr	r2, [pc, #436]	; (80009f0 <buffer_processing+0x264>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b6c      	ldr	r3, [pc, #432]	; (80009f4 <buffer_processing+0x268>)
 8000844:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationYellowWaiting%10;
 8000846:	4b6c      	ldr	r3, [pc, #432]	; (80009f8 <buffer_processing+0x26c>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <buffer_processing+0x264>)
 800084c:	fba3 1302 	umull	r1, r3, r3, r2
 8000850:	08d9      	lsrs	r1, r3, #3
 8000852:	460b      	mov	r3, r1
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	440b      	add	r3, r1
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b65      	ldr	r3, [pc, #404]	; (80009f4 <buffer_processing+0x268>)
 8000860:	70da      	strb	r2, [r3, #3]
			break;
 8000862:	e02e      	b.n	80008c2 <buffer_processing+0x136>
		case MOD_GREEN:
			led_buffer[0]=durationGreenWaiting/10;
 8000864:	4b65      	ldr	r3, [pc, #404]	; (80009fc <buffer_processing+0x270>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4a61      	ldr	r2, [pc, #388]	; (80009f0 <buffer_processing+0x264>)
 800086a:	fba2 2303 	umull	r2, r3, r2, r3
 800086e:	08db      	lsrs	r3, r3, #3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b60      	ldr	r3, [pc, #384]	; (80009f4 <buffer_processing+0x268>)
 8000874:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationGreenWaiting%10;
 8000876:	4b61      	ldr	r3, [pc, #388]	; (80009fc <buffer_processing+0x270>)
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <buffer_processing+0x264>)
 800087c:	fba3 1302 	umull	r1, r3, r3, r2
 8000880:	08d9      	lsrs	r1, r3, #3
 8000882:	460b      	mov	r3, r1
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <buffer_processing+0x268>)
 8000890:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationGreenWaiting/10;
 8000892:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <buffer_processing+0x270>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4a56      	ldr	r2, [pc, #344]	; (80009f0 <buffer_processing+0x264>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b54      	ldr	r3, [pc, #336]	; (80009f4 <buffer_processing+0x268>)
 80008a2:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationGreenWaiting%10;
 80008a4:	4b55      	ldr	r3, [pc, #340]	; (80009fc <buffer_processing+0x270>)
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	4b51      	ldr	r3, [pc, #324]	; (80009f0 <buffer_processing+0x264>)
 80008aa:	fba3 1302 	umull	r1, r3, r3, r2
 80008ae:	08d9      	lsrs	r1, r3, #3
 80008b0:	460b      	mov	r3, r1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <buffer_processing+0x268>)
 80008be:	70da      	strb	r2, [r3, #3]
			break;
 80008c0:	bf00      	nop
	}
	if(mode!=NORMAL)return;
 80008c2:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <buffer_processing+0x25c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f040 808a 	bne.w	80009e0 <buffer_processing+0x254>
	light1Time--;
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <buffer_processing+0x274>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <buffer_processing+0x274>)
 80008d6:	701a      	strb	r2, [r3, #0]
	light2Time--;
 80008d8:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <buffer_processing+0x278>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <buffer_processing+0x278>)
 80008e2:	701a      	strb	r2, [r3, #0]
	switch(traffCond){
 80008e4:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <buffer_processing+0x27c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d84a      	bhi.n	8000982 <buffer_processing+0x1f6>
 80008ec:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <buffer_processing+0x168>)
 80008ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f2:	bf00      	nop
 80008f4:	08000905 	.word	0x08000905
 80008f8:	0800091d 	.word	0x0800091d
 80008fc:	0800093d 	.word	0x0800093d
 8000900:	08000955 	.word	0x08000955
		case RG:
			if(light2Time<=0){
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <buffer_processing+0x278>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d133      	bne.n	8000974 <buffer_processing+0x1e8>
				traffCond=RY;
 800090c:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <buffer_processing+0x27c>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
				light2Time=durationYellow;
 8000912:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <buffer_processing+0x280>)
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <buffer_processing+0x278>)
 8000918:	701a      	strb	r2, [r3, #0]
			}
			break;
 800091a:	e02b      	b.n	8000974 <buffer_processing+0x1e8>
		case RY:
			if(light1Time<=0){
 800091c:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <buffer_processing+0x274>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d129      	bne.n	8000978 <buffer_processing+0x1ec>
				traffCond=GR;
 8000924:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <buffer_processing+0x27c>)
 8000926:	2202      	movs	r2, #2
 8000928:	701a      	strb	r2, [r3, #0]
				light1Time=durationGreen;
 800092a:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <buffer_processing+0x284>)
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <buffer_processing+0x274>)
 8000930:	701a      	strb	r2, [r3, #0]
				light2Time=durationRed;
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <buffer_processing+0x288>)
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	4b33      	ldr	r3, [pc, #204]	; (8000a04 <buffer_processing+0x278>)
 8000938:	701a      	strb	r2, [r3, #0]
			}
			break;
 800093a:	e01d      	b.n	8000978 <buffer_processing+0x1ec>
		case GR:
			if(light1Time<=0){
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <buffer_processing+0x274>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d11b      	bne.n	800097c <buffer_processing+0x1f0>
				traffCond=YR;
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <buffer_processing+0x27c>)
 8000946:	2203      	movs	r2, #3
 8000948:	701a      	strb	r2, [r3, #0]
				light1Time=durationYellow;
 800094a:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <buffer_processing+0x280>)
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <buffer_processing+0x274>)
 8000950:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000952:	e013      	b.n	800097c <buffer_processing+0x1f0>
		case YR:
			if(light2Time<=0){
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <buffer_processing+0x278>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d111      	bne.n	8000980 <buffer_processing+0x1f4>
				traffCond=RG;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <buffer_processing+0x27c>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
				light1Time=durationRed;
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <buffer_processing+0x288>)
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <buffer_processing+0x274>)
 8000968:	701a      	strb	r2, [r3, #0]
				light2Time=durationGreen;
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <buffer_processing+0x284>)
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <buffer_processing+0x278>)
 8000970:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000972:	e005      	b.n	8000980 <buffer_processing+0x1f4>
			break;
 8000974:	bf00      	nop
 8000976:	e004      	b.n	8000982 <buffer_processing+0x1f6>
			break;
 8000978:	bf00      	nop
 800097a:	e002      	b.n	8000982 <buffer_processing+0x1f6>
			break;
 800097c:	bf00      	nop
 800097e:	e000      	b.n	8000982 <buffer_processing+0x1f6>
			break;
 8000980:	bf00      	nop
	}
	led_buffer[0]=light1Time/10;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <buffer_processing+0x274>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <buffer_processing+0x264>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <buffer_processing+0x268>)
 8000992:	701a      	strb	r2, [r3, #0]
	led_buffer[1]=light1Time%10;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <buffer_processing+0x274>)
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <buffer_processing+0x264>)
 800099a:	fba3 1302 	umull	r1, r3, r3, r2
 800099e:	08d9      	lsrs	r1, r3, #3
 80009a0:	460b      	mov	r3, r1
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <buffer_processing+0x268>)
 80009ae:	705a      	strb	r2, [r3, #1]
	led_buffer[2]=light2Time/10;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <buffer_processing+0x278>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <buffer_processing+0x264>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <buffer_processing+0x268>)
 80009c0:	709a      	strb	r2, [r3, #2]
	led_buffer[3]=light2Time%10;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <buffer_processing+0x278>)
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <buffer_processing+0x264>)
 80009c8:	fba3 1302 	umull	r1, r3, r3, r2
 80009cc:	08d9      	lsrs	r1, r3, #3
 80009ce:	460b      	mov	r3, r1
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	440b      	add	r3, r1
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <buffer_processing+0x268>)
 80009dc:	70da      	strb	r2, [r3, #3]
 80009de:	e000      	b.n	80009e2 <buffer_processing+0x256>
	if(mode!=NORMAL)return;
 80009e0:	bf00      	nop
}
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	200000a2 	.word	0x200000a2
 80009ec:	200000c5 	.word	0x200000c5
 80009f0:	cccccccd 	.word	0xcccccccd
 80009f4:	200000bc 	.word	0x200000bc
 80009f8:	200000b5 	.word	0x200000b5
 80009fc:	200000b4 	.word	0x200000b4
 8000a00:	200000c4 	.word	0x200000c4
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	200000c1 	.word	0x200000c1
 8000a0c:	20000002 	.word	0x20000002
 8000a10:	20000003 	.word	0x20000003
 8000a14:	20000001 	.word	0x20000001

08000a18 <button_reading>:
GPIO_PinState debounceButtonBuffer1[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};
GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};
GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};
GPIO_PinState debounceButtonBuffer4[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};

void button_reading(){
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
 8000a22:	e03f      	b.n	8000aa4 <button_reading+0x8c>
		debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4922      	ldr	r1, [pc, #136]	; (8000ab4 <button_reading+0x9c>)
 8000a2a:	5c89      	ldrb	r1, [r1, r2]
 8000a2c:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <button_reading+0xa0>)
 8000a2e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4921      	ldr	r1, [pc, #132]	; (8000abc <button_reading+0xa4>)
 8000a36:	5c89      	ldrb	r1, [r1, r2]
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <button_reading+0x9c>)
 8000a3a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	491f      	ldr	r1, [pc, #124]	; (8000ac0 <button_reading+0xa8>)
 8000a42:	5c89      	ldrb	r1, [r1, r2]
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <button_reading+0xa4>)
 8000a46:	54d1      	strb	r1, [r2, r3]
		switch(i){
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d01c      	beq.n	8000a88 <button_reading+0x70>
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	dc25      	bgt.n	8000a9e <button_reading+0x86>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <button_reading+0x44>
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d00b      	beq.n	8000a72 <button_reading+0x5a>
 8000a5a:	e020      	b.n	8000a9e <button_reading+0x86>
			case 0:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin);
 8000a5c:	79fc      	ldrb	r4, [r7, #7]
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <button_reading+0xac>)
 8000a64:	f001 f804 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <button_reading+0xa8>)
 8000a6e:	551a      	strb	r2, [r3, r4]
				break;
 8000a70:	e015      	b.n	8000a9e <button_reading+0x86>
			case 1:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 8000a72:	79fc      	ldrb	r4, [r7, #7]
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <button_reading+0xac>)
 8000a7a:	f000 fff9 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <button_reading+0xa8>)
 8000a84:	551a      	strb	r2, [r3, r4]
				break;
 8000a86:	e00a      	b.n	8000a9e <button_reading+0x86>
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 8000a88:	79fc      	ldrb	r4, [r7, #7]
 8000a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <button_reading+0xac>)
 8000a90:	f000 ffee 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <button_reading+0xa8>)
 8000a9a:	551a      	strb	r2, [r3, r4]
				break;
 8000a9c:	bf00      	nop
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d9bc      	bls.n	8000a24 <button_reading+0xc>
		}
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	20000010 	.word	0x20000010
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <is_button_pressed>:

uint8_t is_button_pressed(uint8_t index){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d901      	bls.n	8000adc <is_button_pressed+0x14>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e007      	b.n	8000aec <is_button_pressed+0x24>
	return (debounceButtonBuffer4[index]==BUTTON_IS_PRESSED);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <is_button_pressed+0x30>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2301      	moveq	r3, #1
 8000ae8:	2300      	movne	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000010 	.word	0x20000010

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fc1c 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f83a 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000b08:	f000 f874 	bl	8000bf4 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000b0c:	f000 f8e8 	bl	8000ce0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b10:	f000 f8bc 	bl	8000c8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <main+0x64>)
 8000b16:	f001 fc45 	bl	80023a4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(button_reading, 21, 10);
 8000b1a:	220a      	movs	r2, #10
 8000b1c:	2115      	movs	r1, #21
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <main+0x68>)
 8000b20:	f000 f9e2 	bl	8000ee8 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 31, MAIN_MODE_PERIOD);
 8000b24:	2232      	movs	r2, #50	; 0x32
 8000b26:	211f      	movs	r1, #31
 8000b28:	480f      	ldr	r0, [pc, #60]	; (8000b68 <main+0x6c>)
 8000b2a:	f000 f9dd 	bl	8000ee8 <SCH_Add_Task>
  SCH_Add_Task(buffer_processing, 51, 1000);
 8000b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b32:	2133      	movs	r1, #51	; 0x33
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <main+0x70>)
 8000b36:	f000 f9d7 	bl	8000ee8 <SCH_Add_Task>
  SCH_Add_Task(led_processing, 71, 250);
 8000b3a:	22fa      	movs	r2, #250	; 0xfa
 8000b3c:	2147      	movs	r1, #71	; 0x47
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <main+0x74>)
 8000b40:	f000 f9d2 	bl	8000ee8 <SCH_Add_Task>
  SCH_Add_Task(update7SegMain, 111, 250);
 8000b44:	22fa      	movs	r2, #250	; 0xfa
 8000b46:	216f      	movs	r1, #111	; 0x6f
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <main+0x78>)
 8000b4a:	f000 f9cd 	bl	8000ee8 <SCH_Add_Task>
  SCH_Add_Task(displayAll, 131, 10);
 8000b4e:	220a      	movs	r2, #10
 8000b50:	2183      	movs	r1, #131	; 0x83
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <main+0x7c>)
 8000b54:	f000 f9c8 	bl	8000ee8 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000b58:	f000 fa1e 	bl	8000f98 <SCH_Dispatch_Tasks>
 8000b5c:	e7fc      	b.n	8000b58 <main+0x5c>
 8000b5e:	bf00      	nop
 8000b60:	200000c8 	.word	0x200000c8
 8000b64:	08000a19 	.word	0x08000a19
 8000b68:	08000259 	.word	0x08000259
 8000b6c:	0800078d 	.word	0x0800078d
 8000b70:	08000689 	.word	0x08000689
 8000b74:	080001e1 	.word	0x080001e1
 8000b78:	08000211 	.word	0x08000211

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b090      	sub	sp, #64	; 0x40
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	2228      	movs	r2, #40	; 0x28
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fca0 	bl	80034d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 ff8c 	bl	8001ad0 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bbe:	f000 f91d 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f9f8 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000be6:	f000 f909 	bl	8000dfc <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3740      	adds	r7, #64	; 0x40
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c1a:	f240 321f 	movw	r2, #799	; 0x31f
 8000c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c28:	2263      	movs	r2, #99	; 0x63
 8000c2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c3a:	f001 fb63 	bl	8002304 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c44:	f000 f8da 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c56:	f001 fcf9 	bl	800264c <HAL_TIM_ConfigClockSource>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c60:	f000 f8cc 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_TIM2_Init+0x94>)
 8000c72:	f001 fec1 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 f8be 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000c8 	.word	0x200000c8

08000c8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <MX_USART2_UART_Init+0x50>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000c98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	f001 ff02 	bl	8002acc <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cce:	f000 f895 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000110 	.word	0x20000110
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_GPIO_Init+0xbc>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED0_Pin
 8000d24:	2200      	movs	r2, #0
 8000d26:	f247 0170 	movw	r1, #28784	; 0x7070
 8000d2a:	481d      	ldr	r0, [pc, #116]	; (8000da0 <MX_GPIO_Init+0xc0>)
 8000d2c:	f000 feb7 	bl	8001a9e <HAL_GPIO_WritePin>
                          |YELLOW0_Pin|GREEN0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG00_Pin|SEG01_Pin|SEG02_Pin|EN2_Pin
 8000d30:	2200      	movs	r2, #0
 8000d32:	f640 717f 	movw	r1, #3967	; 0xf7f
 8000d36:	481b      	ldr	r0, [pc, #108]	; (8000da4 <MX_GPIO_Init+0xc4>)
 8000d38:	f000 feb1 	bl	8001a9e <HAL_GPIO_WritePin>
                          |EN3_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED0_Pin
                           YELLOW0_Pin GREEN0_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED0_Pin
 8000d3c:	f247 0370 	movw	r3, #28784	; 0x7070
 8000d40:	60bb      	str	r3, [r7, #8]
                          |YELLOW0_Pin|GREEN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	4812      	ldr	r0, [pc, #72]	; (8000da0 <MX_GPIO_Init+0xc0>)
 8000d56:	f000 fd11 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG00_Pin SEG01_Pin SEG02_Pin EN2_Pin
                           EN3_Pin SEG03_Pin SEG04_Pin SEG05_Pin
                           SEG06_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = SEG00_Pin|SEG01_Pin|SEG02_Pin|EN2_Pin
 8000d5a:	f640 737f 	movw	r3, #3967	; 0xf7f
 8000d5e:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	4619      	mov	r1, r3
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_GPIO_Init+0xc4>)
 8000d74:	f000 fd02 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin;
 8000d78:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_GPIO_Init+0xc0>)
 8000d8e:	f000 fcf5 	bl	800177c <HAL_GPIO_Init>

}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010800 	.word	0x40010800
 8000da4:	40010c00 	.word	0x40010c00

08000da8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000db0:	f000 f82a 	bl	8000e08 <SCH_Update>
	uint32_t currentTick = HAL_GetTick();
 8000db4:	f000 fb1a 	bl	80013ec <HAL_GetTick>
 8000db8:	60f8      	str	r0, [r7, #12]
    uint32_t elapsed = currentTick - triggerCallback;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	60bb      	str	r3, [r7, #8]
    triggerCallback = currentTick;
 8000dc4:	4a09      	ldr	r2, [pc, #36]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "%d\r\n", elapsed), 50);
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	4908      	ldr	r1, [pc, #32]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dce:	4809      	ldr	r0, [pc, #36]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dd0:	f002 fb86 	bl	80034e0 <siprintf>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	2332      	movs	r3, #50	; 0x32
 8000dda:	4906      	ldr	r1, [pc, #24]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dde:	f001 fec2 	bl	8002b66 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "%d\r\n", HAL_GetTick()), 50);
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000a4 	.word	0x200000a4
 8000df0:	08003d6c 	.word	0x08003d6c
 8000df4:	20000154 	.word	0x20000154
 8000df8:	20000110 	.word	0x20000110

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <SCH_Update>:
    //Error_code_G = 0;
    //Timer_init();
    //Watchdog_init();
}

void SCH_Update(void){
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
    unsigned char Index;
    // NOTE: calculations are in *TICKS* (not milliseconds)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	e05d      	b.n	8000ed0 <SCH_Update+0xc8>
        // Check if there is a task at this location
        if (SCH_tasks_G[Index].pTask){
 8000e14:	79fa      	ldrb	r2, [r7, #7]
 8000e16:	4933      	ldr	r1, [pc, #204]	; (8000ee4 <SCH_Update+0xdc>)
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	440b      	add	r3, r1
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d050      	beq.n	8000eca <SCH_Update+0xc2>
            if (SCH_tasks_G[Index].Delay == 0) {
 8000e28:	79fa      	ldrb	r2, [r7, #7]
 8000e2a:	492e      	ldr	r1, [pc, #184]	; (8000ee4 <SCH_Update+0xdc>)
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	440b      	add	r3, r1
 8000e36:	3304      	adds	r3, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d132      	bne.n	8000ea4 <SCH_Update+0x9c>
                // The task is due to run
                // Inc. the 'RunMe' flag
                SCH_tasks_G[Index].RunMe += 1;
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	4928      	ldr	r1, [pc, #160]	; (8000ee4 <SCH_Update+0xdc>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	330c      	adds	r3, #12
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2d8      	uxtb	r0, r3
 8000e56:	4923      	ldr	r1, [pc, #140]	; (8000ee4 <SCH_Update+0xdc>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	330c      	adds	r3, #12
 8000e64:	4602      	mov	r2, r0
 8000e66:	701a      	strb	r2, [r3, #0]
                if (SCH_tasks_G[Index].Period) {
 8000e68:	79fa      	ldrb	r2, [r7, #7]
 8000e6a:	491e      	ldr	r1, [pc, #120]	; (8000ee4 <SCH_Update+0xdc>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	3308      	adds	r3, #8
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d025      	beq.n	8000eca <SCH_Update+0xc2>
                    // Schedule periodic tasks to run again
                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000e7e:	79f9      	ldrb	r1, [r7, #7]
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <SCH_Update+0xdc>)
 8000e84:	460b      	mov	r3, r1
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4403      	add	r3, r0
 8000e8e:	3308      	adds	r3, #8
 8000e90:	6819      	ldr	r1, [r3, #0]
 8000e92:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <SCH_Update+0xdc>)
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4403      	add	r3, r0
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	6019      	str	r1, [r3, #0]
 8000ea2:	e012      	b.n	8000eca <SCH_Update+0xc2>
                }
            } else {
                // Not yet ready to run: just decrement the delay
                SCH_tasks_G[Index].Delay -= 1;
 8000ea4:	79fa      	ldrb	r2, [r7, #7]
 8000ea6:	490f      	ldr	r1, [pc, #60]	; (8000ee4 <SCH_Update+0xdc>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	1e59      	subs	r1, r3, #1
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <SCH_Update+0xdc>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4403      	add	r3, r0
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	6019      	str	r1, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b27      	cmp	r3, #39	; 0x27
 8000ed4:	d99e      	bls.n	8000e14 <SCH_Update+0xc>
            }
        }
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000017c 	.word	0x2000017c

08000ee8 <SCH_Add_Task>:
/*------------------------------------------------------------------*-
SCH_Add_Task() Causes a task (function) to be executed at regular intervals
or after a user-defined delay
-*------------------------------------------------------------------*/
unsigned char SCH_Add_Task(void (* pFunction)(), unsigned int DELAY, unsigned int PERIOD)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
    unsigned char Index = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	75fb      	strb	r3, [r7, #23]
    // First find a gap in the array (if there is one)
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8000ef8:	e002      	b.n	8000f00 <SCH_Add_Task+0x18>
    {
       Index++;
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	3301      	adds	r3, #1
 8000efe:	75fb      	strb	r3, [r7, #23]
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8000f00:	7dfa      	ldrb	r2, [r7, #23]
 8000f02:	4923      	ldr	r1, [pc, #140]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <SCH_Add_Task+0x32>
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	2b27      	cmp	r3, #39	; 0x27
 8000f18:	d9ef      	bls.n	8000efa <SCH_Add_Task+0x12>
    }
    // Have we reached the end of the list?
    if (Index == SCH_MAX_TASKS)
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	2b28      	cmp	r3, #40	; 0x28
 8000f1e:	d101      	bne.n	8000f24 <SCH_Add_Task+0x3c>
    {
        // Task list is full
        // Set the global error variable
        //Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
        // Also return an error code
        return SCH_MAX_TASKS;
 8000f20:	2328      	movs	r3, #40	; 0x28
 8000f22:	e02f      	b.n	8000f84 <SCH_Add_Task+0x9c>
    }
    // If we're here, there is a space in the task array
    SCH_tasks_G[Index].pTask = pFunction;
 8000f24:	7dfa      	ldrb	r2, [r7, #23]
 8000f26:	491a      	ldr	r1, [pc, #104]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Delay = DELAY/TIMER_INTERRUPT_PERIOD;
 8000f36:	7dfa      	ldrb	r2, [r7, #23]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4916      	ldr	r1, [pc, #88]	; (8000f94 <SCH_Add_Task+0xac>)
 8000f3c:	fba1 1303 	umull	r1, r3, r1, r3
 8000f40:	08d9      	lsrs	r1, r3, #3
 8000f42:	4813      	ldr	r0, [pc, #76]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4403      	add	r3, r0
 8000f4e:	3304      	adds	r3, #4
 8000f50:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[Index].Period = PERIOD/TIMER_INTERRUPT_PERIOD;
 8000f52:	7dfa      	ldrb	r2, [r7, #23]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	490f      	ldr	r1, [pc, #60]	; (8000f94 <SCH_Add_Task+0xac>)
 8000f58:	fba1 1303 	umull	r1, r3, r1, r3
 8000f5c:	08d9      	lsrs	r1, r3, #3
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4403      	add	r3, r0
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[Index].RunMe = 0;
 8000f6e:	7dfa      	ldrb	r2, [r7, #23]
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	330c      	adds	r3, #12
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
    // return position of task (to allow later deletion)
    return Index;
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000017c 	.word	0x2000017c
 8000f94:	cccccccd 	.word	0xcccccccd

08000f98 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
    unsigned char Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	e03a      	b.n	800101a <SCH_Dispatch_Tasks+0x82>
        if (SCH_tasks_G[Index].RunMe > 0) {
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	4921      	ldr	r1, [pc, #132]	; (800102c <SCH_Dispatch_Tasks+0x94>)
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	330c      	adds	r3, #12
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d02c      	beq.n	8001014 <SCH_Dispatch_Tasks+0x7c>
            (*SCH_tasks_G[Index].pTask)(); // Run the task
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	491b      	ldr	r1, [pc, #108]	; (800102c <SCH_Dispatch_Tasks+0x94>)
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4798      	blx	r3
            SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	4917      	ldr	r1, [pc, #92]	; (800102c <SCH_Dispatch_Tasks+0x94>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	330c      	adds	r3, #12
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	b2d8      	uxtb	r0, r3
 8000fe4:	4911      	ldr	r1, [pc, #68]	; (800102c <SCH_Dispatch_Tasks+0x94>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	330c      	adds	r3, #12
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	701a      	strb	r2, [r3, #0]
            // Periodic tasks will automatically run again
            // - if this is a 'one shot' task, remove it from the array
            if (SCH_tasks_G[Index].Period == 0)
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <SCH_Dispatch_Tasks+0x94>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	3308      	adds	r3, #8
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d103      	bne.n	8001014 <SCH_Dispatch_Tasks+0x7c>
            {
                SCH_Delete_Task(Index);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f80e 	bl	8001030 <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	3301      	adds	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b27      	cmp	r3, #39	; 0x27
 800101e:	d9c1      	bls.n	8000fa4 <SCH_Dispatch_Tasks+0xc>
        }
    }
    // Report system status
    //SCH_Report_Status();
    // The scheduler enters idle mode at this point
    SCH_Go_To_Sleep();
 8001020:	f000 f840 	bl	80010a4 <SCH_Go_To_Sleep>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000017c 	.word	0x2000017c

08001030 <SCH_Delete_Task>:

/*------------------------------------------------------------------*/
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
    //unsigned char Return_code;
    if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
        // ...also return an error code
        //Return_code = RETURN_ERROR;
    } else {
        //Return_code = RETURN_NORMAL;
    }
    SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	4916      	ldr	r1, [pc, #88]	; (80010a0 <SCH_Delete_Task+0x70>)
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001056:	79fa      	ldrb	r2, [r7, #7]
 8001058:	4911      	ldr	r1, [pc, #68]	; (80010a0 <SCH_Delete_Task+0x70>)
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	3304      	adds	r3, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].Period = 0;
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <SCH_Delete_Task+0x70>)
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	3308      	adds	r3, #8
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].RunMe = 0;
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <SCH_Delete_Task+0x70>)
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	330c      	adds	r3, #12
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
    //return Return_code; // return status
}
 8001092:	bf00      	nop
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2000017c 	.word	0x2000017c

080010a4 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(){
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
    //todo: Optional
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_MspInit+0x5c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <HAL_MspInit+0x5c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6193      	str	r3, [r2, #24]
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_MspInit+0x5c>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_MspInit+0x5c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_MspInit+0x5c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_MspInit+0x5c>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_MspInit+0x60>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_MspInit+0x60>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	40021000 	.word	0x40021000
 8001110:	40010000 	.word	0x40010000

08001114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001124:	d113      	bne.n	800114e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_TIM_Base_MspInit+0x44>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_TIM_Base_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	61d3      	str	r3, [r2, #28]
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_TIM_Base_MspInit+0x44>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	201c      	movs	r0, #28
 8001144:	f000 fa33 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001148:	201c      	movs	r0, #28
 800114a:	f000 fa4c 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <HAL_UART_MspInit+0x98>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d137      	bne.n	80011ec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_UART_MspInit+0x9c>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_UART_MspInit+0x9c>)
 8001182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001186:	61d3      	str	r3, [r2, #28]
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_UART_MspInit+0x9c>)
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_UART_MspInit+0x9c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_UART_MspInit+0x9c>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_UART_MspInit+0x9c>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011ac:	2304      	movs	r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <HAL_UART_MspInit+0xa0>)
 80011c0:	f000 fadc 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c4:	2308      	movs	r3, #8
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <HAL_UART_MspInit+0xa0>)
 80011d8:	f000 fad0 	bl	800177c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2026      	movs	r0, #38	; 0x26
 80011e2:	f000 f9e4 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011e6:	2026      	movs	r0, #38	; 0x26
 80011e8:	f000 f9fd 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40004400 	.word	0x40004400
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <NMI_Handler+0x4>

08001206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <MemManage_Handler+0x4>

08001212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler+0x4>

0800121e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001246:	f000 f8bf 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <TIM2_IRQHandler+0x10>)
 8001256:	f001 f8f1 	bl	800243c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000c8 	.word	0x200000c8

08001264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART2_IRQHandler+0x10>)
 800126a:	f001 fd0f 	bl	8002c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000110 	.word	0x20000110

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f002 f8e8 	bl	800347c <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20002800 	.word	0x20002800
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200000a8 	.word	0x200000a8
 80012e0:	200004b0 	.word	0x200004b0

080012e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f0:	f7ff fff8 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480b      	ldr	r0, [pc, #44]	; (8001324 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012f6:	490c      	ldr	r1, [pc, #48]	; (8001328 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <LoopFillZerobss+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800130c:	4c09      	ldr	r4, [pc, #36]	; (8001334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131a:	f002 f8b5 	bl	8003488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131e:	f7ff fbed 	bl	8000afc <main>
  bx lr
 8001322:	4770      	bx	lr
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800132c:	08003de4 	.word	0x08003de4
  ldr r2, =_sbss
 8001330:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001334:	200004b0 	.word	0x200004b0

08001338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_2_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x28>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x28>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f923 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	200f      	movs	r0, #15
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff feaa 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f93b 	bl	8001602 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 f903 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000014 	.word	0x20000014
 80013c0:	2000001c 	.word	0x2000001c
 80013c4:	20000018 	.word	0x20000018

080013c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_IncTick+0x1c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_IncTick+0x20>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a03      	ldr	r2, [pc, #12]	; (80013e8 <HAL_IncTick+0x20>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	2000001c 	.word	0x2000001c
 80013e8:	2000049c 	.word	0x2000049c

080013ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b02      	ldr	r3, [pc, #8]	; (80013fc <HAL_GetTick+0x10>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	2000049c 	.word	0x2000049c

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4906      	ldr	r1, [pc, #24]	; (8001498 <__NVIC_EnableIRQ+0x34>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff90 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff2d 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff42 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff90 	bl	80014f0 <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5f 	bl	800149c <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff35 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800162c:	2b02      	cmp	r3, #2
 800162e:	d008      	beq.n	8001642 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2204      	movs	r2, #4
 8001634:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e020      	b.n	8001684 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 020e 	bic.w	r2, r2, #14
 8001650:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
	...

08001690 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d005      	beq.n	80016b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2204      	movs	r2, #4
 80016aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e051      	b.n	8001756 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 020e 	bic.w	r2, r2, #14
 80016c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a22      	ldr	r2, [pc, #136]	; (8001760 <HAL_DMA_Abort_IT+0xd0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d029      	beq.n	8001730 <HAL_DMA_Abort_IT+0xa0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a20      	ldr	r2, [pc, #128]	; (8001764 <HAL_DMA_Abort_IT+0xd4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d022      	beq.n	800172c <HAL_DMA_Abort_IT+0x9c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <HAL_DMA_Abort_IT+0xd8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d01a      	beq.n	8001726 <HAL_DMA_Abort_IT+0x96>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_DMA_Abort_IT+0xdc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d012      	beq.n	8001720 <HAL_DMA_Abort_IT+0x90>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <HAL_DMA_Abort_IT+0xe0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d00a      	beq.n	800171a <HAL_DMA_Abort_IT+0x8a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1a      	ldr	r2, [pc, #104]	; (8001774 <HAL_DMA_Abort_IT+0xe4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d102      	bne.n	8001714 <HAL_DMA_Abort_IT+0x84>
 800170e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001712:	e00e      	b.n	8001732 <HAL_DMA_Abort_IT+0xa2>
 8001714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001718:	e00b      	b.n	8001732 <HAL_DMA_Abort_IT+0xa2>
 800171a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171e:	e008      	b.n	8001732 <HAL_DMA_Abort_IT+0xa2>
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	e005      	b.n	8001732 <HAL_DMA_Abort_IT+0xa2>
 8001726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172a:	e002      	b.n	8001732 <HAL_DMA_Abort_IT+0xa2>
 800172c:	2310      	movs	r3, #16
 800172e:	e000      	b.n	8001732 <HAL_DMA_Abort_IT+0xa2>
 8001730:	2301      	movs	r3, #1
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_DMA_Abort_IT+0xe8>)
 8001734:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
    } 
  }
  return status;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40020008 	.word	0x40020008
 8001764:	4002001c 	.word	0x4002001c
 8001768:	40020030 	.word	0x40020030
 800176c:	40020044 	.word	0x40020044
 8001770:	40020058 	.word	0x40020058
 8001774:	4002006c 	.word	0x4002006c
 8001778:	40020000 	.word	0x40020000

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e148      	b.n	8001a22 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001790:	2201      	movs	r2, #1
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8137 	bne.w	8001a1c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4aa3      	ldr	r2, [pc, #652]	; (8001a40 <HAL_GPIO_Init+0x2c4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d05e      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017b8:	4aa1      	ldr	r2, [pc, #644]	; (8001a40 <HAL_GPIO_Init+0x2c4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d875      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017be:	4aa1      	ldr	r2, [pc, #644]	; (8001a44 <HAL_GPIO_Init+0x2c8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d058      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017c4:	4a9f      	ldr	r2, [pc, #636]	; (8001a44 <HAL_GPIO_Init+0x2c8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d86f      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ca:	4a9f      	ldr	r2, [pc, #636]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d052      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017d0:	4a9d      	ldr	r2, [pc, #628]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d869      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017d6:	4a9d      	ldr	r2, [pc, #628]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04c      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017dc:	4a9b      	ldr	r2, [pc, #620]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d863      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017e2:	4a9b      	ldr	r2, [pc, #620]	; (8001a50 <HAL_GPIO_Init+0x2d4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d046      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017e8:	4a99      	ldr	r2, [pc, #612]	; (8001a50 <HAL_GPIO_Init+0x2d4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d85d      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d82a      	bhi.n	8001848 <HAL_GPIO_Init+0xcc>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d859      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017f6:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <HAL_GPIO_Init+0x80>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	08001877 	.word	0x08001877
 8001800:	08001851 	.word	0x08001851
 8001804:	08001863 	.word	0x08001863
 8001808:	080018a5 	.word	0x080018a5
 800180c:	080018ab 	.word	0x080018ab
 8001810:	080018ab 	.word	0x080018ab
 8001814:	080018ab 	.word	0x080018ab
 8001818:	080018ab 	.word	0x080018ab
 800181c:	080018ab 	.word	0x080018ab
 8001820:	080018ab 	.word	0x080018ab
 8001824:	080018ab 	.word	0x080018ab
 8001828:	080018ab 	.word	0x080018ab
 800182c:	080018ab 	.word	0x080018ab
 8001830:	080018ab 	.word	0x080018ab
 8001834:	080018ab 	.word	0x080018ab
 8001838:	080018ab 	.word	0x080018ab
 800183c:	080018ab 	.word	0x080018ab
 8001840:	08001859 	.word	0x08001859
 8001844:	0800186d 	.word	0x0800186d
 8001848:	4a82      	ldr	r2, [pc, #520]	; (8001a54 <HAL_GPIO_Init+0x2d8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184e:	e02c      	b.n	80018aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e029      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e024      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	3308      	adds	r3, #8
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e01f      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	330c      	adds	r3, #12
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e01a      	b.n	80018ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187e:	2304      	movs	r3, #4
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e013      	b.n	80018ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	611a      	str	r2, [r3, #16]
          break;
 8001896:	e009      	b.n	80018ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	615a      	str	r2, [r3, #20]
          break;
 80018a2:	e003      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x130>
          break;
 80018aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d801      	bhi.n	80018b6 <HAL_GPIO_Init+0x13a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	e001      	b.n	80018ba <HAL_GPIO_Init+0x13e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2bff      	cmp	r3, #255	; 0xff
 80018c0:	d802      	bhi.n	80018c8 <HAL_GPIO_Init+0x14c>
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x152>
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	3b08      	subs	r3, #8
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	210f      	movs	r1, #15
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	431a      	orrs	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8090 	beq.w	8001a1c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018fc:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a55      	ldr	r2, [pc, #340]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001914:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a49      	ldr	r2, [pc, #292]	; (8001a60 <HAL_GPIO_Init+0x2e4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_Init+0x1e0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_GPIO_Init+0x2e8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x1dc>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a47      	ldr	r2, [pc, #284]	; (8001a68 <HAL_GPIO_Init+0x2ec>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_GPIO_Init+0x1d8>
 8001950:	2302      	movs	r3, #2
 8001952:	e004      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001954:	2303      	movs	r3, #3
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 800195c:	2300      	movs	r3, #0
 800195e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4093      	lsls	r3, r2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800196e:	493b      	ldr	r1, [pc, #236]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4937      	ldr	r1, [pc, #220]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001996:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	43db      	mvns	r3, r3
 800199e:	4933      	ldr	r1, [pc, #204]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	492d      	ldr	r1, [pc, #180]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4929      	ldr	r1, [pc, #164]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	4923      	ldr	r1, [pc, #140]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	491f      	ldr	r1, [pc, #124]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4919      	ldr	r1, [pc, #100]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4915      	ldr	r1, [pc, #84]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	3301      	adds	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f47f aeaf 	bne.w	8001790 <HAL_GPIO_Init+0x14>
  }
}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	372c      	adds	r7, #44	; 0x2c
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10310000 	.word	0x10310000
 8001a48:	10220000 	.word	0x10220000
 8001a4c:	10210000 	.word	0x10210000
 8001a50:	10120000 	.word	0x10120000
 8001a54:	10110000 	.word	0x10110000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e001      	b.n	8001a92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aae:	787b      	ldrb	r3, [r7, #1]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aba:	e003      	b.n	8001ac4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	041a      	lsls	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e26c      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af0:	4b92      	ldr	r3, [pc, #584]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d00c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001afc:	4b8f      	ldr	r3, [pc, #572]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d112      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5e>
 8001b08:	4b8c      	ldr	r3, [pc, #560]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d10b      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b16:	4b89      	ldr	r3, [pc, #548]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d06c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x12c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d168      	bne.n	8001bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e246      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x76>
 8001b38:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a7f      	ldr	r2, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e02e      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x98>
 8001b4e:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7a      	ldr	r2, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e01d      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0xbc>
 8001b72:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a71      	ldr	r2, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6e      	ldr	r2, [pc, #440]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b8c:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a67      	ldr	r2, [pc, #412]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d013      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fc1e 	bl	80013ec <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fc1a 	bl	80013ec <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1fa      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0xe4>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fc0a 	bl	80013ec <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fc06 	bl	80013ec <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1e6      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x10c>
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d063      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0a:	4b4c      	ldr	r3, [pc, #304]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d11c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x18c>
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d116      	bne.n	8001c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_RCC_OscConfig+0x176>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e1ba      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4939      	ldr	r1, [pc, #228]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	e03a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <HAL_RCC_OscConfig+0x270>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fbbf 	bl	80013ec <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c72:	f7ff fbbb 	bl	80013ec <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e19b      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4927      	ldr	r1, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fb9e 	bl	80013ec <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fb9a 	bl	80013ec <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e17a      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d03a      	beq.n	8001d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d019      	beq.n	8001d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7ff fb7e 	bl	80013ec <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fb7a 	bl	80013ec <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e15a      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f000 fad8 	bl	80022c8 <RCC_Delay>
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7ff fb64 	bl	80013ec <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d26:	e00f      	b.n	8001d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fb60 	bl	80013ec <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d908      	bls.n	8001d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e140      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	42420000 	.word	0x42420000
 8001d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	4b9e      	ldr	r3, [pc, #632]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e9      	bne.n	8001d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80a6 	beq.w	8001eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b97      	ldr	r3, [pc, #604]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b94      	ldr	r3, [pc, #592]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a93      	ldr	r2, [pc, #588]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	61d3      	str	r3, [r2, #28]
 8001d7e:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	4b8e      	ldr	r3, [pc, #568]	; (8001fc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9a:	4b8b      	ldr	r3, [pc, #556]	; (8001fc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a8a      	ldr	r2, [pc, #552]	; (8001fc8 <HAL_RCC_OscConfig+0x4f8>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da6:	f7ff fb21 	bl	80013ec <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dae:	f7ff fb1d 	bl	80013ec <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b64      	cmp	r3, #100	; 0x64
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0fd      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	4b81      	ldr	r3, [pc, #516]	; (8001fc8 <HAL_RCC_OscConfig+0x4f8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x312>
 8001dd4:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a7a      	ldr	r2, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	e02d      	b.n	8001e3e <HAL_RCC_OscConfig+0x36e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x334>
 8001dea:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a72      	ldr	r2, [pc, #456]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
 8001e02:	e01c      	b.n	8001e3e <HAL_RCC_OscConfig+0x36e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x356>
 8001e0c:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a6c      	ldr	r2, [pc, #432]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x36e>
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a66      	ldr	r2, [pc, #408]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a63      	ldr	r2, [pc, #396]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d015      	beq.n	8001e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7ff fad1 	bl	80013ec <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff facd 	bl	80013ec <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0ab      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ee      	beq.n	8001e4e <HAL_RCC_OscConfig+0x37e>
 8001e70:	e014      	b.n	8001e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fabb 	bl	80013ec <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7ff fab7 	bl	80013ec <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e095      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ee      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8081 	beq.w	8001fba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d061      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d146      	bne.n	8001f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_RCC_OscConfig+0x4fc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fa8b 	bl	80013ec <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff fa87 	bl	80013ec <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e067      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d108      	bne.n	8001f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	492d      	ldr	r1, [pc, #180]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a19      	ldr	r1, [r3, #32]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	430b      	orrs	r3, r1
 8001f26:	4927      	ldr	r1, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_OscConfig+0x4fc>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff fa5b 	bl	80013ec <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff fa57 	bl	80013ec <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e037      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46a>
 8001f58:	e02f      	b.n	8001fba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_RCC_OscConfig+0x4fc>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fa44 	bl	80013ec <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7ff fa40 	bl	80013ec <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e020      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x498>
 8001f86:	e018      	b.n	8001fba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e013      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	42420060 	.word	0x42420060

08001fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0d0      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d910      	bls.n	8002014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 0207 	bic.w	r2, r3, #7
 8001ffa:	4965      	ldr	r1, [pc, #404]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b63      	ldr	r3, [pc, #396]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0b8      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800202c:	4b59      	ldr	r3, [pc, #356]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a58      	ldr	r2, [pc, #352]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002044:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800204e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002050:	4b50      	ldr	r3, [pc, #320]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	494d      	ldr	r1, [pc, #308]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d040      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d115      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e07f      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e073      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06b      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4936      	ldr	r1, [pc, #216]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7ff f994 	bl	80013ec <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7ff f990 	bl	80013ec <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e053      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 020c 	and.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1eb      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d210      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0207 	bic.w	r2, r3, #7
 8002106:	4922      	ldr	r1, [pc, #136]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e032      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4916      	ldr	r1, [pc, #88]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215e:	f000 f821 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8002162:	4602      	mov	r2, r0
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	490a      	ldr	r1, [pc, #40]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002170:	5ccb      	ldrb	r3, [r1, r3]
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1cc>)
 8002178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1d0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff f8f2 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40022000 	.word	0x40022000
 8002194:	40021000 	.word	0x40021000
 8002198:	08003d90 	.word	0x08003d90
 800219c:	20000014 	.word	0x20000014
 80021a0:	20000018 	.word	0x20000018

080021a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b490      	push	{r4, r7}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021aa:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021ac:	1d3c      	adds	r4, r7, #4
 80021ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021b4:	f240 2301 	movw	r3, #513	; 0x201
 80021b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d002      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x40>
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x46>
 80021e2:	e02d      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e6:	623b      	str	r3, [r7, #32]
      break;
 80021e8:	e02d      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021f6:	4413      	add	r3, r2
 80021f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_RCC_GetSysClockFreq+0xb4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	0c5b      	lsrs	r3, r3, #17
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002216:	4413      	add	r3, r2
 8002218:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800221c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002222:	fb02 f203 	mul.w	r2, r2, r3
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	e004      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	623b      	str	r3, [r7, #32]
      break;
 800223e:	e002      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002242:	623b      	str	r3, [r7, #32]
      break;
 8002244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002246:	6a3b      	ldr	r3, [r7, #32]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc90      	pop	{r4, r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	08003d74 	.word	0x08003d74
 8002258:	40021000 	.word	0x40021000
 800225c:	007a1200 	.word	0x007a1200
 8002260:	003d0900 	.word	0x003d0900

08002264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002268:	4b02      	ldr	r3, [pc, #8]	; (8002274 <HAL_RCC_GetHCLKFreq+0x10>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000014 	.word	0x20000014

08002278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800227c:	f7ff fff2 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4903      	ldr	r1, [pc, #12]	; (800229c <HAL_RCC_GetPCLK1Freq+0x24>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	08003da0 	.word	0x08003da0

080022a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022a4:	f7ff ffde 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	0adb      	lsrs	r3, r3, #11
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	4903      	ldr	r1, [pc, #12]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	08003da0 	.word	0x08003da0

080022c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <RCC_Delay+0x34>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <RCC_Delay+0x38>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0a5b      	lsrs	r3, r3, #9
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022e4:	bf00      	nop
  }
  while (Delay --);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	60fa      	str	r2, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f9      	bne.n	80022e4 <RCC_Delay+0x1c>
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	20000014 	.word	0x20000014
 8002300:	10624dd3 	.word	0x10624dd3

08002304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e041      	b.n	800239a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fef2 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3304      	adds	r3, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f000 fa6a 	bl	800281c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d001      	beq.n	80023bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e035      	b.n	8002428 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a16      	ldr	r2, [pc, #88]	; (8002434 <HAL_TIM_Base_Start_IT+0x90>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d009      	beq.n	80023f2 <HAL_TIM_Base_Start_IT+0x4e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e6:	d004      	beq.n	80023f2 <HAL_TIM_Base_Start_IT+0x4e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <HAL_TIM_Base_Start_IT+0x94>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d111      	bne.n	8002416 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b06      	cmp	r3, #6
 8002402:	d010      	beq.n	8002426 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002414:	e007      	b.n	8002426 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400

0800243c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b02      	cmp	r3, #2
 8002450:	d122      	bne.n	8002498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b02      	cmp	r3, #2
 800245e:	d11b      	bne.n	8002498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0202 	mvn.w	r2, #2
 8002468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9b1 	bl	80027e6 <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f9a4 	bl	80027d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f9b3 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d122      	bne.n	80024ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d11b      	bne.n	80024ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0204 	mvn.w	r2, #4
 80024bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f987 	bl	80027e6 <HAL_TIM_IC_CaptureCallback>
 80024d8:	e005      	b.n	80024e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f97a 	bl	80027d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f989 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d122      	bne.n	8002540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b08      	cmp	r3, #8
 8002506:	d11b      	bne.n	8002540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0208 	mvn.w	r2, #8
 8002510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2204      	movs	r2, #4
 8002516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f95d 	bl	80027e6 <HAL_TIM_IC_CaptureCallback>
 800252c:	e005      	b.n	800253a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f950 	bl	80027d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f95f 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b10      	cmp	r3, #16
 800254c:	d122      	bne.n	8002594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b10      	cmp	r3, #16
 800255a:	d11b      	bne.n	8002594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0210 	mvn.w	r2, #16
 8002564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2208      	movs	r2, #8
 800256a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f933 	bl	80027e6 <HAL_TIM_IC_CaptureCallback>
 8002580:	e005      	b.n	800258e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f926 	bl	80027d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f935 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d10e      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0201 	mvn.w	r2, #1
 80025b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe fbf4 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ca:	2b80      	cmp	r3, #128	; 0x80
 80025cc:	d10e      	bne.n	80025ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	2b80      	cmp	r3, #128	; 0x80
 80025da:	d107      	bne.n	80025ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fa67 	bl	8002aba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d10e      	bne.n	8002618 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d107      	bne.n	8002618 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f8f9 	bl	800280a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b20      	cmp	r3, #32
 8002624:	d10e      	bne.n	8002644 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b20      	cmp	r3, #32
 8002632:	d107      	bne.n	8002644 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0220 	mvn.w	r2, #32
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa32 	bl	8002aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_TIM_ConfigClockSource+0x18>
 8002660:	2302      	movs	r3, #2
 8002662:	e0b3      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x180>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002682:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800268a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269c:	d03e      	beq.n	800271c <HAL_TIM_ConfigClockSource+0xd0>
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a2:	f200 8087 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x168>
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	f000 8085 	beq.w	80027b8 <HAL_TIM_ConfigClockSource+0x16c>
 80026ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b2:	d87f      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x168>
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d01a      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0xa2>
 80026b8:	2b70      	cmp	r3, #112	; 0x70
 80026ba:	d87b      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x168>
 80026bc:	2b60      	cmp	r3, #96	; 0x60
 80026be:	d050      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x116>
 80026c0:	2b60      	cmp	r3, #96	; 0x60
 80026c2:	d877      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x168>
 80026c4:	2b50      	cmp	r3, #80	; 0x50
 80026c6:	d03c      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0xf6>
 80026c8:	2b50      	cmp	r3, #80	; 0x50
 80026ca:	d873      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x168>
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d058      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0x136>
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d86f      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x168>
 80026d4:	2b30      	cmp	r3, #48	; 0x30
 80026d6:	d064      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x156>
 80026d8:	2b30      	cmp	r3, #48	; 0x30
 80026da:	d86b      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x168>
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d060      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x156>
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d867      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x168>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d05c      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x156>
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d05a      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026ec:	e062      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f000 f95c 	bl	80029ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002710:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	609a      	str	r2, [r3, #8]
      break;
 800271a:	e04e      	b.n	80027ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f000 f945 	bl	80029ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800273e:	609a      	str	r2, [r3, #8]
      break;
 8002740:	e03b      	b.n	80027ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	461a      	mov	r2, r3
 8002750:	f000 f8bc 	bl	80028cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2150      	movs	r1, #80	; 0x50
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f913 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002760:	e02b      	b.n	80027ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	461a      	mov	r2, r3
 8002770:	f000 f8da 	bl	8002928 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2160      	movs	r1, #96	; 0x60
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f903 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002780:	e01b      	b.n	80027ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6859      	ldr	r1, [r3, #4]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	461a      	mov	r2, r3
 8002790:	f000 f89c 	bl	80028cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2140      	movs	r1, #64	; 0x40
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f8f3 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 80027a0:	e00b      	b.n	80027ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	4610      	mov	r0, r2
 80027ae:	f000 f8ea 	bl	8002986 <TIM_ITRx_SetConfig>
        break;
 80027b2:	e002      	b.n	80027ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027b4:	bf00      	nop
 80027b6:	e000      	b.n	80027ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a25      	ldr	r2, [pc, #148]	; (80028c4 <TIM_Base_SetConfig+0xa8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d007      	beq.n	8002844 <TIM_Base_SetConfig+0x28>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d003      	beq.n	8002844 <TIM_Base_SetConfig+0x28>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <TIM_Base_SetConfig+0xac>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <TIM_Base_SetConfig+0xa8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <TIM_Base_SetConfig+0x52>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d003      	beq.n	800286e <TIM_Base_SetConfig+0x52>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <TIM_Base_SetConfig+0xac>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d108      	bne.n	8002880 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <TIM_Base_SetConfig+0xa8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d103      	bne.n	80028b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	615a      	str	r2, [r3, #20]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40000400 	.word	0x40000400

080028cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0201 	bic.w	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f023 030a 	bic.w	r3, r3, #10
 8002908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f023 0210 	bic.w	r2, r3, #16
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002952:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	031b      	lsls	r3, r3, #12
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	621a      	str	r2, [r3, #32]
}
 800297c:	bf00      	nop
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f043 0307 	orr.w	r3, r3, #7
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	609a      	str	r2, [r3, #8]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b087      	sub	sp, #28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	021a      	lsls	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	431a      	orrs	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	609a      	str	r2, [r3, #8]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e041      	b.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d009      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d004      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10c      	bne.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400

08002aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e03f      	b.n	8002b5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fb32 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fc25 	bl	8003360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b08a      	sub	sp, #40	; 0x28
 8002b6a:	af02      	add	r7, sp, #8
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d17c      	bne.n	8002c80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_UART_Transmit+0x2c>
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e075      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_UART_Transmit+0x3e>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e06e      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2221      	movs	r2, #33	; 0x21
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bba:	f7fe fc17 	bl	80013ec <HAL_GetTick>
 8002bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd4:	d108      	bne.n	8002be8 <HAL_UART_Transmit+0x82>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e003      	b.n	8002bf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bf8:	e02a      	b.n	8002c50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fa11 	bl	800302c <UART_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e036      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10b      	bne.n	8002c32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	e007      	b.n	8002c42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1cf      	bne.n	8002bfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2200      	movs	r2, #0
 8002c62:	2140      	movs	r1, #64	; 0x40
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f9e1 	bl	800302c <UART_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e006      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_UART_IRQHandler+0x52>
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa99 	bl	800320e <UART_Receive_IT>
      return;
 8002cdc:	e17b      	b.n	8002fd6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80b1 	beq.w	8002e48 <HAL_UART_IRQHandler+0x1bc>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_UART_IRQHandler+0x70>
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80a6 	beq.w	8002e48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_UART_IRQHandler+0x90>
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_UART_IRQHandler+0xb0>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0202 	orr.w	r2, r3, #2
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_UART_IRQHandler+0xd0>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00f      	beq.n	8002d86 <HAL_UART_IRQHandler+0xfa>
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_UART_IRQHandler+0xee>
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0208 	orr.w	r2, r3, #8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 811e 	beq.w	8002fcc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_UART_IRQHandler+0x11e>
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fa32 	bl	800320e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x146>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d031      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f974 	bl	80030c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d023      	beq.n	8002e2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d013      	beq.n	8002e26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	4a76      	ldr	r2, [pc, #472]	; (8002fdc <HAL_UART_IRQHandler+0x350>)
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fc40 	bl	8001690 <HAL_DMA_Abort_IT>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e20:	4610      	mov	r0, r2
 8002e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	e00e      	b.n	8002e44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8ec 	bl	8003004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	e00a      	b.n	8002e44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8e8 	bl	8003004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e34:	e006      	b.n	8002e44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8e4 	bl	8003004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e42:	e0c3      	b.n	8002fcc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	bf00      	nop
    return;
 8002e46:	e0c1      	b.n	8002fcc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	f040 80a1 	bne.w	8002f94 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 809b 	beq.w	8002f94 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8095 	beq.w	8002f94 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d04e      	beq.n	8002f2c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002e98:	8a3b      	ldrh	r3, [r7, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8098 	beq.w	8002fd0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ea4:	8a3a      	ldrh	r2, [r7, #16]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	f080 8092 	bcs.w	8002fd0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8a3a      	ldrh	r2, [r7, #16]
 8002eb0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d02b      	beq.n	8002f14 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0210 	bic.w	r2, r2, #16
 8002f08:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fb83 	bl	800161a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4619      	mov	r1, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f876 	bl	8003016 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f2a:	e051      	b.n	8002fd0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d047      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002f44:	8a7b      	ldrh	r3, [r7, #18]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d044      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f58:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0210 	bic.w	r2, r2, #16
 8002f86:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f88:	8a7b      	ldrh	r3, [r7, #18]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f842 	bl	8003016 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f92:	e01f      	b.n	8002fd4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x324>
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8c9 	bl	8003140 <UART_Transmit_IT>
    return;
 8002fae:	e012      	b.n	8002fd6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x34a>
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f90a 	bl	80031de <UART_EndTransmit_IT>
    return;
 8002fca:	e004      	b.n	8002fd6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002fcc:	bf00      	nop
 8002fce:	e002      	b.n	8002fd6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fd4:	bf00      	nop
  }
}
 8002fd6:	3728      	adds	r7, #40	; 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	08003119 	.word	0x08003119

08002fe0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303c:	e02c      	b.n	8003098 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d028      	beq.n	8003098 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <UART_WaitOnFlagUntilTimeout+0x30>
 800304c:	f7fe f9ce 	bl	80013ec <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	d21d      	bcs.n	8003098 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800306a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e00f      	b.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d0c3      	beq.n	800303e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0210 	bic.w	r2, r2, #16
 80030fe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7ff ff66 	bl	8003004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b21      	cmp	r3, #33	; 0x21
 8003152:	d13e      	bne.n	80031d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315c:	d114      	bne.n	8003188 <UART_Transmit_IT+0x48>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d110      	bne.n	8003188 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800317a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	1c9a      	adds	r2, r3, #2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]
 8003186:	e008      	b.n	800319a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	1c59      	adds	r1, r3, #1
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6211      	str	r1, [r2, #32]
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4619      	mov	r1, r3
 80031a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff feee 	bl	8002fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b22      	cmp	r3, #34	; 0x22
 8003220:	f040 8099 	bne.w	8003356 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322c:	d117      	bne.n	800325e <UART_Receive_IT+0x50>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d113      	bne.n	800325e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324c:	b29a      	uxth	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	1c9a      	adds	r2, r3, #2
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
 800325c:	e026      	b.n	80032ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003270:	d007      	beq.n	8003282 <UART_Receive_IT+0x74>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <UART_Receive_IT+0x82>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e008      	b.n	80032a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800329c:	b2da      	uxtb	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4619      	mov	r1, r3
 80032ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d148      	bne.n	8003352 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0220 	bic.w	r2, r2, #32
 80032ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d123      	bne.n	8003348 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0210 	bic.w	r2, r2, #16
 8003314:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b10      	cmp	r3, #16
 8003322:	d10a      	bne.n	800333a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fe68 	bl	8003016 <HAL_UARTEx_RxEventCallback>
 8003346:	e002      	b.n	800334e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff fe52 	bl	8002ff2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e002      	b.n	8003358 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800339a:	f023 030c 	bic.w	r3, r3, #12
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <UART_SetConfig+0x114>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d103      	bne.n	80033d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7fe ff6a 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	e002      	b.n	80033d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe ff52 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 80033d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009a      	lsls	r2, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	4a22      	ldr	r2, [pc, #136]	; (8003478 <UART_SetConfig+0x118>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	0119      	lsls	r1, r3, #4
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009a      	lsls	r2, r3, #2
 8003400:	441a      	add	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	fbb2 f2f3 	udiv	r2, r2, r3
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <UART_SetConfig+0x118>)
 800340e:	fba3 0302 	umull	r0, r3, r3, r2
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	2064      	movs	r0, #100	; 0x64
 8003416:	fb00 f303 	mul.w	r3, r0, r3
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	3332      	adds	r3, #50	; 0x32
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <UART_SetConfig+0x118>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342c:	4419      	add	r1, r3
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009a      	lsls	r2, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fbb2 f2f3 	udiv	r2, r2, r3
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <UART_SetConfig+0x118>)
 8003446:	fba3 0302 	umull	r0, r3, r3, r2
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2064      	movs	r0, #100	; 0x64
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	3332      	adds	r3, #50	; 0x32
 8003458:	4a07      	ldr	r2, [pc, #28]	; (8003478 <UART_SetConfig+0x118>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	f003 020f 	and.w	r2, r3, #15
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	440a      	add	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40013800 	.word	0x40013800
 8003478:	51eb851f 	.word	0x51eb851f

0800347c <__errno>:
 800347c:	4b01      	ldr	r3, [pc, #4]	; (8003484 <__errno+0x8>)
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000020 	.word	0x20000020

08003488 <__libc_init_array>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	2600      	movs	r6, #0
 800348c:	4d0c      	ldr	r5, [pc, #48]	; (80034c0 <__libc_init_array+0x38>)
 800348e:	4c0d      	ldr	r4, [pc, #52]	; (80034c4 <__libc_init_array+0x3c>)
 8003490:	1b64      	subs	r4, r4, r5
 8003492:	10a4      	asrs	r4, r4, #2
 8003494:	42a6      	cmp	r6, r4
 8003496:	d109      	bne.n	80034ac <__libc_init_array+0x24>
 8003498:	f000 fc5c 	bl	8003d54 <_init>
 800349c:	2600      	movs	r6, #0
 800349e:	4d0a      	ldr	r5, [pc, #40]	; (80034c8 <__libc_init_array+0x40>)
 80034a0:	4c0a      	ldr	r4, [pc, #40]	; (80034cc <__libc_init_array+0x44>)
 80034a2:	1b64      	subs	r4, r4, r5
 80034a4:	10a4      	asrs	r4, r4, #2
 80034a6:	42a6      	cmp	r6, r4
 80034a8:	d105      	bne.n	80034b6 <__libc_init_array+0x2e>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b0:	4798      	blx	r3
 80034b2:	3601      	adds	r6, #1
 80034b4:	e7ee      	b.n	8003494 <__libc_init_array+0xc>
 80034b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ba:	4798      	blx	r3
 80034bc:	3601      	adds	r6, #1
 80034be:	e7f2      	b.n	80034a6 <__libc_init_array+0x1e>
 80034c0:	08003ddc 	.word	0x08003ddc
 80034c4:	08003ddc 	.word	0x08003ddc
 80034c8:	08003ddc 	.word	0x08003ddc
 80034cc:	08003de0 	.word	0x08003de0

080034d0 <memset>:
 80034d0:	4603      	mov	r3, r0
 80034d2:	4402      	add	r2, r0
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d100      	bne.n	80034da <memset+0xa>
 80034d8:	4770      	bx	lr
 80034da:	f803 1b01 	strb.w	r1, [r3], #1
 80034de:	e7f9      	b.n	80034d4 <memset+0x4>

080034e0 <siprintf>:
 80034e0:	b40e      	push	{r1, r2, r3}
 80034e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034e6:	b500      	push	{lr}
 80034e8:	b09c      	sub	sp, #112	; 0x70
 80034ea:	ab1d      	add	r3, sp, #116	; 0x74
 80034ec:	9002      	str	r0, [sp, #8]
 80034ee:	9006      	str	r0, [sp, #24]
 80034f0:	9107      	str	r1, [sp, #28]
 80034f2:	9104      	str	r1, [sp, #16]
 80034f4:	4808      	ldr	r0, [pc, #32]	; (8003518 <siprintf+0x38>)
 80034f6:	4909      	ldr	r1, [pc, #36]	; (800351c <siprintf+0x3c>)
 80034f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80034fc:	9105      	str	r1, [sp, #20]
 80034fe:	6800      	ldr	r0, [r0, #0]
 8003500:	a902      	add	r1, sp, #8
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	f000 f868 	bl	80035d8 <_svfiprintf_r>
 8003508:	2200      	movs	r2, #0
 800350a:	9b02      	ldr	r3, [sp, #8]
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	b01c      	add	sp, #112	; 0x70
 8003510:	f85d eb04 	ldr.w	lr, [sp], #4
 8003514:	b003      	add	sp, #12
 8003516:	4770      	bx	lr
 8003518:	20000020 	.word	0x20000020
 800351c:	ffff0208 	.word	0xffff0208

08003520 <__ssputs_r>:
 8003520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	688e      	ldr	r6, [r1, #8]
 8003526:	4682      	mov	sl, r0
 8003528:	429e      	cmp	r6, r3
 800352a:	460c      	mov	r4, r1
 800352c:	4690      	mov	r8, r2
 800352e:	461f      	mov	r7, r3
 8003530:	d838      	bhi.n	80035a4 <__ssputs_r+0x84>
 8003532:	898a      	ldrh	r2, [r1, #12]
 8003534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003538:	d032      	beq.n	80035a0 <__ssputs_r+0x80>
 800353a:	6825      	ldr	r5, [r4, #0]
 800353c:	6909      	ldr	r1, [r1, #16]
 800353e:	3301      	adds	r3, #1
 8003540:	eba5 0901 	sub.w	r9, r5, r1
 8003544:	6965      	ldr	r5, [r4, #20]
 8003546:	444b      	add	r3, r9
 8003548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800354c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003550:	106d      	asrs	r5, r5, #1
 8003552:	429d      	cmp	r5, r3
 8003554:	bf38      	it	cc
 8003556:	461d      	movcc	r5, r3
 8003558:	0553      	lsls	r3, r2, #21
 800355a:	d531      	bpl.n	80035c0 <__ssputs_r+0xa0>
 800355c:	4629      	mov	r1, r5
 800355e:	f000 fb53 	bl	8003c08 <_malloc_r>
 8003562:	4606      	mov	r6, r0
 8003564:	b950      	cbnz	r0, 800357c <__ssputs_r+0x5c>
 8003566:	230c      	movs	r3, #12
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	f8ca 3000 	str.w	r3, [sl]
 8003570:	89a3      	ldrh	r3, [r4, #12]
 8003572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003576:	81a3      	strh	r3, [r4, #12]
 8003578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357c:	464a      	mov	r2, r9
 800357e:	6921      	ldr	r1, [r4, #16]
 8003580:	f000 face 	bl	8003b20 <memcpy>
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	6126      	str	r6, [r4, #16]
 8003592:	444e      	add	r6, r9
 8003594:	6026      	str	r6, [r4, #0]
 8003596:	463e      	mov	r6, r7
 8003598:	6165      	str	r5, [r4, #20]
 800359a:	eba5 0509 	sub.w	r5, r5, r9
 800359e:	60a5      	str	r5, [r4, #8]
 80035a0:	42be      	cmp	r6, r7
 80035a2:	d900      	bls.n	80035a6 <__ssputs_r+0x86>
 80035a4:	463e      	mov	r6, r7
 80035a6:	4632      	mov	r2, r6
 80035a8:	4641      	mov	r1, r8
 80035aa:	6820      	ldr	r0, [r4, #0]
 80035ac:	f000 fac6 	bl	8003b3c <memmove>
 80035b0:	68a3      	ldr	r3, [r4, #8]
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	1b9b      	subs	r3, r3, r6
 80035b6:	4432      	add	r2, r6
 80035b8:	2000      	movs	r0, #0
 80035ba:	60a3      	str	r3, [r4, #8]
 80035bc:	6022      	str	r2, [r4, #0]
 80035be:	e7db      	b.n	8003578 <__ssputs_r+0x58>
 80035c0:	462a      	mov	r2, r5
 80035c2:	f000 fb7b 	bl	8003cbc <_realloc_r>
 80035c6:	4606      	mov	r6, r0
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d1e1      	bne.n	8003590 <__ssputs_r+0x70>
 80035cc:	4650      	mov	r0, sl
 80035ce:	6921      	ldr	r1, [r4, #16]
 80035d0:	f000 face 	bl	8003b70 <_free_r>
 80035d4:	e7c7      	b.n	8003566 <__ssputs_r+0x46>
	...

080035d8 <_svfiprintf_r>:
 80035d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035dc:	4698      	mov	r8, r3
 80035de:	898b      	ldrh	r3, [r1, #12]
 80035e0:	4607      	mov	r7, r0
 80035e2:	061b      	lsls	r3, r3, #24
 80035e4:	460d      	mov	r5, r1
 80035e6:	4614      	mov	r4, r2
 80035e8:	b09d      	sub	sp, #116	; 0x74
 80035ea:	d50e      	bpl.n	800360a <_svfiprintf_r+0x32>
 80035ec:	690b      	ldr	r3, [r1, #16]
 80035ee:	b963      	cbnz	r3, 800360a <_svfiprintf_r+0x32>
 80035f0:	2140      	movs	r1, #64	; 0x40
 80035f2:	f000 fb09 	bl	8003c08 <_malloc_r>
 80035f6:	6028      	str	r0, [r5, #0]
 80035f8:	6128      	str	r0, [r5, #16]
 80035fa:	b920      	cbnz	r0, 8003606 <_svfiprintf_r+0x2e>
 80035fc:	230c      	movs	r3, #12
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	e0d1      	b.n	80037aa <_svfiprintf_r+0x1d2>
 8003606:	2340      	movs	r3, #64	; 0x40
 8003608:	616b      	str	r3, [r5, #20]
 800360a:	2300      	movs	r3, #0
 800360c:	9309      	str	r3, [sp, #36]	; 0x24
 800360e:	2320      	movs	r3, #32
 8003610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003614:	2330      	movs	r3, #48	; 0x30
 8003616:	f04f 0901 	mov.w	r9, #1
 800361a:	f8cd 800c 	str.w	r8, [sp, #12]
 800361e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80037c4 <_svfiprintf_r+0x1ec>
 8003622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003626:	4623      	mov	r3, r4
 8003628:	469a      	mov	sl, r3
 800362a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800362e:	b10a      	cbz	r2, 8003634 <_svfiprintf_r+0x5c>
 8003630:	2a25      	cmp	r2, #37	; 0x25
 8003632:	d1f9      	bne.n	8003628 <_svfiprintf_r+0x50>
 8003634:	ebba 0b04 	subs.w	fp, sl, r4
 8003638:	d00b      	beq.n	8003652 <_svfiprintf_r+0x7a>
 800363a:	465b      	mov	r3, fp
 800363c:	4622      	mov	r2, r4
 800363e:	4629      	mov	r1, r5
 8003640:	4638      	mov	r0, r7
 8003642:	f7ff ff6d 	bl	8003520 <__ssputs_r>
 8003646:	3001      	adds	r0, #1
 8003648:	f000 80aa 	beq.w	80037a0 <_svfiprintf_r+0x1c8>
 800364c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800364e:	445a      	add	r2, fp
 8003650:	9209      	str	r2, [sp, #36]	; 0x24
 8003652:	f89a 3000 	ldrb.w	r3, [sl]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80a2 	beq.w	80037a0 <_svfiprintf_r+0x1c8>
 800365c:	2300      	movs	r3, #0
 800365e:	f04f 32ff 	mov.w	r2, #4294967295
 8003662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003666:	f10a 0a01 	add.w	sl, sl, #1
 800366a:	9304      	str	r3, [sp, #16]
 800366c:	9307      	str	r3, [sp, #28]
 800366e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003672:	931a      	str	r3, [sp, #104]	; 0x68
 8003674:	4654      	mov	r4, sl
 8003676:	2205      	movs	r2, #5
 8003678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800367c:	4851      	ldr	r0, [pc, #324]	; (80037c4 <_svfiprintf_r+0x1ec>)
 800367e:	f000 fa41 	bl	8003b04 <memchr>
 8003682:	9a04      	ldr	r2, [sp, #16]
 8003684:	b9d8      	cbnz	r0, 80036be <_svfiprintf_r+0xe6>
 8003686:	06d0      	lsls	r0, r2, #27
 8003688:	bf44      	itt	mi
 800368a:	2320      	movmi	r3, #32
 800368c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003690:	0711      	lsls	r1, r2, #28
 8003692:	bf44      	itt	mi
 8003694:	232b      	movmi	r3, #43	; 0x2b
 8003696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800369a:	f89a 3000 	ldrb.w	r3, [sl]
 800369e:	2b2a      	cmp	r3, #42	; 0x2a
 80036a0:	d015      	beq.n	80036ce <_svfiprintf_r+0xf6>
 80036a2:	4654      	mov	r4, sl
 80036a4:	2000      	movs	r0, #0
 80036a6:	f04f 0c0a 	mov.w	ip, #10
 80036aa:	9a07      	ldr	r2, [sp, #28]
 80036ac:	4621      	mov	r1, r4
 80036ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036b2:	3b30      	subs	r3, #48	; 0x30
 80036b4:	2b09      	cmp	r3, #9
 80036b6:	d94e      	bls.n	8003756 <_svfiprintf_r+0x17e>
 80036b8:	b1b0      	cbz	r0, 80036e8 <_svfiprintf_r+0x110>
 80036ba:	9207      	str	r2, [sp, #28]
 80036bc:	e014      	b.n	80036e8 <_svfiprintf_r+0x110>
 80036be:	eba0 0308 	sub.w	r3, r0, r8
 80036c2:	fa09 f303 	lsl.w	r3, r9, r3
 80036c6:	4313      	orrs	r3, r2
 80036c8:	46a2      	mov	sl, r4
 80036ca:	9304      	str	r3, [sp, #16]
 80036cc:	e7d2      	b.n	8003674 <_svfiprintf_r+0x9c>
 80036ce:	9b03      	ldr	r3, [sp, #12]
 80036d0:	1d19      	adds	r1, r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	9103      	str	r1, [sp, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bfbb      	ittet	lt
 80036da:	425b      	neglt	r3, r3
 80036dc:	f042 0202 	orrlt.w	r2, r2, #2
 80036e0:	9307      	strge	r3, [sp, #28]
 80036e2:	9307      	strlt	r3, [sp, #28]
 80036e4:	bfb8      	it	lt
 80036e6:	9204      	strlt	r2, [sp, #16]
 80036e8:	7823      	ldrb	r3, [r4, #0]
 80036ea:	2b2e      	cmp	r3, #46	; 0x2e
 80036ec:	d10c      	bne.n	8003708 <_svfiprintf_r+0x130>
 80036ee:	7863      	ldrb	r3, [r4, #1]
 80036f0:	2b2a      	cmp	r3, #42	; 0x2a
 80036f2:	d135      	bne.n	8003760 <_svfiprintf_r+0x188>
 80036f4:	9b03      	ldr	r3, [sp, #12]
 80036f6:	3402      	adds	r4, #2
 80036f8:	1d1a      	adds	r2, r3, #4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	9203      	str	r2, [sp, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bfb8      	it	lt
 8003702:	f04f 33ff 	movlt.w	r3, #4294967295
 8003706:	9305      	str	r3, [sp, #20]
 8003708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80037d4 <_svfiprintf_r+0x1fc>
 800370c:	2203      	movs	r2, #3
 800370e:	4650      	mov	r0, sl
 8003710:	7821      	ldrb	r1, [r4, #0]
 8003712:	f000 f9f7 	bl	8003b04 <memchr>
 8003716:	b140      	cbz	r0, 800372a <_svfiprintf_r+0x152>
 8003718:	2340      	movs	r3, #64	; 0x40
 800371a:	eba0 000a 	sub.w	r0, r0, sl
 800371e:	fa03 f000 	lsl.w	r0, r3, r0
 8003722:	9b04      	ldr	r3, [sp, #16]
 8003724:	3401      	adds	r4, #1
 8003726:	4303      	orrs	r3, r0
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800372e:	2206      	movs	r2, #6
 8003730:	4825      	ldr	r0, [pc, #148]	; (80037c8 <_svfiprintf_r+0x1f0>)
 8003732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003736:	f000 f9e5 	bl	8003b04 <memchr>
 800373a:	2800      	cmp	r0, #0
 800373c:	d038      	beq.n	80037b0 <_svfiprintf_r+0x1d8>
 800373e:	4b23      	ldr	r3, [pc, #140]	; (80037cc <_svfiprintf_r+0x1f4>)
 8003740:	bb1b      	cbnz	r3, 800378a <_svfiprintf_r+0x1b2>
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	3307      	adds	r3, #7
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	3308      	adds	r3, #8
 800374c:	9303      	str	r3, [sp, #12]
 800374e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003750:	4433      	add	r3, r6
 8003752:	9309      	str	r3, [sp, #36]	; 0x24
 8003754:	e767      	b.n	8003626 <_svfiprintf_r+0x4e>
 8003756:	460c      	mov	r4, r1
 8003758:	2001      	movs	r0, #1
 800375a:	fb0c 3202 	mla	r2, ip, r2, r3
 800375e:	e7a5      	b.n	80036ac <_svfiprintf_r+0xd4>
 8003760:	2300      	movs	r3, #0
 8003762:	f04f 0c0a 	mov.w	ip, #10
 8003766:	4619      	mov	r1, r3
 8003768:	3401      	adds	r4, #1
 800376a:	9305      	str	r3, [sp, #20]
 800376c:	4620      	mov	r0, r4
 800376e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003772:	3a30      	subs	r2, #48	; 0x30
 8003774:	2a09      	cmp	r2, #9
 8003776:	d903      	bls.n	8003780 <_svfiprintf_r+0x1a8>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0c5      	beq.n	8003708 <_svfiprintf_r+0x130>
 800377c:	9105      	str	r1, [sp, #20]
 800377e:	e7c3      	b.n	8003708 <_svfiprintf_r+0x130>
 8003780:	4604      	mov	r4, r0
 8003782:	2301      	movs	r3, #1
 8003784:	fb0c 2101 	mla	r1, ip, r1, r2
 8003788:	e7f0      	b.n	800376c <_svfiprintf_r+0x194>
 800378a:	ab03      	add	r3, sp, #12
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	462a      	mov	r2, r5
 8003790:	4638      	mov	r0, r7
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <_svfiprintf_r+0x1f8>)
 8003794:	a904      	add	r1, sp, #16
 8003796:	f3af 8000 	nop.w
 800379a:	1c42      	adds	r2, r0, #1
 800379c:	4606      	mov	r6, r0
 800379e:	d1d6      	bne.n	800374e <_svfiprintf_r+0x176>
 80037a0:	89ab      	ldrh	r3, [r5, #12]
 80037a2:	065b      	lsls	r3, r3, #25
 80037a4:	f53f af2c 	bmi.w	8003600 <_svfiprintf_r+0x28>
 80037a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037aa:	b01d      	add	sp, #116	; 0x74
 80037ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b0:	ab03      	add	r3, sp, #12
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	462a      	mov	r2, r5
 80037b6:	4638      	mov	r0, r7
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <_svfiprintf_r+0x1f8>)
 80037ba:	a904      	add	r1, sp, #16
 80037bc:	f000 f87c 	bl	80038b8 <_printf_i>
 80037c0:	e7eb      	b.n	800379a <_svfiprintf_r+0x1c2>
 80037c2:	bf00      	nop
 80037c4:	08003da8 	.word	0x08003da8
 80037c8:	08003db2 	.word	0x08003db2
 80037cc:	00000000 	.word	0x00000000
 80037d0:	08003521 	.word	0x08003521
 80037d4:	08003dae 	.word	0x08003dae

080037d8 <_printf_common>:
 80037d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	4616      	mov	r6, r2
 80037de:	4699      	mov	r9, r3
 80037e0:	688a      	ldr	r2, [r1, #8]
 80037e2:	690b      	ldr	r3, [r1, #16]
 80037e4:	4607      	mov	r7, r0
 80037e6:	4293      	cmp	r3, r2
 80037e8:	bfb8      	it	lt
 80037ea:	4613      	movlt	r3, r2
 80037ec:	6033      	str	r3, [r6, #0]
 80037ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037f2:	460c      	mov	r4, r1
 80037f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037f8:	b10a      	cbz	r2, 80037fe <_printf_common+0x26>
 80037fa:	3301      	adds	r3, #1
 80037fc:	6033      	str	r3, [r6, #0]
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	0699      	lsls	r1, r3, #26
 8003802:	bf42      	ittt	mi
 8003804:	6833      	ldrmi	r3, [r6, #0]
 8003806:	3302      	addmi	r3, #2
 8003808:	6033      	strmi	r3, [r6, #0]
 800380a:	6825      	ldr	r5, [r4, #0]
 800380c:	f015 0506 	ands.w	r5, r5, #6
 8003810:	d106      	bne.n	8003820 <_printf_common+0x48>
 8003812:	f104 0a19 	add.w	sl, r4, #25
 8003816:	68e3      	ldr	r3, [r4, #12]
 8003818:	6832      	ldr	r2, [r6, #0]
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	42ab      	cmp	r3, r5
 800381e:	dc28      	bgt.n	8003872 <_printf_common+0x9a>
 8003820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003824:	1e13      	subs	r3, r2, #0
 8003826:	6822      	ldr	r2, [r4, #0]
 8003828:	bf18      	it	ne
 800382a:	2301      	movne	r3, #1
 800382c:	0692      	lsls	r2, r2, #26
 800382e:	d42d      	bmi.n	800388c <_printf_common+0xb4>
 8003830:	4649      	mov	r1, r9
 8003832:	4638      	mov	r0, r7
 8003834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003838:	47c0      	blx	r8
 800383a:	3001      	adds	r0, #1
 800383c:	d020      	beq.n	8003880 <_printf_common+0xa8>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	68e5      	ldr	r5, [r4, #12]
 8003842:	f003 0306 	and.w	r3, r3, #6
 8003846:	2b04      	cmp	r3, #4
 8003848:	bf18      	it	ne
 800384a:	2500      	movne	r5, #0
 800384c:	6832      	ldr	r2, [r6, #0]
 800384e:	f04f 0600 	mov.w	r6, #0
 8003852:	68a3      	ldr	r3, [r4, #8]
 8003854:	bf08      	it	eq
 8003856:	1aad      	subeq	r5, r5, r2
 8003858:	6922      	ldr	r2, [r4, #16]
 800385a:	bf08      	it	eq
 800385c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003860:	4293      	cmp	r3, r2
 8003862:	bfc4      	itt	gt
 8003864:	1a9b      	subgt	r3, r3, r2
 8003866:	18ed      	addgt	r5, r5, r3
 8003868:	341a      	adds	r4, #26
 800386a:	42b5      	cmp	r5, r6
 800386c:	d11a      	bne.n	80038a4 <_printf_common+0xcc>
 800386e:	2000      	movs	r0, #0
 8003870:	e008      	b.n	8003884 <_printf_common+0xac>
 8003872:	2301      	movs	r3, #1
 8003874:	4652      	mov	r2, sl
 8003876:	4649      	mov	r1, r9
 8003878:	4638      	mov	r0, r7
 800387a:	47c0      	blx	r8
 800387c:	3001      	adds	r0, #1
 800387e:	d103      	bne.n	8003888 <_printf_common+0xb0>
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003888:	3501      	adds	r5, #1
 800388a:	e7c4      	b.n	8003816 <_printf_common+0x3e>
 800388c:	2030      	movs	r0, #48	; 0x30
 800388e:	18e1      	adds	r1, r4, r3
 8003890:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800389a:	4422      	add	r2, r4
 800389c:	3302      	adds	r3, #2
 800389e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038a2:	e7c5      	b.n	8003830 <_printf_common+0x58>
 80038a4:	2301      	movs	r3, #1
 80038a6:	4622      	mov	r2, r4
 80038a8:	4649      	mov	r1, r9
 80038aa:	4638      	mov	r0, r7
 80038ac:	47c0      	blx	r8
 80038ae:	3001      	adds	r0, #1
 80038b0:	d0e6      	beq.n	8003880 <_printf_common+0xa8>
 80038b2:	3601      	adds	r6, #1
 80038b4:	e7d9      	b.n	800386a <_printf_common+0x92>
	...

080038b8 <_printf_i>:
 80038b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038bc:	460c      	mov	r4, r1
 80038be:	7e27      	ldrb	r7, [r4, #24]
 80038c0:	4691      	mov	r9, r2
 80038c2:	2f78      	cmp	r7, #120	; 0x78
 80038c4:	4680      	mov	r8, r0
 80038c6:	469a      	mov	sl, r3
 80038c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038ce:	d807      	bhi.n	80038e0 <_printf_i+0x28>
 80038d0:	2f62      	cmp	r7, #98	; 0x62
 80038d2:	d80a      	bhi.n	80038ea <_printf_i+0x32>
 80038d4:	2f00      	cmp	r7, #0
 80038d6:	f000 80d9 	beq.w	8003a8c <_printf_i+0x1d4>
 80038da:	2f58      	cmp	r7, #88	; 0x58
 80038dc:	f000 80a4 	beq.w	8003a28 <_printf_i+0x170>
 80038e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038e8:	e03a      	b.n	8003960 <_printf_i+0xa8>
 80038ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ee:	2b15      	cmp	r3, #21
 80038f0:	d8f6      	bhi.n	80038e0 <_printf_i+0x28>
 80038f2:	a001      	add	r0, pc, #4	; (adr r0, 80038f8 <_printf_i+0x40>)
 80038f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80038f8:	08003951 	.word	0x08003951
 80038fc:	08003965 	.word	0x08003965
 8003900:	080038e1 	.word	0x080038e1
 8003904:	080038e1 	.word	0x080038e1
 8003908:	080038e1 	.word	0x080038e1
 800390c:	080038e1 	.word	0x080038e1
 8003910:	08003965 	.word	0x08003965
 8003914:	080038e1 	.word	0x080038e1
 8003918:	080038e1 	.word	0x080038e1
 800391c:	080038e1 	.word	0x080038e1
 8003920:	080038e1 	.word	0x080038e1
 8003924:	08003a73 	.word	0x08003a73
 8003928:	08003995 	.word	0x08003995
 800392c:	08003a55 	.word	0x08003a55
 8003930:	080038e1 	.word	0x080038e1
 8003934:	080038e1 	.word	0x080038e1
 8003938:	08003a95 	.word	0x08003a95
 800393c:	080038e1 	.word	0x080038e1
 8003940:	08003995 	.word	0x08003995
 8003944:	080038e1 	.word	0x080038e1
 8003948:	080038e1 	.word	0x080038e1
 800394c:	08003a5d 	.word	0x08003a5d
 8003950:	680b      	ldr	r3, [r1, #0]
 8003952:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003956:	1d1a      	adds	r2, r3, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	600a      	str	r2, [r1, #0]
 800395c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003960:	2301      	movs	r3, #1
 8003962:	e0a4      	b.n	8003aae <_printf_i+0x1f6>
 8003964:	6825      	ldr	r5, [r4, #0]
 8003966:	6808      	ldr	r0, [r1, #0]
 8003968:	062e      	lsls	r6, r5, #24
 800396a:	f100 0304 	add.w	r3, r0, #4
 800396e:	d50a      	bpl.n	8003986 <_printf_i+0xce>
 8003970:	6805      	ldr	r5, [r0, #0]
 8003972:	600b      	str	r3, [r1, #0]
 8003974:	2d00      	cmp	r5, #0
 8003976:	da03      	bge.n	8003980 <_printf_i+0xc8>
 8003978:	232d      	movs	r3, #45	; 0x2d
 800397a:	426d      	negs	r5, r5
 800397c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003980:	230a      	movs	r3, #10
 8003982:	485e      	ldr	r0, [pc, #376]	; (8003afc <_printf_i+0x244>)
 8003984:	e019      	b.n	80039ba <_printf_i+0x102>
 8003986:	f015 0f40 	tst.w	r5, #64	; 0x40
 800398a:	6805      	ldr	r5, [r0, #0]
 800398c:	600b      	str	r3, [r1, #0]
 800398e:	bf18      	it	ne
 8003990:	b22d      	sxthne	r5, r5
 8003992:	e7ef      	b.n	8003974 <_printf_i+0xbc>
 8003994:	680b      	ldr	r3, [r1, #0]
 8003996:	6825      	ldr	r5, [r4, #0]
 8003998:	1d18      	adds	r0, r3, #4
 800399a:	6008      	str	r0, [r1, #0]
 800399c:	0628      	lsls	r0, r5, #24
 800399e:	d501      	bpl.n	80039a4 <_printf_i+0xec>
 80039a0:	681d      	ldr	r5, [r3, #0]
 80039a2:	e002      	b.n	80039aa <_printf_i+0xf2>
 80039a4:	0669      	lsls	r1, r5, #25
 80039a6:	d5fb      	bpl.n	80039a0 <_printf_i+0xe8>
 80039a8:	881d      	ldrh	r5, [r3, #0]
 80039aa:	2f6f      	cmp	r7, #111	; 0x6f
 80039ac:	bf0c      	ite	eq
 80039ae:	2308      	moveq	r3, #8
 80039b0:	230a      	movne	r3, #10
 80039b2:	4852      	ldr	r0, [pc, #328]	; (8003afc <_printf_i+0x244>)
 80039b4:	2100      	movs	r1, #0
 80039b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039ba:	6866      	ldr	r6, [r4, #4]
 80039bc:	2e00      	cmp	r6, #0
 80039be:	bfa8      	it	ge
 80039c0:	6821      	ldrge	r1, [r4, #0]
 80039c2:	60a6      	str	r6, [r4, #8]
 80039c4:	bfa4      	itt	ge
 80039c6:	f021 0104 	bicge.w	r1, r1, #4
 80039ca:	6021      	strge	r1, [r4, #0]
 80039cc:	b90d      	cbnz	r5, 80039d2 <_printf_i+0x11a>
 80039ce:	2e00      	cmp	r6, #0
 80039d0:	d04d      	beq.n	8003a6e <_printf_i+0x1b6>
 80039d2:	4616      	mov	r6, r2
 80039d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80039d8:	fb03 5711 	mls	r7, r3, r1, r5
 80039dc:	5dc7      	ldrb	r7, [r0, r7]
 80039de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039e2:	462f      	mov	r7, r5
 80039e4:	42bb      	cmp	r3, r7
 80039e6:	460d      	mov	r5, r1
 80039e8:	d9f4      	bls.n	80039d4 <_printf_i+0x11c>
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d10b      	bne.n	8003a06 <_printf_i+0x14e>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	07df      	lsls	r7, r3, #31
 80039f2:	d508      	bpl.n	8003a06 <_printf_i+0x14e>
 80039f4:	6923      	ldr	r3, [r4, #16]
 80039f6:	6861      	ldr	r1, [r4, #4]
 80039f8:	4299      	cmp	r1, r3
 80039fa:	bfde      	ittt	le
 80039fc:	2330      	movle	r3, #48	; 0x30
 80039fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a06:	1b92      	subs	r2, r2, r6
 8003a08:	6122      	str	r2, [r4, #16]
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	4640      	mov	r0, r8
 8003a10:	f8cd a000 	str.w	sl, [sp]
 8003a14:	aa03      	add	r2, sp, #12
 8003a16:	f7ff fedf 	bl	80037d8 <_printf_common>
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d14c      	bne.n	8003ab8 <_printf_i+0x200>
 8003a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a22:	b004      	add	sp, #16
 8003a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a28:	4834      	ldr	r0, [pc, #208]	; (8003afc <_printf_i+0x244>)
 8003a2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a2e:	680e      	ldr	r6, [r1, #0]
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a36:	061f      	lsls	r7, r3, #24
 8003a38:	600e      	str	r6, [r1, #0]
 8003a3a:	d514      	bpl.n	8003a66 <_printf_i+0x1ae>
 8003a3c:	07d9      	lsls	r1, r3, #31
 8003a3e:	bf44      	itt	mi
 8003a40:	f043 0320 	orrmi.w	r3, r3, #32
 8003a44:	6023      	strmi	r3, [r4, #0]
 8003a46:	b91d      	cbnz	r5, 8003a50 <_printf_i+0x198>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	f023 0320 	bic.w	r3, r3, #32
 8003a4e:	6023      	str	r3, [r4, #0]
 8003a50:	2310      	movs	r3, #16
 8003a52:	e7af      	b.n	80039b4 <_printf_i+0xfc>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	f043 0320 	orr.w	r3, r3, #32
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	2378      	movs	r3, #120	; 0x78
 8003a5e:	4828      	ldr	r0, [pc, #160]	; (8003b00 <_printf_i+0x248>)
 8003a60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a64:	e7e3      	b.n	8003a2e <_printf_i+0x176>
 8003a66:	065e      	lsls	r6, r3, #25
 8003a68:	bf48      	it	mi
 8003a6a:	b2ad      	uxthmi	r5, r5
 8003a6c:	e7e6      	b.n	8003a3c <_printf_i+0x184>
 8003a6e:	4616      	mov	r6, r2
 8003a70:	e7bb      	b.n	80039ea <_printf_i+0x132>
 8003a72:	680b      	ldr	r3, [r1, #0]
 8003a74:	6826      	ldr	r6, [r4, #0]
 8003a76:	1d1d      	adds	r5, r3, #4
 8003a78:	6960      	ldr	r0, [r4, #20]
 8003a7a:	600d      	str	r5, [r1, #0]
 8003a7c:	0635      	lsls	r5, r6, #24
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	d501      	bpl.n	8003a86 <_printf_i+0x1ce>
 8003a82:	6018      	str	r0, [r3, #0]
 8003a84:	e002      	b.n	8003a8c <_printf_i+0x1d4>
 8003a86:	0671      	lsls	r1, r6, #25
 8003a88:	d5fb      	bpl.n	8003a82 <_printf_i+0x1ca>
 8003a8a:	8018      	strh	r0, [r3, #0]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	4616      	mov	r6, r2
 8003a90:	6123      	str	r3, [r4, #16]
 8003a92:	e7ba      	b.n	8003a0a <_printf_i+0x152>
 8003a94:	680b      	ldr	r3, [r1, #0]
 8003a96:	1d1a      	adds	r2, r3, #4
 8003a98:	600a      	str	r2, [r1, #0]
 8003a9a:	681e      	ldr	r6, [r3, #0]
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	6862      	ldr	r2, [r4, #4]
 8003aa2:	f000 f82f 	bl	8003b04 <memchr>
 8003aa6:	b108      	cbz	r0, 8003aac <_printf_i+0x1f4>
 8003aa8:	1b80      	subs	r0, r0, r6
 8003aaa:	6060      	str	r0, [r4, #4]
 8003aac:	6863      	ldr	r3, [r4, #4]
 8003aae:	6123      	str	r3, [r4, #16]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab6:	e7a8      	b.n	8003a0a <_printf_i+0x152>
 8003ab8:	4632      	mov	r2, r6
 8003aba:	4649      	mov	r1, r9
 8003abc:	4640      	mov	r0, r8
 8003abe:	6923      	ldr	r3, [r4, #16]
 8003ac0:	47d0      	blx	sl
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	d0ab      	beq.n	8003a1e <_printf_i+0x166>
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	079b      	lsls	r3, r3, #30
 8003aca:	d413      	bmi.n	8003af4 <_printf_i+0x23c>
 8003acc:	68e0      	ldr	r0, [r4, #12]
 8003ace:	9b03      	ldr	r3, [sp, #12]
 8003ad0:	4298      	cmp	r0, r3
 8003ad2:	bfb8      	it	lt
 8003ad4:	4618      	movlt	r0, r3
 8003ad6:	e7a4      	b.n	8003a22 <_printf_i+0x16a>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4632      	mov	r2, r6
 8003adc:	4649      	mov	r1, r9
 8003ade:	4640      	mov	r0, r8
 8003ae0:	47d0      	blx	sl
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d09b      	beq.n	8003a1e <_printf_i+0x166>
 8003ae6:	3501      	adds	r5, #1
 8003ae8:	68e3      	ldr	r3, [r4, #12]
 8003aea:	9903      	ldr	r1, [sp, #12]
 8003aec:	1a5b      	subs	r3, r3, r1
 8003aee:	42ab      	cmp	r3, r5
 8003af0:	dcf2      	bgt.n	8003ad8 <_printf_i+0x220>
 8003af2:	e7eb      	b.n	8003acc <_printf_i+0x214>
 8003af4:	2500      	movs	r5, #0
 8003af6:	f104 0619 	add.w	r6, r4, #25
 8003afa:	e7f5      	b.n	8003ae8 <_printf_i+0x230>
 8003afc:	08003db9 	.word	0x08003db9
 8003b00:	08003dca 	.word	0x08003dca

08003b04 <memchr>:
 8003b04:	4603      	mov	r3, r0
 8003b06:	b510      	push	{r4, lr}
 8003b08:	b2c9      	uxtb	r1, r1
 8003b0a:	4402      	add	r2, r0
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	d101      	bne.n	8003b16 <memchr+0x12>
 8003b12:	2000      	movs	r0, #0
 8003b14:	e003      	b.n	8003b1e <memchr+0x1a>
 8003b16:	7804      	ldrb	r4, [r0, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	428c      	cmp	r4, r1
 8003b1c:	d1f6      	bne.n	8003b0c <memchr+0x8>
 8003b1e:	bd10      	pop	{r4, pc}

08003b20 <memcpy>:
 8003b20:	440a      	add	r2, r1
 8003b22:	4291      	cmp	r1, r2
 8003b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b28:	d100      	bne.n	8003b2c <memcpy+0xc>
 8003b2a:	4770      	bx	lr
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b32:	4291      	cmp	r1, r2
 8003b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b38:	d1f9      	bne.n	8003b2e <memcpy+0xe>
 8003b3a:	bd10      	pop	{r4, pc}

08003b3c <memmove>:
 8003b3c:	4288      	cmp	r0, r1
 8003b3e:	b510      	push	{r4, lr}
 8003b40:	eb01 0402 	add.w	r4, r1, r2
 8003b44:	d902      	bls.n	8003b4c <memmove+0x10>
 8003b46:	4284      	cmp	r4, r0
 8003b48:	4623      	mov	r3, r4
 8003b4a:	d807      	bhi.n	8003b5c <memmove+0x20>
 8003b4c:	1e43      	subs	r3, r0, #1
 8003b4e:	42a1      	cmp	r1, r4
 8003b50:	d008      	beq.n	8003b64 <memmove+0x28>
 8003b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b5a:	e7f8      	b.n	8003b4e <memmove+0x12>
 8003b5c:	4601      	mov	r1, r0
 8003b5e:	4402      	add	r2, r0
 8003b60:	428a      	cmp	r2, r1
 8003b62:	d100      	bne.n	8003b66 <memmove+0x2a>
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b6e:	e7f7      	b.n	8003b60 <memmove+0x24>

08003b70 <_free_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4605      	mov	r5, r0
 8003b74:	2900      	cmp	r1, #0
 8003b76:	d043      	beq.n	8003c00 <_free_r+0x90>
 8003b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b7c:	1f0c      	subs	r4, r1, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bfb8      	it	lt
 8003b82:	18e4      	addlt	r4, r4, r3
 8003b84:	f000 f8d0 	bl	8003d28 <__malloc_lock>
 8003b88:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <_free_r+0x94>)
 8003b8a:	6813      	ldr	r3, [r2, #0]
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	b933      	cbnz	r3, 8003b9e <_free_r+0x2e>
 8003b90:	6063      	str	r3, [r4, #4]
 8003b92:	6014      	str	r4, [r2, #0]
 8003b94:	4628      	mov	r0, r5
 8003b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b9a:	f000 b8cb 	b.w	8003d34 <__malloc_unlock>
 8003b9e:	42a3      	cmp	r3, r4
 8003ba0:	d90a      	bls.n	8003bb8 <_free_r+0x48>
 8003ba2:	6821      	ldr	r1, [r4, #0]
 8003ba4:	1862      	adds	r2, r4, r1
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	bf01      	itttt	eq
 8003baa:	681a      	ldreq	r2, [r3, #0]
 8003bac:	685b      	ldreq	r3, [r3, #4]
 8003bae:	1852      	addeq	r2, r2, r1
 8003bb0:	6022      	streq	r2, [r4, #0]
 8003bb2:	6063      	str	r3, [r4, #4]
 8003bb4:	6004      	str	r4, [r0, #0]
 8003bb6:	e7ed      	b.n	8003b94 <_free_r+0x24>
 8003bb8:	461a      	mov	r2, r3
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	b10b      	cbz	r3, 8003bc2 <_free_r+0x52>
 8003bbe:	42a3      	cmp	r3, r4
 8003bc0:	d9fa      	bls.n	8003bb8 <_free_r+0x48>
 8003bc2:	6811      	ldr	r1, [r2, #0]
 8003bc4:	1850      	adds	r0, r2, r1
 8003bc6:	42a0      	cmp	r0, r4
 8003bc8:	d10b      	bne.n	8003be2 <_free_r+0x72>
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	4401      	add	r1, r0
 8003bce:	1850      	adds	r0, r2, r1
 8003bd0:	4283      	cmp	r3, r0
 8003bd2:	6011      	str	r1, [r2, #0]
 8003bd4:	d1de      	bne.n	8003b94 <_free_r+0x24>
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4401      	add	r1, r0
 8003bdc:	6011      	str	r1, [r2, #0]
 8003bde:	6053      	str	r3, [r2, #4]
 8003be0:	e7d8      	b.n	8003b94 <_free_r+0x24>
 8003be2:	d902      	bls.n	8003bea <_free_r+0x7a>
 8003be4:	230c      	movs	r3, #12
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	e7d4      	b.n	8003b94 <_free_r+0x24>
 8003bea:	6820      	ldr	r0, [r4, #0]
 8003bec:	1821      	adds	r1, r4, r0
 8003bee:	428b      	cmp	r3, r1
 8003bf0:	bf01      	itttt	eq
 8003bf2:	6819      	ldreq	r1, [r3, #0]
 8003bf4:	685b      	ldreq	r3, [r3, #4]
 8003bf6:	1809      	addeq	r1, r1, r0
 8003bf8:	6021      	streq	r1, [r4, #0]
 8003bfa:	6063      	str	r3, [r4, #4]
 8003bfc:	6054      	str	r4, [r2, #4]
 8003bfe:	e7c9      	b.n	8003b94 <_free_r+0x24>
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
 8003c02:	bf00      	nop
 8003c04:	200000ac 	.word	0x200000ac

08003c08 <_malloc_r>:
 8003c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0a:	1ccd      	adds	r5, r1, #3
 8003c0c:	f025 0503 	bic.w	r5, r5, #3
 8003c10:	3508      	adds	r5, #8
 8003c12:	2d0c      	cmp	r5, #12
 8003c14:	bf38      	it	cc
 8003c16:	250c      	movcc	r5, #12
 8003c18:	2d00      	cmp	r5, #0
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	db01      	blt.n	8003c22 <_malloc_r+0x1a>
 8003c1e:	42a9      	cmp	r1, r5
 8003c20:	d903      	bls.n	8003c2a <_malloc_r+0x22>
 8003c22:	230c      	movs	r3, #12
 8003c24:	6033      	str	r3, [r6, #0]
 8003c26:	2000      	movs	r0, #0
 8003c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c2a:	f000 f87d 	bl	8003d28 <__malloc_lock>
 8003c2e:	4921      	ldr	r1, [pc, #132]	; (8003cb4 <_malloc_r+0xac>)
 8003c30:	680a      	ldr	r2, [r1, #0]
 8003c32:	4614      	mov	r4, r2
 8003c34:	b99c      	cbnz	r4, 8003c5e <_malloc_r+0x56>
 8003c36:	4f20      	ldr	r7, [pc, #128]	; (8003cb8 <_malloc_r+0xb0>)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	b923      	cbnz	r3, 8003c46 <_malloc_r+0x3e>
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f000 f862 	bl	8003d08 <_sbrk_r>
 8003c44:	6038      	str	r0, [r7, #0]
 8003c46:	4629      	mov	r1, r5
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f000 f85d 	bl	8003d08 <_sbrk_r>
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	d123      	bne.n	8003c9a <_malloc_r+0x92>
 8003c52:	230c      	movs	r3, #12
 8003c54:	4630      	mov	r0, r6
 8003c56:	6033      	str	r3, [r6, #0]
 8003c58:	f000 f86c 	bl	8003d34 <__malloc_unlock>
 8003c5c:	e7e3      	b.n	8003c26 <_malloc_r+0x1e>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	1b5b      	subs	r3, r3, r5
 8003c62:	d417      	bmi.n	8003c94 <_malloc_r+0x8c>
 8003c64:	2b0b      	cmp	r3, #11
 8003c66:	d903      	bls.n	8003c70 <_malloc_r+0x68>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	441c      	add	r4, r3
 8003c6c:	6025      	str	r5, [r4, #0]
 8003c6e:	e004      	b.n	8003c7a <_malloc_r+0x72>
 8003c70:	6863      	ldr	r3, [r4, #4]
 8003c72:	42a2      	cmp	r2, r4
 8003c74:	bf0c      	ite	eq
 8003c76:	600b      	streq	r3, [r1, #0]
 8003c78:	6053      	strne	r3, [r2, #4]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 f85a 	bl	8003d34 <__malloc_unlock>
 8003c80:	f104 000b 	add.w	r0, r4, #11
 8003c84:	1d23      	adds	r3, r4, #4
 8003c86:	f020 0007 	bic.w	r0, r0, #7
 8003c8a:	1ac2      	subs	r2, r0, r3
 8003c8c:	d0cc      	beq.n	8003c28 <_malloc_r+0x20>
 8003c8e:	1a1b      	subs	r3, r3, r0
 8003c90:	50a3      	str	r3, [r4, r2]
 8003c92:	e7c9      	b.n	8003c28 <_malloc_r+0x20>
 8003c94:	4622      	mov	r2, r4
 8003c96:	6864      	ldr	r4, [r4, #4]
 8003c98:	e7cc      	b.n	8003c34 <_malloc_r+0x2c>
 8003c9a:	1cc4      	adds	r4, r0, #3
 8003c9c:	f024 0403 	bic.w	r4, r4, #3
 8003ca0:	42a0      	cmp	r0, r4
 8003ca2:	d0e3      	beq.n	8003c6c <_malloc_r+0x64>
 8003ca4:	1a21      	subs	r1, r4, r0
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	f000 f82e 	bl	8003d08 <_sbrk_r>
 8003cac:	3001      	adds	r0, #1
 8003cae:	d1dd      	bne.n	8003c6c <_malloc_r+0x64>
 8003cb0:	e7cf      	b.n	8003c52 <_malloc_r+0x4a>
 8003cb2:	bf00      	nop
 8003cb4:	200000ac 	.word	0x200000ac
 8003cb8:	200000b0 	.word	0x200000b0

08003cbc <_realloc_r>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	4607      	mov	r7, r0
 8003cc0:	4614      	mov	r4, r2
 8003cc2:	460e      	mov	r6, r1
 8003cc4:	b921      	cbnz	r1, 8003cd0 <_realloc_r+0x14>
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ccc:	f7ff bf9c 	b.w	8003c08 <_malloc_r>
 8003cd0:	b922      	cbnz	r2, 8003cdc <_realloc_r+0x20>
 8003cd2:	f7ff ff4d 	bl	8003b70 <_free_r>
 8003cd6:	4625      	mov	r5, r4
 8003cd8:	4628      	mov	r0, r5
 8003cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cdc:	f000 f830 	bl	8003d40 <_malloc_usable_size_r>
 8003ce0:	42a0      	cmp	r0, r4
 8003ce2:	d20f      	bcs.n	8003d04 <_realloc_r+0x48>
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	f7ff ff8e 	bl	8003c08 <_malloc_r>
 8003cec:	4605      	mov	r5, r0
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d0f2      	beq.n	8003cd8 <_realloc_r+0x1c>
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	f7ff ff13 	bl	8003b20 <memcpy>
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	f7ff ff37 	bl	8003b70 <_free_r>
 8003d02:	e7e9      	b.n	8003cd8 <_realloc_r+0x1c>
 8003d04:	4635      	mov	r5, r6
 8003d06:	e7e7      	b.n	8003cd8 <_realloc_r+0x1c>

08003d08 <_sbrk_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	4d05      	ldr	r5, [pc, #20]	; (8003d24 <_sbrk_r+0x1c>)
 8003d0e:	4604      	mov	r4, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	602b      	str	r3, [r5, #0]
 8003d14:	f7fd fab0 	bl	8001278 <_sbrk>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_sbrk_r+0x1a>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_sbrk_r+0x1a>
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	200004a0 	.word	0x200004a0

08003d28 <__malloc_lock>:
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <__malloc_lock+0x8>)
 8003d2a:	f000 b811 	b.w	8003d50 <__retarget_lock_acquire_recursive>
 8003d2e:	bf00      	nop
 8003d30:	200004a8 	.word	0x200004a8

08003d34 <__malloc_unlock>:
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <__malloc_unlock+0x8>)
 8003d36:	f000 b80c 	b.w	8003d52 <__retarget_lock_release_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	200004a8 	.word	0x200004a8

08003d40 <_malloc_usable_size_r>:
 8003d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d44:	1f18      	subs	r0, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bfbc      	itt	lt
 8003d4a:	580b      	ldrlt	r3, [r1, r0]
 8003d4c:	18c0      	addlt	r0, r0, r3
 8003d4e:	4770      	bx	lr

08003d50 <__retarget_lock_acquire_recursive>:
 8003d50:	4770      	bx	lr

08003d52 <__retarget_lock_release_recursive>:
 8003d52:	4770      	bx	lr

08003d54 <_init>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr

08003d60 <_fini>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr
