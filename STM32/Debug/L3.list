
L3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef0  08003ef0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003ef0  08003ef0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ef0  08003ef0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef0  08003ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000084  08003f7c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003f7c  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e355  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c8  00000000  00000000  0002e402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  000314a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181b5  00000000  00000000  00032088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2ce  00000000  00000000  0004a23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088ec6  00000000  00000000  0005950b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e23d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003850  00000000  00000000  000e2424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e40 	.word	0x08003e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003e40 	.word	0x08003e40

0800014c <display7Seg>:
		segOut=0,
		enOut=0;

//FUNCTIONS
//7Seg & 7Seg buffer & Driver code for these functions
void display7Seg(uint8_t number){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if(number>=0 && number<10)segOut=digitMask[number];
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b09      	cmp	r3, #9
 800015a:	d804      	bhi.n	8000166 <display7Seg+0x1a>
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	4a04      	ldr	r2, [pc, #16]	; (8000170 <display7Seg+0x24>)
 8000160:	5cd2      	ldrb	r2, [r2, r3]
 8000162:	4b04      	ldr	r3, [pc, #16]	; (8000174 <display7Seg+0x28>)
 8000164:	701a      	strb	r2, [r3, #0]
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	08003e98 	.word	0x08003e98
 8000174:	200000a0 	.word	0x200000a0

08000178 <update7Seg>:

void update7Seg(int index){
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	display7Seg(led_buffer[index]);
 8000180:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <update7Seg+0x60>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4618      	mov	r0, r3
 800018a:	f7ff ffdf 	bl	800014c <display7Seg>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2b03      	cmp	r3, #3
 8000192:	d81b      	bhi.n	80001cc <update7Seg+0x54>
 8000194:	a201      	add	r2, pc, #4	; (adr r2, 800019c <update7Seg+0x24>)
 8000196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019a:	bf00      	nop
 800019c:	080001ad 	.word	0x080001ad
 80001a0:	080001b5 	.word	0x080001b5
 80001a4:	080001bd 	.word	0x080001bd
 80001a8:	080001c5 	.word	0x080001c5
	switch(index){
		case 0:
			enOut=0xE;
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <update7Seg+0x64>)
 80001ae:	220e      	movs	r2, #14
 80001b0:	701a      	strb	r2, [r3, #0]
			break;
 80001b2:	e00c      	b.n	80001ce <update7Seg+0x56>
		case 1:
			enOut=0xD;
 80001b4:	4b09      	ldr	r3, [pc, #36]	; (80001dc <update7Seg+0x64>)
 80001b6:	220d      	movs	r2, #13
 80001b8:	701a      	strb	r2, [r3, #0]
			break;
 80001ba:	e008      	b.n	80001ce <update7Seg+0x56>
		case 2:
			enOut=0xB;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <update7Seg+0x64>)
 80001be:	220b      	movs	r2, #11
 80001c0:	701a      	strb	r2, [r3, #0]
			break;
 80001c2:	e004      	b.n	80001ce <update7Seg+0x56>
		case 3:
			enOut=0x7;
 80001c4:	4b05      	ldr	r3, [pc, #20]	; (80001dc <update7Seg+0x64>)
 80001c6:	2207      	movs	r2, #7
 80001c8:	701a      	strb	r2, [r3, #0]
			break;
 80001ca:	e000      	b.n	80001ce <update7Seg+0x56>
		default:
			break;
 80001cc:	bf00      	nop
	}
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	200000a1 	.word	0x200000a1

080001e0 <update7SegMain>:

void update7SegMain(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	led7SegCounter=led7SegCounter>=MAX7SEG-1?0:led7SegCounter+1;
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <update7SegMain+0x2c>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	d804      	bhi.n	80001f6 <update7SegMain+0x16>
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <update7SegMain+0x2c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	e000      	b.n	80001f8 <update7SegMain+0x18>
 80001f6:	2300      	movs	r3, #0
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <update7SegMain+0x2c>)
 80001fa:	7013      	strb	r3, [r2, #0]
	update7Seg(led7SegCounter);
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <update7SegMain+0x2c>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f7ff ffb9 	bl	8000178 <update7Seg>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000000 	.word	0x20000000

08000210 <displayAll>:

//Registering output to pins
void displayAll(){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	GPIOA->ODR=(traff1Out<<12)|(traff2Out<<4);
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <displayAll+0x30>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	031a      	lsls	r2, r3, #12
 800021a:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <displayAll+0x34>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	011b      	lsls	r3, r3, #4
 8000220:	431a      	orrs	r2, r3
 8000222:	4b09      	ldr	r3, [pc, #36]	; (8000248 <displayAll+0x38>)
 8000224:	60da      	str	r2, [r3, #12]
	GPIOB->ODR=(enOut<<8)|(segOut);
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <displayAll+0x3c>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	021b      	lsls	r3, r3, #8
 800022c:	4a08      	ldr	r2, [pc, #32]	; (8000250 <displayAll+0x40>)
 800022e:	7812      	ldrb	r2, [r2, #0]
 8000230:	431a      	orrs	r2, r3
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <displayAll+0x44>)
 8000234:	60da      	str	r2, [r3, #12]
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	200000c3 	.word	0x200000c3
 8000244:	200000c2 	.word	0x200000c2
 8000248:	40010800 	.word	0x40010800
 800024c:	200000a1 	.word	0x200000a1
 8000250:	200000a0 	.word	0x200000a0
 8000254:	40010c00 	.word	0x40010c00

08000258 <fsm_automatic>:
		traffCond,	//FSM for the traffic lights
		traff1Out,	//Buffer for 2 traffic lights
		traff2Out;

//FSM for buttons
void fsm_automatic(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	switch(mode){
 800025c:	4b94      	ldr	r3, [pc, #592]	; (80004b0 <fsm_automatic+0x258>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b04      	cmp	r3, #4
 8000262:	f200 81ff 	bhi.w	8000664 <fsm_automatic+0x40c>
 8000266:	a201      	add	r2, pc, #4	; (adr r2, 800026c <fsm_automatic+0x14>)
 8000268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026c:	08000281 	.word	0x08000281
 8000270:	08000397 	.word	0x08000397
 8000274:	080003e7 	.word	0x080003e7
 8000278:	080004ed 	.word	0x080004ed
 800027c:	080005b1 	.word	0x080005b1
		case INIT:
			durationRedWaiting=durationRed;
 8000280:	4b8c      	ldr	r3, [pc, #560]	; (80004b4 <fsm_automatic+0x25c>)
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <fsm_automatic+0x260>)
 8000286:	701a      	strb	r2, [r3, #0]
			durationYellowWaiting=durationYellow;
 8000288:	4b8c      	ldr	r3, [pc, #560]	; (80004bc <fsm_automatic+0x264>)
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	4b8c      	ldr	r3, [pc, #560]	; (80004c0 <fsm_automatic+0x268>)
 800028e:	701a      	strb	r2, [r3, #0]
			durationGreenWaiting=durationGreen;
 8000290:	4b8c      	ldr	r3, [pc, #560]	; (80004c4 <fsm_automatic+0x26c>)
 8000292:	781a      	ldrb	r2, [r3, #0]
 8000294:	4b8c      	ldr	r3, [pc, #560]	; (80004c8 <fsm_automatic+0x270>)
 8000296:	701a      	strb	r2, [r3, #0]
			if(durationRed>durationYellow+durationGreen){
 8000298:	4b86      	ldr	r3, [pc, #536]	; (80004b4 <fsm_automatic+0x25c>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	461a      	mov	r2, r3
 800029e:	4b87      	ldr	r3, [pc, #540]	; (80004bc <fsm_automatic+0x264>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	4619      	mov	r1, r3
 80002a4:	4b87      	ldr	r3, [pc, #540]	; (80004c4 <fsm_automatic+0x26c>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	440b      	add	r3, r1
 80002aa:	429a      	cmp	r2, r3
 80002ac:	dd08      	ble.n	80002c0 <fsm_automatic+0x68>
				durationGreen=durationRed-durationYellow;
 80002ae:	4b81      	ldr	r3, [pc, #516]	; (80004b4 <fsm_automatic+0x25c>)
 80002b0:	781a      	ldrb	r2, [r3, #0]
 80002b2:	4b82      	ldr	r3, [pc, #520]	; (80004bc <fsm_automatic+0x264>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b82      	ldr	r3, [pc, #520]	; (80004c4 <fsm_automatic+0x26c>)
 80002bc:	701a      	strb	r2, [r3, #0]
 80002be:	e024      	b.n	800030a <fsm_automatic+0xb2>
			}else if(durationRed<durationYellow+durationGreen){
 80002c0:	4b7c      	ldr	r3, [pc, #496]	; (80004b4 <fsm_automatic+0x25c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	461a      	mov	r2, r3
 80002c6:	4b7d      	ldr	r3, [pc, #500]	; (80004bc <fsm_automatic+0x264>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4619      	mov	r1, r3
 80002cc:	4b7d      	ldr	r3, [pc, #500]	; (80004c4 <fsm_automatic+0x26c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	440b      	add	r3, r1
 80002d2:	429a      	cmp	r2, r3
 80002d4:	da19      	bge.n	800030a <fsm_automatic+0xb2>
				if(durationGreen+durationYellow>99){
 80002d6:	4b7b      	ldr	r3, [pc, #492]	; (80004c4 <fsm_automatic+0x26c>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	461a      	mov	r2, r3
 80002dc:	4b77      	ldr	r3, [pc, #476]	; (80004bc <fsm_automatic+0x264>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	4413      	add	r3, r2
 80002e2:	2b63      	cmp	r3, #99	; 0x63
 80002e4:	dd09      	ble.n	80002fa <fsm_automatic+0xa2>
					durationRed=99;
 80002e6:	4b73      	ldr	r3, [pc, #460]	; (80004b4 <fsm_automatic+0x25c>)
 80002e8:	2263      	movs	r2, #99	; 0x63
 80002ea:	701a      	strb	r2, [r3, #0]
					durationGreen=96;
 80002ec:	4b75      	ldr	r3, [pc, #468]	; (80004c4 <fsm_automatic+0x26c>)
 80002ee:	2260      	movs	r2, #96	; 0x60
 80002f0:	701a      	strb	r2, [r3, #0]
					durationYellow=3;
 80002f2:	4b72      	ldr	r3, [pc, #456]	; (80004bc <fsm_automatic+0x264>)
 80002f4:	2203      	movs	r2, #3
 80002f6:	701a      	strb	r2, [r3, #0]
 80002f8:	e007      	b.n	800030a <fsm_automatic+0xb2>
				}else durationRed=durationGreen+durationYellow;
 80002fa:	4b72      	ldr	r3, [pc, #456]	; (80004c4 <fsm_automatic+0x26c>)
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	4b6f      	ldr	r3, [pc, #444]	; (80004bc <fsm_automatic+0x264>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4413      	add	r3, r2
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b6b      	ldr	r3, [pc, #428]	; (80004b4 <fsm_automatic+0x25c>)
 8000308:	701a      	strb	r2, [r3, #0]
			}
			light1Time=durationRed;
 800030a:	4b6a      	ldr	r3, [pc, #424]	; (80004b4 <fsm_automatic+0x25c>)
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	4b6f      	ldr	r3, [pc, #444]	; (80004cc <fsm_automatic+0x274>)
 8000310:	701a      	strb	r2, [r3, #0]
			light2Time=durationGreen;
 8000312:	4b6c      	ldr	r3, [pc, #432]	; (80004c4 <fsm_automatic+0x26c>)
 8000314:	781a      	ldrb	r2, [r3, #0]
 8000316:	4b6e      	ldr	r3, [pc, #440]	; (80004d0 <fsm_automatic+0x278>)
 8000318:	701a      	strb	r2, [r3, #0]
			traffCond=RG;
 800031a:	4b6e      	ldr	r3, [pc, #440]	; (80004d4 <fsm_automatic+0x27c>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
			led_buffer[0]=light1Time/10;
 8000320:	4b6a      	ldr	r3, [pc, #424]	; (80004cc <fsm_automatic+0x274>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	4a6c      	ldr	r2, [pc, #432]	; (80004d8 <fsm_automatic+0x280>)
 8000326:	fba2 2303 	umull	r2, r3, r2, r3
 800032a:	08db      	lsrs	r3, r3, #3
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b6b      	ldr	r3, [pc, #428]	; (80004dc <fsm_automatic+0x284>)
 8000330:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=light1Time%10;
 8000332:	4b66      	ldr	r3, [pc, #408]	; (80004cc <fsm_automatic+0x274>)
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b68      	ldr	r3, [pc, #416]	; (80004d8 <fsm_automatic+0x280>)
 8000338:	fba3 1302 	umull	r1, r3, r3, r2
 800033c:	08d9      	lsrs	r1, r3, #3
 800033e:	460b      	mov	r3, r1
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	440b      	add	r3, r1
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	1ad3      	subs	r3, r2, r3
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b64      	ldr	r3, [pc, #400]	; (80004dc <fsm_automatic+0x284>)
 800034c:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=light2Time/10;
 800034e:	4b60      	ldr	r3, [pc, #384]	; (80004d0 <fsm_automatic+0x278>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	4a61      	ldr	r2, [pc, #388]	; (80004d8 <fsm_automatic+0x280>)
 8000354:	fba2 2303 	umull	r2, r3, r2, r3
 8000358:	08db      	lsrs	r3, r3, #3
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b5f      	ldr	r3, [pc, #380]	; (80004dc <fsm_automatic+0x284>)
 800035e:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=light2Time%10;
 8000360:	4b5b      	ldr	r3, [pc, #364]	; (80004d0 <fsm_automatic+0x278>)
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	4b5c      	ldr	r3, [pc, #368]	; (80004d8 <fsm_automatic+0x280>)
 8000366:	fba3 1302 	umull	r1, r3, r3, r2
 800036a:	08d9      	lsrs	r1, r3, #3
 800036c:	460b      	mov	r3, r1
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	440b      	add	r3, r1
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b58      	ldr	r3, [pc, #352]	; (80004dc <fsm_automatic+0x284>)
 800037a:	70da      	strb	r2, [r3, #3]
			buttonFlag[0]=0;
 800037c:	4b58      	ldr	r3, [pc, #352]	; (80004e0 <fsm_automatic+0x288>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
			buttonFlag[1]=0;
 8000382:	4b57      	ldr	r3, [pc, #348]	; (80004e0 <fsm_automatic+0x288>)
 8000384:	2200      	movs	r2, #0
 8000386:	705a      	strb	r2, [r3, #1]
			buttonFlag[2]=0;
 8000388:	4b55      	ldr	r3, [pc, #340]	; (80004e0 <fsm_automatic+0x288>)
 800038a:	2200      	movs	r2, #0
 800038c:	709a      	strb	r2, [r3, #2]
			mode=NORMAL;
 800038e:	4b48      	ldr	r3, [pc, #288]	; (80004b0 <fsm_automatic+0x258>)
 8000390:	2201      	movs	r2, #1
 8000392:	701a      	strb	r2, [r3, #0]
			break;
 8000394:	e166      	b.n	8000664 <fsm_automatic+0x40c>
		case NORMAL:
			if(is_button_pressed(0))buttonFlag[0]=1;
 8000396:	2000      	movs	r0, #0
 8000398:	f000 fb96 	bl	8000ac8 <is_button_pressed>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d002      	beq.n	80003a8 <fsm_automatic+0x150>
 80003a2:	4b4f      	ldr	r3, [pc, #316]	; (80004e0 <fsm_automatic+0x288>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 fb8d 	bl	8000ac8 <is_button_pressed>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f040 8150 	bne.w	8000656 <fsm_automatic+0x3fe>
 80003b6:	4b4a      	ldr	r3, [pc, #296]	; (80004e0 <fsm_automatic+0x288>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f000 814b 	beq.w	8000656 <fsm_automatic+0x3fe>
				mode=MOD_RED;
 80003c0:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <fsm_automatic+0x258>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	701a      	strb	r2, [r3, #0]
				traff1Out=6;
 80003c6:	4b47      	ldr	r3, [pc, #284]	; (80004e4 <fsm_automatic+0x28c>)
 80003c8:	2206      	movs	r2, #6
 80003ca:	701a      	strb	r2, [r3, #0]
				traff2Out=6;
 80003cc:	4b46      	ldr	r3, [pc, #280]	; (80004e8 <fsm_automatic+0x290>)
 80003ce:	2206      	movs	r2, #6
 80003d0:	701a      	strb	r2, [r3, #0]
				buttonFlag[0]=0;
 80003d2:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <fsm_automatic+0x288>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
				buttonFlag[1]=0;
 80003d8:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <fsm_automatic+0x288>)
 80003da:	2200      	movs	r2, #0
 80003dc:	705a      	strb	r2, [r3, #1]
				buttonFlag[2]=0;
 80003de:	4b40      	ldr	r3, [pc, #256]	; (80004e0 <fsm_automatic+0x288>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	709a      	strb	r2, [r3, #2]
			}
			break;
 80003e4:	e137      	b.n	8000656 <fsm_automatic+0x3fe>
		case MOD_RED:
			if(is_button_pressed(0))buttonFlag[0]=1;
 80003e6:	2000      	movs	r0, #0
 80003e8:	f000 fb6e 	bl	8000ac8 <is_button_pressed>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d002      	beq.n	80003f8 <fsm_automatic+0x1a0>
 80003f2:	4b3b      	ldr	r3, [pc, #236]	; (80004e0 <fsm_automatic+0x288>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 fb65 	bl	8000ac8 <is_button_pressed>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d115      	bne.n	8000430 <fsm_automatic+0x1d8>
 8000404:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <fsm_automatic+0x288>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d011      	beq.n	8000430 <fsm_automatic+0x1d8>
				mode=MOD_YELLOW;
 800040c:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <fsm_automatic+0x258>)
 800040e:	2203      	movs	r2, #3
 8000410:	701a      	strb	r2, [r3, #0]
				traff1Out=3;
 8000412:	4b34      	ldr	r3, [pc, #208]	; (80004e4 <fsm_automatic+0x28c>)
 8000414:	2203      	movs	r2, #3
 8000416:	701a      	strb	r2, [r3, #0]
				traff2Out=3;
 8000418:	4b33      	ldr	r3, [pc, #204]	; (80004e8 <fsm_automatic+0x290>)
 800041a:	2203      	movs	r2, #3
 800041c:	701a      	strb	r2, [r3, #0]
				buttonFlag[0]=0;
 800041e:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <fsm_automatic+0x288>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
				buttonFlag[1]=0;
 8000424:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <fsm_automatic+0x288>)
 8000426:	2200      	movs	r2, #0
 8000428:	705a      	strb	r2, [r3, #1]
				buttonFlag[2]=0;
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <fsm_automatic+0x288>)
 800042c:	2200      	movs	r2, #0
 800042e:	709a      	strb	r2, [r3, #2]
			}
			if(is_button_pressed(1))buttonFlag[1]=1;
 8000430:	2001      	movs	r0, #1
 8000432:	f000 fb49 	bl	8000ac8 <is_button_pressed>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <fsm_automatic+0x1ea>
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <fsm_automatic+0x288>)
 800043e:	2201      	movs	r2, #1
 8000440:	705a      	strb	r2, [r3, #1]
			if((!is_button_pressed(1)) && (buttonFlag[1])){
 8000442:	2001      	movs	r0, #1
 8000444:	f000 fb40 	bl	8000ac8 <is_button_pressed>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d112      	bne.n	8000474 <fsm_automatic+0x21c>
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <fsm_automatic+0x288>)
 8000450:	785b      	ldrb	r3, [r3, #1]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d00e      	beq.n	8000474 <fsm_automatic+0x21c>
				durationRedWaiting = durationRedWaiting >= 99 ? 1 : durationRedWaiting + 1;
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <fsm_automatic+0x260>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b62      	cmp	r3, #98	; 0x62
 800045c:	d804      	bhi.n	8000468 <fsm_automatic+0x210>
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <fsm_automatic+0x260>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	b2db      	uxtb	r3, r3
 8000466:	e000      	b.n	800046a <fsm_automatic+0x212>
 8000468:	2301      	movs	r3, #1
 800046a:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <fsm_automatic+0x260>)
 800046c:	7013      	strb	r3, [r2, #0]
				buttonFlag[1]=0;
 800046e:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <fsm_automatic+0x288>)
 8000470:	2200      	movs	r2, #0
 8000472:	705a      	strb	r2, [r3, #1]
			}
			if(is_button_pressed(2))buttonFlag[2]=1;
 8000474:	2002      	movs	r0, #2
 8000476:	f000 fb27 	bl	8000ac8 <is_button_pressed>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <fsm_automatic+0x22e>
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <fsm_automatic+0x288>)
 8000482:	2201      	movs	r2, #1
 8000484:	709a      	strb	r2, [r3, #2]
			if((!is_button_pressed(2)) && (buttonFlag[2])){
 8000486:	2002      	movs	r0, #2
 8000488:	f000 fb1e 	bl	8000ac8 <is_button_pressed>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	f040 80e3 	bne.w	800065a <fsm_automatic+0x402>
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <fsm_automatic+0x288>)
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	2b00      	cmp	r3, #0
 800049a:	f000 80de 	beq.w	800065a <fsm_automatic+0x402>
				durationRed = durationRedWaiting;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <fsm_automatic+0x260>)
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <fsm_automatic+0x25c>)
 80004a4:	701a      	strb	r2, [r3, #0]
				buttonFlag[2]=0;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <fsm_automatic+0x288>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	709a      	strb	r2, [r3, #2]
			}
			break;
 80004ac:	e0d5      	b.n	800065a <fsm_automatic+0x402>
 80004ae:	bf00      	nop
 80004b0:	200000a2 	.word	0x200000a2
 80004b4:	20000001 	.word	0x20000001
 80004b8:	200000c5 	.word	0x200000c5
 80004bc:	20000002 	.word	0x20000002
 80004c0:	200000b5 	.word	0x200000b5
 80004c4:	20000003 	.word	0x20000003
 80004c8:	200000b4 	.word	0x200000b4
 80004cc:	200000c4 	.word	0x200000c4
 80004d0:	200000c0 	.word	0x200000c0
 80004d4:	200000c1 	.word	0x200000c1
 80004d8:	cccccccd 	.word	0xcccccccd
 80004dc:	200000bc 	.word	0x200000bc
 80004e0:	200000b8 	.word	0x200000b8
 80004e4:	200000c3 	.word	0x200000c3
 80004e8:	200000c2 	.word	0x200000c2
		case MOD_YELLOW:
			if(is_button_pressed(0))buttonFlag[0]=1;
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 faeb 	bl	8000ac8 <is_button_pressed>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <fsm_automatic+0x2a6>
 80004f8:	4b5b      	ldr	r3, [pc, #364]	; (8000668 <fsm_automatic+0x410>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 fae2 	bl	8000ac8 <is_button_pressed>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d115      	bne.n	8000536 <fsm_automatic+0x2de>
 800050a:	4b57      	ldr	r3, [pc, #348]	; (8000668 <fsm_automatic+0x410>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d011      	beq.n	8000536 <fsm_automatic+0x2de>
				mode=MOD_GREEN;
 8000512:	4b56      	ldr	r3, [pc, #344]	; (800066c <fsm_automatic+0x414>)
 8000514:	2204      	movs	r2, #4
 8000516:	701a      	strb	r2, [r3, #0]
				traff1Out=3;
 8000518:	4b55      	ldr	r3, [pc, #340]	; (8000670 <fsm_automatic+0x418>)
 800051a:	2203      	movs	r2, #3
 800051c:	701a      	strb	r2, [r3, #0]
				traff2Out=3;
 800051e:	4b55      	ldr	r3, [pc, #340]	; (8000674 <fsm_automatic+0x41c>)
 8000520:	2203      	movs	r2, #3
 8000522:	701a      	strb	r2, [r3, #0]
				buttonFlag[0]=0;
 8000524:	4b50      	ldr	r3, [pc, #320]	; (8000668 <fsm_automatic+0x410>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
				buttonFlag[1]=0;
 800052a:	4b4f      	ldr	r3, [pc, #316]	; (8000668 <fsm_automatic+0x410>)
 800052c:	2200      	movs	r2, #0
 800052e:	705a      	strb	r2, [r3, #1]
				buttonFlag[2]=0;
 8000530:	4b4d      	ldr	r3, [pc, #308]	; (8000668 <fsm_automatic+0x410>)
 8000532:	2200      	movs	r2, #0
 8000534:	709a      	strb	r2, [r3, #2]
			}
			if(is_button_pressed(1))buttonFlag[1]=1;
 8000536:	2001      	movs	r0, #1
 8000538:	f000 fac6 	bl	8000ac8 <is_button_pressed>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <fsm_automatic+0x2f0>
 8000542:	4b49      	ldr	r3, [pc, #292]	; (8000668 <fsm_automatic+0x410>)
 8000544:	2201      	movs	r2, #1
 8000546:	705a      	strb	r2, [r3, #1]
			if((!is_button_pressed(1)) && (buttonFlag[1])){
 8000548:	2001      	movs	r0, #1
 800054a:	f000 fabd 	bl	8000ac8 <is_button_pressed>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d112      	bne.n	800057a <fsm_automatic+0x322>
 8000554:	4b44      	ldr	r3, [pc, #272]	; (8000668 <fsm_automatic+0x410>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00e      	beq.n	800057a <fsm_automatic+0x322>
				durationYellowWaiting = durationYellowWaiting >= 99 ? 1 : durationYellowWaiting + 1;
 800055c:	4b46      	ldr	r3, [pc, #280]	; (8000678 <fsm_automatic+0x420>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b62      	cmp	r3, #98	; 0x62
 8000562:	d804      	bhi.n	800056e <fsm_automatic+0x316>
 8000564:	4b44      	ldr	r3, [pc, #272]	; (8000678 <fsm_automatic+0x420>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2db      	uxtb	r3, r3
 800056c:	e000      	b.n	8000570 <fsm_automatic+0x318>
 800056e:	2301      	movs	r3, #1
 8000570:	4a41      	ldr	r2, [pc, #260]	; (8000678 <fsm_automatic+0x420>)
 8000572:	7013      	strb	r3, [r2, #0]
				buttonFlag[1]=0;
 8000574:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <fsm_automatic+0x410>)
 8000576:	2200      	movs	r2, #0
 8000578:	705a      	strb	r2, [r3, #1]
			}
			if(is_button_pressed(2))buttonFlag[2]=1;
 800057a:	2002      	movs	r0, #2
 800057c:	f000 faa4 	bl	8000ac8 <is_button_pressed>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <fsm_automatic+0x334>
 8000586:	4b38      	ldr	r3, [pc, #224]	; (8000668 <fsm_automatic+0x410>)
 8000588:	2201      	movs	r2, #1
 800058a:	709a      	strb	r2, [r3, #2]
			if((!is_button_pressed(2)) && (buttonFlag[2])){
 800058c:	2002      	movs	r0, #2
 800058e:	f000 fa9b 	bl	8000ac8 <is_button_pressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d162      	bne.n	800065e <fsm_automatic+0x406>
 8000598:	4b33      	ldr	r3, [pc, #204]	; (8000668 <fsm_automatic+0x410>)
 800059a:	789b      	ldrb	r3, [r3, #2]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d05e      	beq.n	800065e <fsm_automatic+0x406>
				durationYellow = durationYellowWaiting;
 80005a0:	4b35      	ldr	r3, [pc, #212]	; (8000678 <fsm_automatic+0x420>)
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	4b35      	ldr	r3, [pc, #212]	; (800067c <fsm_automatic+0x424>)
 80005a6:	701a      	strb	r2, [r3, #0]
				buttonFlag[2]=2;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <fsm_automatic+0x410>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	709a      	strb	r2, [r3, #2]
			}
			break;
 80005ae:	e056      	b.n	800065e <fsm_automatic+0x406>
		case MOD_GREEN:
			if(is_button_pressed(0))buttonFlag[0]=1;
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fa89 	bl	8000ac8 <is_button_pressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <fsm_automatic+0x36a>
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <fsm_automatic+0x410>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
			if((!is_button_pressed(0))&&(buttonFlag[0])){
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fa80 	bl	8000ac8 <is_button_pressed>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <fsm_automatic+0x384>
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <fsm_automatic+0x410>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <fsm_automatic+0x384>
				mode=INIT;
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <fsm_automatic+0x414>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
			}
			if(is_button_pressed(1))buttonFlag[1]=1;
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fa73 	bl	8000ac8 <is_button_pressed>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <fsm_automatic+0x396>
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <fsm_automatic+0x410>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	705a      	strb	r2, [r3, #1]
			if((!is_button_pressed(1)) && (buttonFlag[1])){
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fa6a 	bl	8000ac8 <is_button_pressed>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d112      	bne.n	8000620 <fsm_automatic+0x3c8>
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <fsm_automatic+0x410>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00e      	beq.n	8000620 <fsm_automatic+0x3c8>
				durationGreenWaiting = durationGreenWaiting >= 99 ? 1 : durationGreenWaiting + 1;
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <fsm_automatic+0x428>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b62      	cmp	r3, #98	; 0x62
 8000608:	d804      	bhi.n	8000614 <fsm_automatic+0x3bc>
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <fsm_automatic+0x428>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	e000      	b.n	8000616 <fsm_automatic+0x3be>
 8000614:	2301      	movs	r3, #1
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <fsm_automatic+0x428>)
 8000618:	7013      	strb	r3, [r2, #0]
				buttonFlag[1]=0;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <fsm_automatic+0x410>)
 800061c:	2200      	movs	r2, #0
 800061e:	705a      	strb	r2, [r3, #1]
			}
			if(is_button_pressed(2))buttonFlag[2]=1;
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fa51 	bl	8000ac8 <is_button_pressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <fsm_automatic+0x3da>
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <fsm_automatic+0x410>)
 800062e:	2201      	movs	r2, #1
 8000630:	709a      	strb	r2, [r3, #2]
			if((!is_button_pressed(2)) && (buttonFlag[2])){
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fa48 	bl	8000ac8 <is_button_pressed>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d111      	bne.n	8000662 <fsm_automatic+0x40a>
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <fsm_automatic+0x410>)
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00d      	beq.n	8000662 <fsm_automatic+0x40a>
				durationGreen = durationGreenWaiting;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <fsm_automatic+0x428>)
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <fsm_automatic+0x42c>)
 800064c:	701a      	strb	r2, [r3, #0]
				buttonFlag[2]=0;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <fsm_automatic+0x410>)
 8000650:	2200      	movs	r2, #0
 8000652:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000654:	e005      	b.n	8000662 <fsm_automatic+0x40a>
			break;
 8000656:	bf00      	nop
 8000658:	e004      	b.n	8000664 <fsm_automatic+0x40c>
			break;
 800065a:	bf00      	nop
 800065c:	e002      	b.n	8000664 <fsm_automatic+0x40c>
			break;
 800065e:	bf00      	nop
 8000660:	e000      	b.n	8000664 <fsm_automatic+0x40c>
			break;
 8000662:	bf00      	nop
	}
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000b8 	.word	0x200000b8
 800066c:	200000a2 	.word	0x200000a2
 8000670:	200000c3 	.word	0x200000c3
 8000674:	200000c2 	.word	0x200000c2
 8000678:	200000b5 	.word	0x200000b5
 800067c:	20000002 	.word	0x20000002
 8000680:	200000b4 	.word	0x200000b4
 8000684:	20000003 	.word	0x20000003

08000688 <led_processing>:

//Function for handling LEDs
void led_processing(){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	switch(mode){
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <led_processing+0xf4>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b04      	cmp	r3, #4
 8000692:	d02c      	beq.n	80006ee <led_processing+0x66>
 8000694:	2b04      	cmp	r3, #4
 8000696:	dc3d      	bgt.n	8000714 <led_processing+0x8c>
 8000698:	2b02      	cmp	r3, #2
 800069a:	d002      	beq.n	80006a2 <led_processing+0x1a>
 800069c:	2b03      	cmp	r3, #3
 800069e:	d013      	beq.n	80006c8 <led_processing+0x40>
 80006a0:	e038      	b.n	8000714 <led_processing+0x8c>
		case MOD_RED:
			traff1Out=traff1Out==6?7:6;
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <led_processing+0xf8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d101      	bne.n	80006ae <led_processing+0x26>
 80006aa:	2207      	movs	r2, #7
 80006ac:	e000      	b.n	80006b0 <led_processing+0x28>
 80006ae:	2206      	movs	r2, #6
 80006b0:	4b33      	ldr	r3, [pc, #204]	; (8000780 <led_processing+0xf8>)
 80006b2:	701a      	strb	r2, [r3, #0]
			traff2Out=traff2Out==6?7:6;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <led_processing+0xfc>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d101      	bne.n	80006c0 <led_processing+0x38>
 80006bc:	2207      	movs	r2, #7
 80006be:	e000      	b.n	80006c2 <led_processing+0x3a>
 80006c0:	2206      	movs	r2, #6
 80006c2:	4b30      	ldr	r3, [pc, #192]	; (8000784 <led_processing+0xfc>)
 80006c4:	701a      	strb	r2, [r3, #0]
			break;
 80006c6:	e025      	b.n	8000714 <led_processing+0x8c>
		case MOD_YELLOW:
			traff1Out=traff1Out==5?7:5;
 80006c8:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <led_processing+0xf8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b05      	cmp	r3, #5
 80006ce:	d101      	bne.n	80006d4 <led_processing+0x4c>
 80006d0:	2207      	movs	r2, #7
 80006d2:	e000      	b.n	80006d6 <led_processing+0x4e>
 80006d4:	2205      	movs	r2, #5
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <led_processing+0xf8>)
 80006d8:	701a      	strb	r2, [r3, #0]
			traff2Out=traff2Out==5?7:5;
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <led_processing+0xfc>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b05      	cmp	r3, #5
 80006e0:	d101      	bne.n	80006e6 <led_processing+0x5e>
 80006e2:	2207      	movs	r2, #7
 80006e4:	e000      	b.n	80006e8 <led_processing+0x60>
 80006e6:	2205      	movs	r2, #5
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <led_processing+0xfc>)
 80006ea:	701a      	strb	r2, [r3, #0]
			break;
 80006ec:	e012      	b.n	8000714 <led_processing+0x8c>
		case MOD_GREEN:
			traff1Out=traff1Out==3?7:3;
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <led_processing+0xf8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d101      	bne.n	80006fa <led_processing+0x72>
 80006f6:	2207      	movs	r2, #7
 80006f8:	e000      	b.n	80006fc <led_processing+0x74>
 80006fa:	2203      	movs	r2, #3
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <led_processing+0xf8>)
 80006fe:	701a      	strb	r2, [r3, #0]
			traff2Out=traff2Out==3?7:3;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <led_processing+0xfc>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b03      	cmp	r3, #3
 8000706:	d101      	bne.n	800070c <led_processing+0x84>
 8000708:	2207      	movs	r2, #7
 800070a:	e000      	b.n	800070e <led_processing+0x86>
 800070c:	2203      	movs	r2, #3
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <led_processing+0xfc>)
 8000710:	701a      	strb	r2, [r3, #0]
			break;
 8000712:	bf00      	nop
	}
	if(mode!=NORMAL)return;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <led_processing+0xf4>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d12b      	bne.n	8000774 <led_processing+0xec>
	switch(traffCond){
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <led_processing+0x100>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d828      	bhi.n	8000776 <led_processing+0xee>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <led_processing+0xa4>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800073d 	.word	0x0800073d
 8000730:	0800074b 	.word	0x0800074b
 8000734:	08000759 	.word	0x08000759
 8000738:	08000767 	.word	0x08000767
		case RG:
			traff1Out=6;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <led_processing+0xf8>)
 800073e:	2206      	movs	r2, #6
 8000740:	701a      	strb	r2, [r3, #0]
			traff2Out=3;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <led_processing+0xfc>)
 8000744:	2203      	movs	r2, #3
 8000746:	701a      	strb	r2, [r3, #0]
			break;
 8000748:	e015      	b.n	8000776 <led_processing+0xee>
		case RY:
			traff1Out=6;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <led_processing+0xf8>)
 800074c:	2206      	movs	r2, #6
 800074e:	701a      	strb	r2, [r3, #0]
			traff2Out=5;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <led_processing+0xfc>)
 8000752:	2205      	movs	r2, #5
 8000754:	701a      	strb	r2, [r3, #0]
			break;
 8000756:	e00e      	b.n	8000776 <led_processing+0xee>
		case GR:
			traff1Out=3;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <led_processing+0xf8>)
 800075a:	2203      	movs	r2, #3
 800075c:	701a      	strb	r2, [r3, #0]
			traff2Out=6;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <led_processing+0xfc>)
 8000760:	2206      	movs	r2, #6
 8000762:	701a      	strb	r2, [r3, #0]
			break;
 8000764:	e007      	b.n	8000776 <led_processing+0xee>
		case YR:
			traff1Out=5;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <led_processing+0xf8>)
 8000768:	2205      	movs	r2, #5
 800076a:	701a      	strb	r2, [r3, #0]
			traff2Out=6;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <led_processing+0xfc>)
 800076e:	2206      	movs	r2, #6
 8000770:	701a      	strb	r2, [r3, #0]
			break;
 8000772:	e000      	b.n	8000776 <led_processing+0xee>
	if(mode!=NORMAL)return;
 8000774:	bf00      	nop
	}
}
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	200000a2 	.word	0x200000a2
 8000780:	200000c3 	.word	0x200000c3
 8000784:	200000c2 	.word	0x200000c2
 8000788:	200000c1 	.word	0x200000c1

0800078c <buffer_processing>:

//Function for handling 7 segments LED buffer & decreasing the time
void buffer_processing(){
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
	switch(mode){
 8000790:	4b95      	ldr	r3, [pc, #596]	; (80009e8 <buffer_processing+0x25c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d065      	beq.n	8000864 <buffer_processing+0xd8>
 8000798:	2b04      	cmp	r3, #4
 800079a:	f300 8092 	bgt.w	80008c2 <buffer_processing+0x136>
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d002      	beq.n	80007a8 <buffer_processing+0x1c>
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d02f      	beq.n	8000806 <buffer_processing+0x7a>
 80007a6:	e08c      	b.n	80008c2 <buffer_processing+0x136>
		case MOD_RED:
			led_buffer[0]=durationRedWaiting/10;
 80007a8:	4b90      	ldr	r3, [pc, #576]	; (80009ec <buffer_processing+0x260>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4a90      	ldr	r2, [pc, #576]	; (80009f0 <buffer_processing+0x264>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b8f      	ldr	r3, [pc, #572]	; (80009f4 <buffer_processing+0x268>)
 80007b8:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationRedWaiting%10;
 80007ba:	4b8c      	ldr	r3, [pc, #560]	; (80009ec <buffer_processing+0x260>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <buffer_processing+0x264>)
 80007c0:	fba3 1302 	umull	r1, r3, r3, r2
 80007c4:	08d9      	lsrs	r1, r3, #3
 80007c6:	460b      	mov	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b88      	ldr	r3, [pc, #544]	; (80009f4 <buffer_processing+0x268>)
 80007d4:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationRedWaiting/10;
 80007d6:	4b85      	ldr	r3, [pc, #532]	; (80009ec <buffer_processing+0x260>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4a85      	ldr	r2, [pc, #532]	; (80009f0 <buffer_processing+0x264>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b83      	ldr	r3, [pc, #524]	; (80009f4 <buffer_processing+0x268>)
 80007e6:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationRedWaiting%10;
 80007e8:	4b80      	ldr	r3, [pc, #512]	; (80009ec <buffer_processing+0x260>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b80      	ldr	r3, [pc, #512]	; (80009f0 <buffer_processing+0x264>)
 80007ee:	fba3 1302 	umull	r1, r3, r3, r2
 80007f2:	08d9      	lsrs	r1, r3, #3
 80007f4:	460b      	mov	r3, r1
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	440b      	add	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <buffer_processing+0x268>)
 8000802:	70da      	strb	r2, [r3, #3]
			break;
 8000804:	e05d      	b.n	80008c2 <buffer_processing+0x136>
		case MOD_YELLOW:
			led_buffer[0]=durationYellowWaiting/10;
 8000806:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <buffer_processing+0x26c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4a79      	ldr	r2, [pc, #484]	; (80009f0 <buffer_processing+0x264>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b77      	ldr	r3, [pc, #476]	; (80009f4 <buffer_processing+0x268>)
 8000816:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationYellowWaiting%10;
 8000818:	4b77      	ldr	r3, [pc, #476]	; (80009f8 <buffer_processing+0x26c>)
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	4b74      	ldr	r3, [pc, #464]	; (80009f0 <buffer_processing+0x264>)
 800081e:	fba3 1302 	umull	r1, r3, r3, r2
 8000822:	08d9      	lsrs	r1, r3, #3
 8000824:	460b      	mov	r3, r1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b70      	ldr	r3, [pc, #448]	; (80009f4 <buffer_processing+0x268>)
 8000832:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationYellowWaiting/10;
 8000834:	4b70      	ldr	r3, [pc, #448]	; (80009f8 <buffer_processing+0x26c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4a6d      	ldr	r2, [pc, #436]	; (80009f0 <buffer_processing+0x264>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b6c      	ldr	r3, [pc, #432]	; (80009f4 <buffer_processing+0x268>)
 8000844:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationYellowWaiting%10;
 8000846:	4b6c      	ldr	r3, [pc, #432]	; (80009f8 <buffer_processing+0x26c>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <buffer_processing+0x264>)
 800084c:	fba3 1302 	umull	r1, r3, r3, r2
 8000850:	08d9      	lsrs	r1, r3, #3
 8000852:	460b      	mov	r3, r1
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	440b      	add	r3, r1
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b65      	ldr	r3, [pc, #404]	; (80009f4 <buffer_processing+0x268>)
 8000860:	70da      	strb	r2, [r3, #3]
			break;
 8000862:	e02e      	b.n	80008c2 <buffer_processing+0x136>
		case MOD_GREEN:
			led_buffer[0]=durationGreenWaiting/10;
 8000864:	4b65      	ldr	r3, [pc, #404]	; (80009fc <buffer_processing+0x270>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4a61      	ldr	r2, [pc, #388]	; (80009f0 <buffer_processing+0x264>)
 800086a:	fba2 2303 	umull	r2, r3, r2, r3
 800086e:	08db      	lsrs	r3, r3, #3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b60      	ldr	r3, [pc, #384]	; (80009f4 <buffer_processing+0x268>)
 8000874:	701a      	strb	r2, [r3, #0]
			led_buffer[1]=durationGreenWaiting%10;
 8000876:	4b61      	ldr	r3, [pc, #388]	; (80009fc <buffer_processing+0x270>)
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <buffer_processing+0x264>)
 800087c:	fba3 1302 	umull	r1, r3, r3, r2
 8000880:	08d9      	lsrs	r1, r3, #3
 8000882:	460b      	mov	r3, r1
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <buffer_processing+0x268>)
 8000890:	705a      	strb	r2, [r3, #1]
			led_buffer[2]=durationGreenWaiting/10;
 8000892:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <buffer_processing+0x270>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4a56      	ldr	r2, [pc, #344]	; (80009f0 <buffer_processing+0x264>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b54      	ldr	r3, [pc, #336]	; (80009f4 <buffer_processing+0x268>)
 80008a2:	709a      	strb	r2, [r3, #2]
			led_buffer[3]=durationGreenWaiting%10;
 80008a4:	4b55      	ldr	r3, [pc, #340]	; (80009fc <buffer_processing+0x270>)
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	4b51      	ldr	r3, [pc, #324]	; (80009f0 <buffer_processing+0x264>)
 80008aa:	fba3 1302 	umull	r1, r3, r3, r2
 80008ae:	08d9      	lsrs	r1, r3, #3
 80008b0:	460b      	mov	r3, r1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <buffer_processing+0x268>)
 80008be:	70da      	strb	r2, [r3, #3]
			break;
 80008c0:	bf00      	nop
	}
	if(mode!=NORMAL)return;
 80008c2:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <buffer_processing+0x25c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f040 808a 	bne.w	80009e0 <buffer_processing+0x254>
	light1Time--;
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <buffer_processing+0x274>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <buffer_processing+0x274>)
 80008d6:	701a      	strb	r2, [r3, #0]
	light2Time--;
 80008d8:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <buffer_processing+0x278>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <buffer_processing+0x278>)
 80008e2:	701a      	strb	r2, [r3, #0]
	switch(traffCond){
 80008e4:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <buffer_processing+0x27c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d84a      	bhi.n	8000982 <buffer_processing+0x1f6>
 80008ec:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <buffer_processing+0x168>)
 80008ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f2:	bf00      	nop
 80008f4:	08000905 	.word	0x08000905
 80008f8:	0800091d 	.word	0x0800091d
 80008fc:	0800093d 	.word	0x0800093d
 8000900:	08000955 	.word	0x08000955
		case RG:
			if(light2Time<=0){
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <buffer_processing+0x278>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d133      	bne.n	8000974 <buffer_processing+0x1e8>
				traffCond=RY;
 800090c:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <buffer_processing+0x27c>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
				light2Time=durationYellow;
 8000912:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <buffer_processing+0x280>)
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <buffer_processing+0x278>)
 8000918:	701a      	strb	r2, [r3, #0]
			}
			break;
 800091a:	e02b      	b.n	8000974 <buffer_processing+0x1e8>
		case RY:
			if(light1Time<=0){
 800091c:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <buffer_processing+0x274>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d129      	bne.n	8000978 <buffer_processing+0x1ec>
				traffCond=GR;
 8000924:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <buffer_processing+0x27c>)
 8000926:	2202      	movs	r2, #2
 8000928:	701a      	strb	r2, [r3, #0]
				light1Time=durationGreen;
 800092a:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <buffer_processing+0x284>)
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <buffer_processing+0x274>)
 8000930:	701a      	strb	r2, [r3, #0]
				light2Time=durationRed;
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <buffer_processing+0x288>)
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	4b33      	ldr	r3, [pc, #204]	; (8000a04 <buffer_processing+0x278>)
 8000938:	701a      	strb	r2, [r3, #0]
			}
			break;
 800093a:	e01d      	b.n	8000978 <buffer_processing+0x1ec>
		case GR:
			if(light1Time<=0){
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <buffer_processing+0x274>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d11b      	bne.n	800097c <buffer_processing+0x1f0>
				traffCond=YR;
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <buffer_processing+0x27c>)
 8000946:	2203      	movs	r2, #3
 8000948:	701a      	strb	r2, [r3, #0]
				light1Time=durationYellow;
 800094a:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <buffer_processing+0x280>)
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <buffer_processing+0x274>)
 8000950:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000952:	e013      	b.n	800097c <buffer_processing+0x1f0>
		case YR:
			if(light2Time<=0){
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <buffer_processing+0x278>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d111      	bne.n	8000980 <buffer_processing+0x1f4>
				traffCond=RG;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <buffer_processing+0x27c>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
				light1Time=durationRed;
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <buffer_processing+0x288>)
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <buffer_processing+0x274>)
 8000968:	701a      	strb	r2, [r3, #0]
				light2Time=durationGreen;
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <buffer_processing+0x284>)
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <buffer_processing+0x278>)
 8000970:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000972:	e005      	b.n	8000980 <buffer_processing+0x1f4>
			break;
 8000974:	bf00      	nop
 8000976:	e004      	b.n	8000982 <buffer_processing+0x1f6>
			break;
 8000978:	bf00      	nop
 800097a:	e002      	b.n	8000982 <buffer_processing+0x1f6>
			break;
 800097c:	bf00      	nop
 800097e:	e000      	b.n	8000982 <buffer_processing+0x1f6>
			break;
 8000980:	bf00      	nop
	}
	led_buffer[0]=light1Time/10;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <buffer_processing+0x274>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <buffer_processing+0x264>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <buffer_processing+0x268>)
 8000992:	701a      	strb	r2, [r3, #0]
	led_buffer[1]=light1Time%10;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <buffer_processing+0x274>)
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <buffer_processing+0x264>)
 800099a:	fba3 1302 	umull	r1, r3, r3, r2
 800099e:	08d9      	lsrs	r1, r3, #3
 80009a0:	460b      	mov	r3, r1
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <buffer_processing+0x268>)
 80009ae:	705a      	strb	r2, [r3, #1]
	led_buffer[2]=light2Time/10;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <buffer_processing+0x278>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <buffer_processing+0x264>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <buffer_processing+0x268>)
 80009c0:	709a      	strb	r2, [r3, #2]
	led_buffer[3]=light2Time%10;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <buffer_processing+0x278>)
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <buffer_processing+0x264>)
 80009c8:	fba3 1302 	umull	r1, r3, r3, r2
 80009cc:	08d9      	lsrs	r1, r3, #3
 80009ce:	460b      	mov	r3, r1
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	440b      	add	r3, r1
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <buffer_processing+0x268>)
 80009dc:	70da      	strb	r2, [r3, #3]
 80009de:	e000      	b.n	80009e2 <buffer_processing+0x256>
	if(mode!=NORMAL)return;
 80009e0:	bf00      	nop
}
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	200000a2 	.word	0x200000a2
 80009ec:	200000c5 	.word	0x200000c5
 80009f0:	cccccccd 	.word	0xcccccccd
 80009f4:	200000bc 	.word	0x200000bc
 80009f8:	200000b5 	.word	0x200000b5
 80009fc:	200000b4 	.word	0x200000b4
 8000a00:	200000c4 	.word	0x200000c4
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	200000c1 	.word	0x200000c1
 8000a0c:	20000002 	.word	0x20000002
 8000a10:	20000003 	.word	0x20000003
 8000a14:	20000001 	.word	0x20000001

08000a18 <button_reading>:
GPIO_PinState debounceButtonBuffer1[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};
GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};
GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};
GPIO_PinState debounceButtonBuffer4[N0_OF_BUTTONS]={BUTTON_IS_RELEASED,BUTTON_IS_RELEASED,BUTTON_IS_RELEASED};

void button_reading(){
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
 8000a22:	e03f      	b.n	8000aa4 <button_reading+0x8c>
		debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4922      	ldr	r1, [pc, #136]	; (8000ab4 <button_reading+0x9c>)
 8000a2a:	5c89      	ldrb	r1, [r1, r2]
 8000a2c:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <button_reading+0xa0>)
 8000a2e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4921      	ldr	r1, [pc, #132]	; (8000abc <button_reading+0xa4>)
 8000a36:	5c89      	ldrb	r1, [r1, r2]
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <button_reading+0x9c>)
 8000a3a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	491f      	ldr	r1, [pc, #124]	; (8000ac0 <button_reading+0xa8>)
 8000a42:	5c89      	ldrb	r1, [r1, r2]
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <button_reading+0xa4>)
 8000a46:	54d1      	strb	r1, [r2, r3]
		switch(i){
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d01c      	beq.n	8000a88 <button_reading+0x70>
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	dc25      	bgt.n	8000a9e <button_reading+0x86>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <button_reading+0x44>
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d00b      	beq.n	8000a72 <button_reading+0x5a>
 8000a5a:	e020      	b.n	8000a9e <button_reading+0x86>
			case 0:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW0_GPIO_Port, SW0_Pin);
 8000a5c:	79fc      	ldrb	r4, [r7, #7]
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <button_reading+0xac>)
 8000a64:	f001 f852 	bl	8001b0c <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <button_reading+0xa8>)
 8000a6e:	551a      	strb	r2, [r3, r4]
				break;
 8000a70:	e015      	b.n	8000a9e <button_reading+0x86>
			case 1:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 8000a72:	79fc      	ldrb	r4, [r7, #7]
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <button_reading+0xac>)
 8000a7a:	f001 f847 	bl	8001b0c <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <button_reading+0xa8>)
 8000a84:	551a      	strb	r2, [r3, r4]
				break;
 8000a86:	e00a      	b.n	8000a9e <button_reading+0x86>
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 8000a88:	79fc      	ldrb	r4, [r7, #7]
 8000a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <button_reading+0xac>)
 8000a90:	f001 f83c 	bl	8001b0c <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <button_reading+0xa8>)
 8000a9a:	551a      	strb	r2, [r3, r4]
				break;
 8000a9c:	bf00      	nop
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i ++){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d9bc      	bls.n	8000a24 <button_reading+0xc>
		}
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	20000010 	.word	0x20000010
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <is_button_pressed>:

uint8_t is_button_pressed(uint8_t index){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d901      	bls.n	8000adc <is_button_pressed+0x14>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e007      	b.n	8000aec <is_button_pressed+0x24>
	return (debounceButtonBuffer4[index]==BUTTON_IS_PRESSED);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <is_button_pressed+0x30>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2301      	moveq	r3, #1
 8000ae8:	2300      	movne	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000010 	.word	0x20000010

08000afc <testAt0>:
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
		if(temp=='!') end_flag = 1;
	}
}*/

void testAt0(){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(TEST0_GPIO_Port, TEST0_Pin);
 8000b00:	2101      	movs	r1, #1
 8000b02:	4802      	ldr	r0, [pc, #8]	; (8000b0c <testAt0+0x10>)
 8000b04:	f001 f831 	bl	8001b6a <HAL_GPIO_TogglePin>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40010800 	.word	0x40010800

08000b10 <testAt1>:

void testAt1(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(TEST1_GPIO_Port, TEST1_Pin);
 8000b14:	2102      	movs	r1, #2
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <testAt1+0x1c>)
 8000b18:	f001 f827 	bl	8001b6a <HAL_GPIO_TogglePin>
	SCH_Delete_Task(test1Index);
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <testAt1+0x20>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fac1 	bl	80010a8 <SCH_Delete_Task>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	200000c8 	.word	0x200000c8

08000b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b38:	f000 fc4e 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3c:	f000 f84e 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000b40:	f000 f888 	bl	8000c54 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000b44:	f000 f8fc 	bl	8000d40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b48:	f000 f8d0 	bl	8000cec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b4c:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <main+0x80>)
 8000b4e:	f001 fc8f 	bl	8002470 <HAL_TIM_Base_Start_IT>
  //HAL_UART_Receive_IT(&huart2, &temp, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(testAt0, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <main+0x84>)
 8000b58:	f000 f9c2 	bl	8000ee0 <SCH_Add_Task>
  test1Index = SCH_Add_Task(testAt1, 10, 1000);
 8000b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b60:	210a      	movs	r1, #10
 8000b62:	4816      	ldr	r0, [pc, #88]	; (8000bbc <main+0x88>)
 8000b64:	f000 f9bc 	bl	8000ee0 <SCH_Add_Task>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <main+0x8c>)
 8000b6c:	6013      	str	r3, [r2, #0]
  SCH_Add_Task(button_reading, 21, 10);
 8000b6e:	220a      	movs	r2, #10
 8000b70:	2115      	movs	r1, #21
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <main+0x90>)
 8000b74:	f000 f9b4 	bl	8000ee0 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 31, MAIN_MODE_PERIOD);
 8000b78:	2232      	movs	r2, #50	; 0x32
 8000b7a:	211f      	movs	r1, #31
 8000b7c:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <main+0x94>)
 8000b7e:	f000 f9af 	bl	8000ee0 <SCH_Add_Task>
  SCH_Add_Task(buffer_processing, 51, 1000);
 8000b82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b86:	2133      	movs	r1, #51	; 0x33
 8000b88:	4810      	ldr	r0, [pc, #64]	; (8000bcc <main+0x98>)
 8000b8a:	f000 f9a9 	bl	8000ee0 <SCH_Add_Task>
  SCH_Add_Task(led_processing, 71, 250);
 8000b8e:	22fa      	movs	r2, #250	; 0xfa
 8000b90:	2147      	movs	r1, #71	; 0x47
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <main+0x9c>)
 8000b94:	f000 f9a4 	bl	8000ee0 <SCH_Add_Task>
  SCH_Add_Task(update7SegMain, 111, 250);
 8000b98:	22fa      	movs	r2, #250	; 0xfa
 8000b9a:	216f      	movs	r1, #111	; 0x6f
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <main+0xa0>)
 8000b9e:	f000 f99f 	bl	8000ee0 <SCH_Add_Task>
  SCH_Add_Task(displayAll, 131, 10);
 8000ba2:	220a      	movs	r2, #10
 8000ba4:	2183      	movs	r1, #131	; 0x83
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <main+0xa4>)
 8000ba8:	f000 f99a 	bl	8000ee0 <SCH_Add_Task>
  {
	  //char str[40];
	  //HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Dispatching task\r\n"), 200);
	  //if(end_flag)SCH_Force_End();
	  //else
	  SCH_Dispatch_Tasks();
 8000bac:	f000 fa2a 	bl	8001004 <SCH_Dispatch_Tasks>
 8000bb0:	e7fc      	b.n	8000bac <main+0x78>
 8000bb2:	bf00      	nop
 8000bb4:	200000cc 	.word	0x200000cc
 8000bb8:	08000afd 	.word	0x08000afd
 8000bbc:	08000b11 	.word	0x08000b11
 8000bc0:	200000c8 	.word	0x200000c8
 8000bc4:	08000a19 	.word	0x08000a19
 8000bc8:	08000259 	.word	0x08000259
 8000bcc:	0800078d 	.word	0x0800078d
 8000bd0:	08000689 	.word	0x08000689
 8000bd4:	080001e1 	.word	0x080001e1
 8000bd8:	08000211 	.word	0x08000211

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	2228      	movs	r2, #40	; 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 fce6 	bl	80035bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c06:	2310      	movs	r3, #16
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 ffc2 	bl	8001b9c <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c1e:	f000 f8fd 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fa2e 	bl	800209c <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c46:	f000 f8e9 	bl	8000e1c <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3740      	adds	r7, #64	; 0x40
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c7a:	f240 321f 	movw	r2, #799	; 0x31f
 8000c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c88:	2263      	movs	r2, #99	; 0x63
 8000c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c98:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000c9a:	f001 fb99 	bl	80023d0 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ca4:	f000 f8ba 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000cb6:	f001 fd2f 	bl	8002718 <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cc0:	f000 f8ac 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_TIM2_Init+0x94>)
 8000cd2:	f001 fef7 	bl	8002ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f000 f89e 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000cc 	.word	0x200000cc

08000cec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_USART2_UART_Init+0x50>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f001 ff38 	bl	8002b98 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d2e:	f000 f875 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000114 	.word	0x20000114
 8000d3c:	40004400 	.word	0x40004400

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <MX_GPIO_Init+0xbc>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <MX_GPIO_Init+0xbc>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <MX_GPIO_Init+0xbc>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <MX_GPIO_Init+0xbc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <MX_GPIO_Init+0xbc>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <MX_GPIO_Init+0xbc>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST0_Pin|TEST1_Pin|RED1_Pin|YELLOW1_Pin
 8000d84:	2200      	movs	r2, #0
 8000d86:	f247 0173 	movw	r1, #28787	; 0x7073
 8000d8a:	481d      	ldr	r0, [pc, #116]	; (8000e00 <MX_GPIO_Init+0xc0>)
 8000d8c:	f000 fed5 	bl	8001b3a <HAL_GPIO_WritePin>
                          |GREEN1_Pin|RED0_Pin|YELLOW0_Pin|GREEN0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG00_Pin|SEG01_Pin|SEG02_Pin|EN2_Pin
 8000d90:	2200      	movs	r2, #0
 8000d92:	f640 717f 	movw	r1, #3967	; 0xf7f
 8000d96:	481b      	ldr	r0, [pc, #108]	; (8000e04 <MX_GPIO_Init+0xc4>)
 8000d98:	f000 fecf 	bl	8001b3a <HAL_GPIO_WritePin>
                          |EN3_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TEST0_Pin TEST1_Pin RED1_Pin YELLOW1_Pin
                           GREEN1_Pin RED0_Pin YELLOW0_Pin GREEN0_Pin */
  GPIO_InitStruct.Pin = TEST0_Pin|TEST1_Pin|RED1_Pin|YELLOW1_Pin
 8000d9c:	f247 0373 	movw	r3, #28787	; 0x7073
 8000da0:	60bb      	str	r3, [r7, #8]
                          |GREEN1_Pin|RED0_Pin|YELLOW0_Pin|GREEN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2302      	movs	r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	4619      	mov	r1, r3
 8000db4:	4812      	ldr	r0, [pc, #72]	; (8000e00 <MX_GPIO_Init+0xc0>)
 8000db6:	f000 fd2f 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG00_Pin SEG01_Pin SEG02_Pin EN2_Pin
                           EN3_Pin SEG03_Pin SEG04_Pin SEG05_Pin
                           SEG06_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = SEG00_Pin|SEG01_Pin|SEG02_Pin|EN2_Pin
 8000dba:	f640 737f 	movw	r3, #3967	; 0xf7f
 8000dbe:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480c      	ldr	r0, [pc, #48]	; (8000e04 <MX_GPIO_Init+0xc4>)
 8000dd4:	f000 fd20 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin;
 8000dd8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ddc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_GPIO_Init+0xc0>)
 8000dee:	f000 fd13 	bl	8001818 <HAL_GPIO_Init>

}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	//if(!end_flag){
		SCH_Update();
 8000e10:	f000 f8cc 	bl	8000fac <SCH_Update>
		//uint32_t currentTick = HAL_GetTick();
		//uint32_t elapsed = currentTick - triggerCallback;
		//triggerCallback = currentTick;
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ELAPSED TIME: %lu\r\n", elapsed), 50);
	//}
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <SCH_Find_Position>:
}*sTaskList = 0;

char str[100];
uint8_t tracker[MAX_SCHEDULER_TASKS], mutex_lock;

void SCH_Find_Position(struct sTask *index){
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	if(index == sTaskList){
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <SCH_Find_Position+0xb4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d04b      	beq.n	8000ed2 <SCH_Find_Position+0xaa>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: only 1 task\r\n"), 200);
		return;
	}
	struct sTask *iterator = sTaskList;
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <SCH_Find_Position+0xb4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	60fb      	str	r3, [r7, #12]
	//Not yet found position
	uint8_t check = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	72fb      	strb	r3, [r7, #11]
	while(iterator->delay <= index->delay){
 8000e44:	e014      	b.n	8000e70 <SCH_Find_Position+0x48>
		if(iterator == sTaskList) check += 1;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <SCH_Find_Position+0xb4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d102      	bne.n	8000e56 <SCH_Find_Position+0x2e>
 8000e50:	7afb      	ldrb	r3, [r7, #11]
 8000e52:	3301      	adds	r3, #1
 8000e54:	72fb      	strb	r3, [r7, #11]
		if(check == 2) break;
 8000e56:	7afb      	ldrb	r3, [r7, #11]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d010      	beq.n	8000e7e <SCH_Find_Position+0x56>
		index->delay -= iterator->delay;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	1ad2      	subs	r2, r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60da      	str	r2, [r3, #12]
		iterator = iterator->right;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	60fb      	str	r3, [r7, #12]
	while(iterator->delay <= index->delay){
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d9e4      	bls.n	8000e46 <SCH_Find_Position+0x1e>
 8000e7c:	e000      	b.n	8000e80 <SCH_Find_Position+0x58>
		if(check == 2) break;
 8000e7e:	bf00      	nop
	}
	//Found position
	if(index->delay == 0) index->run_flag = 1;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <SCH_Find_Position+0x66>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	761a      	strb	r2, [r3, #24]
	index->right = iterator;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	605a      	str	r2, [r3, #4]
	index->left = iterator->left;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	601a      	str	r2, [r3, #0]
	iterator->left->right = index;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	605a      	str	r2, [r3, #4]
	iterator->left = index;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
	//Update the immediately after
	if(iterator != sTaskList){
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <SCH_Find_Position+0xb4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d00f      	beq.n	8000ed4 <SCH_Find_Position+0xac>
		iterator->delay -= index->delay;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	60da      	str	r2, [r3, #12]
		if(iterator->delay == 0) iterator->run_flag = 1;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d104      	bne.n	8000ed4 <SCH_Find_Position+0xac>
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	761a      	strb	r2, [r3, #24]
 8000ed0:	e000      	b.n	8000ed4 <SCH_Find_Position+0xac>
		return;
 8000ed2:	bf00      	nop
	}
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: %lu %lu\r\n", index->taskID, index->delay), 200);
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: Before %lu %lu\r\n", index->left->taskID, index->left->delay), 200);
	//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "FIND POSITION: After %lu %lu\r\n", index->right->taskID, index->right->delay), 200);
}
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	200000a4 	.word	0x200000a4

08000ee0 <SCH_Add_Task>:

int SCH_Add_Task(void (*funcPointer)(), uint32_t delay, uint32_t period){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	if(!funcPointer){
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <SCH_Add_Task+0x18>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Function pointer invalid\r\n"), 200);
		return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e04d      	b.n	8000f94 <SCH_Add_Task+0xb4>
	}
	uint32_t runnerID = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
	while((runnerID < MAX_SCHEDULER_TASKS) && (tracker[runnerID])){
 8000efc:	e002      	b.n	8000f04 <SCH_Add_Task+0x24>
		runnerID += 1;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
	while((runnerID < MAX_SCHEDULER_TASKS) && (tracker[runnerID])){
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b27      	cmp	r3, #39	; 0x27
 8000f08:	d805      	bhi.n	8000f16 <SCH_Add_Task+0x36>
 8000f0a:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <SCH_Add_Task+0xbc>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f3      	bne.n	8000efe <SCH_Add_Task+0x1e>
	}
	if(runnerID == MAX_SCHEDULER_TASKS){
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b28      	cmp	r3, #40	; 0x28
 8000f1a:	d102      	bne.n	8000f22 <SCH_Add_Task+0x42>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Scheduler full\r\n"), 200);
		return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	e038      	b.n	8000f94 <SCH_Add_Task+0xb4>
	}else tracker[runnerID] = 1;
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <SCH_Add_Task+0xbc>)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	4413      	add	r3, r2
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
	mutex_lock = 1;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <SCH_Add_Task+0xc0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
	struct sTask *curTask = (struct sTask*)malloc(sizeof(struct sTask));
 8000f32:	201c      	movs	r0, #28
 8000f34:	f002 fb32 	bl	800359c <malloc>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	613b      	str	r3, [r7, #16]
	curTask->delay = delay/TIMER_INTERRUPT_PERIOD;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <SCH_Add_Task+0xc4>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	60da      	str	r2, [r3, #12]
	curTask->period = period/TIMER_INTERRUPT_PERIOD;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a15      	ldr	r2, [pc, #84]	; (8000fa4 <SCH_Add_Task+0xc4>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	611a      	str	r2, [r3, #16]
	curTask->funcPointer = funcPointer;
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	609a      	str	r2, [r3, #8]
	curTask->taskID = runnerID;
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	615a      	str	r2, [r3, #20]
	curTask->run_flag = 0;
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	2200      	movs	r2, #0
 8000f68:	761a      	strb	r2, [r3, #24]
	if(sTaskList){
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <SCH_Add_Task+0xc8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <SCH_Add_Task+0x9a>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added %lu\r\n", curTask->taskID), 200);
		SCH_Find_Position(curTask);
 8000f72:	6938      	ldr	r0, [r7, #16]
 8000f74:	f7ff ff58 	bl	8000e28 <SCH_Find_Position>
 8000f78:	e008      	b.n	8000f8c <SCH_Add_Task+0xac>
	}else{
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "ADD TASK: Added first %lu\r\n", curTask->taskID), 200);
		curTask->left = curTask;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	601a      	str	r2, [r3, #0]
		curTask->right = curTask;
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
		sTaskList = curTask;
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <SCH_Add_Task+0xc8>)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	6013      	str	r3, [r2, #0]
	}
	mutex_lock = 0;
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SCH_Add_Task+0xc0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
	return runnerID;
 8000f92:	697b      	ldr	r3, [r7, #20]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200001c0 	.word	0x200001c0
 8000fa0:	20000158 	.word	0x20000158
 8000fa4:	cccccccd 	.word	0xcccccccd
 8000fa8:	200000a4 	.word	0x200000a4

08000fac <SCH_Update>:

void SCH_Update(){
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
	if((sTaskList) && (!sTaskList->run_flag) && (!mutex_lock)){
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <SCH_Update+0x50>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01d      	beq.n	8000ff4 <SCH_Update+0x48>
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <SCH_Update+0x50>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	7e1b      	ldrb	r3, [r3, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d118      	bne.n	8000ff4 <SCH_Update+0x48>
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <SCH_Update+0x54>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d114      	bne.n	8000ff4 <SCH_Update+0x48>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "UPDATE: %lu\r\n", sTaskList->taskID), 50);
		if(sTaskList->delay > 0) sTaskList->delay -= 1;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <SCH_Update+0x50>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <SCH_Update+0x36>
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <SCH_Update+0x50>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <SCH_Update+0x50>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3a01      	subs	r2, #1
 8000fe0:	60da      	str	r2, [r3, #12]
		if(sTaskList->delay <= 0) sTaskList->run_flag = 1;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SCH_Update+0x50>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <SCH_Update+0x48>
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <SCH_Update+0x50>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	761a      	strb	r2, [r3, #24]
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	200000a4 	.word	0x200000a4
 8001000:	20000158 	.word	0x20000158

08001004 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	mutex_lock = 1;
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <SCH_Dispatch_Tasks+0x9c>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
	while((sTaskList) && (sTaskList->run_flag)){
 8001010:	e036      	b.n	8001080 <SCH_Dispatch_Tasks+0x7c>
		//HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DISPATCH: Task executing %lu\r\n", sTaskList->taskID), 200);
		(*sTaskList->funcPointer)();
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4798      	blx	r3
		if(sTaskList->period == 0){
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10d      	bne.n	8001040 <SCH_Dispatch_Tasks+0x3c>
			struct sTask *toDelete = sTaskList;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	603b      	str	r3, [r7, #0]
			sTaskList = sTaskList->right;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 8001032:	6013      	str	r3, [r2, #0]
			SCH_Delete_Task(toDelete->taskID);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f835 	bl	80010a8 <SCH_Delete_Task>
 800103e:	e01f      	b.n	8001080 <SCH_Dispatch_Tasks+0x7c>
		}else{
			struct sTask *toFind = sTaskList;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	607b      	str	r3, [r7, #4]
			sTaskList->right->left = sTaskList->left;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	601a      	str	r2, [r3, #0]
			sTaskList->left->right = sTaskList->right;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6852      	ldr	r2, [r2, #4]
 8001060:	605a      	str	r2, [r3, #4]
			sTaskList = sTaskList->right;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 800106a:	6013      	str	r3, [r2, #0]
			toFind->run_flag = 0;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	761a      	strb	r2, [r3, #24]
			toFind->delay = toFind->period;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60da      	str	r2, [r3, #12]
			SCH_Find_Position(toFind);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fed4 	bl	8000e28 <SCH_Find_Position>
	while((sTaskList) && (sTaskList->run_flag)){
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <SCH_Dispatch_Tasks+0x8e>
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SCH_Dispatch_Tasks+0xa0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	7e1b      	ldrb	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1bf      	bne.n	8001012 <SCH_Dispatch_Tasks+0xe>
		}
	}
	mutex_lock = 0;
 8001092:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <SCH_Dispatch_Tasks+0x9c>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000158 	.word	0x20000158
 80010a4:	200000a4 	.word	0x200000a4

080010a8 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t index){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if(tracker[index]){
 80010b0:	4a20      	ldr	r2, [pc, #128]	; (8001134 <SCH_Delete_Task+0x8c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d02c      	beq.n	8001116 <SCH_Delete_Task+0x6e>
		tracker[index] = 0;
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <SCH_Delete_Task+0x8c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
		struct sTask *iterator = sTaskList;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <SCH_Delete_Task+0x90>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index){
 80010cc:	e002      	b.n	80010d4 <SCH_Delete_Task+0x2c>
			iterator = iterator->right;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
		while(iterator->taskID != index){
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d1f7      	bne.n	80010ce <SCH_Delete_Task+0x26>
		}
		iterator->right->left = iterator->left;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	601a      	str	r2, [r3, #0]
		iterator->left->right = iterator->right;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	6852      	ldr	r2, [r2, #4]
 80010f0:	605a      	str	r2, [r3, #4]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DELETE: Free %lu\r\n", iterator->taskID), 200);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4910      	ldr	r1, [pc, #64]	; (800113c <SCH_Delete_Task+0x94>)
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <SCH_Delete_Task+0x98>)
 80010fc:	f002 fb1c 	bl	8003738 <siprintf>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	23c8      	movs	r3, #200	; 0xc8
 8001106:	490e      	ldr	r1, [pc, #56]	; (8001140 <SCH_Delete_Task+0x98>)
 8001108:	480e      	ldr	r0, [pc, #56]	; (8001144 <SCH_Delete_Task+0x9c>)
 800110a:	f001 fd92 	bl	8002c32 <HAL_UART_Transmit>
		free(iterator);
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f002 fa4c 	bl	80035ac <free>
	}else{
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DELETE: Position empty\r\n"), 200);
	}
}
 8001114:	e00a      	b.n	800112c <SCH_Delete_Task+0x84>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "DELETE: Position empty\r\n"), 200);
 8001116:	490c      	ldr	r1, [pc, #48]	; (8001148 <SCH_Delete_Task+0xa0>)
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <SCH_Delete_Task+0x98>)
 800111a:	f002 fb0d 	bl	8003738 <siprintf>
 800111e:	4603      	mov	r3, r0
 8001120:	b29a      	uxth	r2, r3
 8001122:	23c8      	movs	r3, #200	; 0xc8
 8001124:	4906      	ldr	r1, [pc, #24]	; (8001140 <SCH_Delete_Task+0x98>)
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <SCH_Delete_Task+0x9c>)
 8001128:	f001 fd83 	bl	8002c32 <HAL_UART_Transmit>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200001c0 	.word	0x200001c0
 8001138:	200000a4 	.word	0x200000a4
 800113c:	08003e58 	.word	0x08003e58
 8001140:	2000015c 	.word	0x2000015c
 8001144:	20000114 	.word	0x20000114
 8001148:	08003e6c 	.word	0x08003e6c

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_MspInit+0x5c>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_MspInit+0x5c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_MspInit+0x5c>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_MspInit+0x5c>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_MspInit+0x5c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_MspInit+0x5c>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_MspInit+0x60>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_MspInit+0x60>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000

080011b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c0:	d113      	bne.n	80011ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_TIM_Base_MspInit+0x44>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_TIM_Base_MspInit+0x44>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_TIM_Base_MspInit+0x44>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	201c      	movs	r0, #28
 80011e0:	f000 fa33 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e4:	201c      	movs	r0, #28
 80011e6:	f000 fa4c 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <HAL_UART_MspInit+0x98>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d137      	bne.n	8001288 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_UART_MspInit+0x9c>)
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_UART_MspInit+0x9c>)
 800121e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001222:	61d3      	str	r3, [r2, #28]
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_UART_MspInit+0x9c>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_UART_MspInit+0x9c>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_UART_MspInit+0x9c>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x9c>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001248:	2304      	movs	r3, #4
 800124a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <HAL_UART_MspInit+0xa0>)
 800125c:	f000 fadc 	bl	8001818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001260:	2308      	movs	r3, #8
 8001262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_UART_MspInit+0xa0>)
 8001274:	f000 fad0 	bl	8001818 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2026      	movs	r0, #38	; 0x26
 800127e:	f000 f9e4 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001282:	2026      	movs	r0, #38	; 0x26
 8001284:	f000 f9fd 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40004400 	.word	0x40004400
 8001294:	40021000 	.word	0x40021000
 8001298:	40010800 	.word	0x40010800

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 f8bf 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM2_IRQHandler+0x10>)
 80012f2:	f001 f909 	bl	8002508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000cc 	.word	0x200000cc

08001300 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USART2_IRQHandler+0x10>)
 8001306:	f001 fd27 	bl	8002d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000114 	.word	0x20000114

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f002 f900 	bl	8003548 <__errno>
 8001348:	4603      	mov	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20002800 	.word	0x20002800
 8001374:	00000400 	.word	0x00000400
 8001378:	200000a8 	.word	0x200000a8
 800137c:	20000200 	.word	0x20000200

08001380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800138c:	f7ff fff8 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001392:	490c      	ldr	r1, [pc, #48]	; (80013c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013a8:	4c09      	ldr	r4, [pc, #36]	; (80013d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b6:	f002 f8cd 	bl	8003554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ba:	f7ff fbbb 	bl	8000b34 <main>
  bx lr
 80013be:	4770      	bx	lr
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80013c8:	08003ef8 	.word	0x08003ef8
  ldr r2, =_sbss
 80013cc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_2_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_Init+0x28>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_Init+0x28>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f923 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	200f      	movs	r0, #15
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff feaa 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f93b 	bl	800169e <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f903 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000014 	.word	0x20000014
 800145c:	2000001c 	.word	0x2000001c
 8001460:	20000018 	.word	0x20000018

08001464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x1c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x20>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_IncTick+0x20>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	2000001c 	.word	0x2000001c
 8001484:	200001e8 	.word	0x200001e8

08001488 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <HAL_GetTick+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	200001e8 	.word	0x200001e8

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4906      	ldr	r1, [pc, #24]	; (8001534 <__NVIC_EnableIRQ+0x34>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff90 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff2d 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff42 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff90 	bl	800158c <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5f 	bl	8001538 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff35 	bl	8001500 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d008      	beq.n	80016de <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2204      	movs	r2, #4
 80016d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e020      	b.n	8001720 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 020e 	bic.w	r2, r2, #14
 80016ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
	...

0800172c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800173e:	2b02      	cmp	r3, #2
 8001740:	d005      	beq.n	800174e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2204      	movs	r2, #4
 8001746:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e051      	b.n	80017f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 020e 	bic.w	r2, r2, #14
 800175c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a22      	ldr	r2, [pc, #136]	; (80017fc <HAL_DMA_Abort_IT+0xd0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d029      	beq.n	80017cc <HAL_DMA_Abort_IT+0xa0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a20      	ldr	r2, [pc, #128]	; (8001800 <HAL_DMA_Abort_IT+0xd4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d022      	beq.n	80017c8 <HAL_DMA_Abort_IT+0x9c>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <HAL_DMA_Abort_IT+0xd8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d01a      	beq.n	80017c2 <HAL_DMA_Abort_IT+0x96>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_DMA_Abort_IT+0xdc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d012      	beq.n	80017bc <HAL_DMA_Abort_IT+0x90>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_DMA_Abort_IT+0xe0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00a      	beq.n	80017b6 <HAL_DMA_Abort_IT+0x8a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1a      	ldr	r2, [pc, #104]	; (8001810 <HAL_DMA_Abort_IT+0xe4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d102      	bne.n	80017b0 <HAL_DMA_Abort_IT+0x84>
 80017aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017ae:	e00e      	b.n	80017ce <HAL_DMA_Abort_IT+0xa2>
 80017b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b4:	e00b      	b.n	80017ce <HAL_DMA_Abort_IT+0xa2>
 80017b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ba:	e008      	b.n	80017ce <HAL_DMA_Abort_IT+0xa2>
 80017bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c0:	e005      	b.n	80017ce <HAL_DMA_Abort_IT+0xa2>
 80017c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c6:	e002      	b.n	80017ce <HAL_DMA_Abort_IT+0xa2>
 80017c8:	2310      	movs	r3, #16
 80017ca:	e000      	b.n	80017ce <HAL_DMA_Abort_IT+0xa2>
 80017cc:	2301      	movs	r3, #1
 80017ce:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_DMA_Abort_IT+0xe8>)
 80017d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	4798      	blx	r3
    } 
  }
  return status;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40020008 	.word	0x40020008
 8001800:	4002001c 	.word	0x4002001c
 8001804:	40020030 	.word	0x40020030
 8001808:	40020044 	.word	0x40020044
 800180c:	40020058 	.word	0x40020058
 8001810:	4002006c 	.word	0x4002006c
 8001814:	40020000 	.word	0x40020000

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b08b      	sub	sp, #44	; 0x2c
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	e148      	b.n	8001abe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800182c:	2201      	movs	r2, #1
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	429a      	cmp	r2, r3
 8001846:	f040 8137 	bne.w	8001ab8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4aa3      	ldr	r2, [pc, #652]	; (8001adc <HAL_GPIO_Init+0x2c4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d05e      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 8001854:	4aa1      	ldr	r2, [pc, #644]	; (8001adc <HAL_GPIO_Init+0x2c4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d875      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 800185a:	4aa1      	ldr	r2, [pc, #644]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d058      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 8001860:	4a9f      	ldr	r2, [pc, #636]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d86f      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 8001866:	4a9f      	ldr	r2, [pc, #636]	; (8001ae4 <HAL_GPIO_Init+0x2cc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d052      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 800186c:	4a9d      	ldr	r2, [pc, #628]	; (8001ae4 <HAL_GPIO_Init+0x2cc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d869      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 8001872:	4a9d      	ldr	r2, [pc, #628]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d04c      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 8001878:	4a9b      	ldr	r2, [pc, #620]	; (8001ae8 <HAL_GPIO_Init+0x2d0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d863      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 800187e:	4a9b      	ldr	r2, [pc, #620]	; (8001aec <HAL_GPIO_Init+0x2d4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d046      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
 8001884:	4a99      	ldr	r2, [pc, #612]	; (8001aec <HAL_GPIO_Init+0x2d4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d85d      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 800188a:	2b12      	cmp	r3, #18
 800188c:	d82a      	bhi.n	80018e4 <HAL_GPIO_Init+0xcc>
 800188e:	2b12      	cmp	r3, #18
 8001890:	d859      	bhi.n	8001946 <HAL_GPIO_Init+0x12e>
 8001892:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <HAL_GPIO_Init+0x80>)
 8001894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001898:	08001913 	.word	0x08001913
 800189c:	080018ed 	.word	0x080018ed
 80018a0:	080018ff 	.word	0x080018ff
 80018a4:	08001941 	.word	0x08001941
 80018a8:	08001947 	.word	0x08001947
 80018ac:	08001947 	.word	0x08001947
 80018b0:	08001947 	.word	0x08001947
 80018b4:	08001947 	.word	0x08001947
 80018b8:	08001947 	.word	0x08001947
 80018bc:	08001947 	.word	0x08001947
 80018c0:	08001947 	.word	0x08001947
 80018c4:	08001947 	.word	0x08001947
 80018c8:	08001947 	.word	0x08001947
 80018cc:	08001947 	.word	0x08001947
 80018d0:	08001947 	.word	0x08001947
 80018d4:	08001947 	.word	0x08001947
 80018d8:	08001947 	.word	0x08001947
 80018dc:	080018f5 	.word	0x080018f5
 80018e0:	08001909 	.word	0x08001909
 80018e4:	4a82      	ldr	r2, [pc, #520]	; (8001af0 <HAL_GPIO_Init+0x2d8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ea:	e02c      	b.n	8001946 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e029      	b.n	8001948 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	3304      	adds	r3, #4
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e024      	b.n	8001948 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	3308      	adds	r3, #8
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e01f      	b.n	8001948 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	330c      	adds	r3, #12
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e01a      	b.n	8001948 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800191a:	2304      	movs	r3, #4
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e013      	b.n	8001948 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001928:	2308      	movs	r3, #8
 800192a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	611a      	str	r2, [r3, #16]
          break;
 8001932:	e009      	b.n	8001948 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001934:	2308      	movs	r3, #8
 8001936:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	615a      	str	r2, [r3, #20]
          break;
 800193e:	e003      	b.n	8001948 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x130>
          break;
 8001946:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2bff      	cmp	r3, #255	; 0xff
 800194c:	d801      	bhi.n	8001952 <HAL_GPIO_Init+0x13a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	e001      	b.n	8001956 <HAL_GPIO_Init+0x13e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3304      	adds	r3, #4
 8001956:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2bff      	cmp	r3, #255	; 0xff
 800195c:	d802      	bhi.n	8001964 <HAL_GPIO_Init+0x14c>
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x152>
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	3b08      	subs	r3, #8
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	210f      	movs	r1, #15
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	401a      	ands	r2, r3
 800197c:	6a39      	ldr	r1, [r7, #32]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	431a      	orrs	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8090 	beq.w	8001ab8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001998:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <HAL_GPIO_Init+0x2dc>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a55      	ldr	r2, [pc, #340]	; (8001af4 <HAL_GPIO_Init+0x2dc>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_GPIO_Init+0x2dc>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019b0:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <HAL_GPIO_Init+0x2e0>)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a49      	ldr	r2, [pc, #292]	; (8001afc <HAL_GPIO_Init+0x2e4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00d      	beq.n	80019f8 <HAL_GPIO_Init+0x1e0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a48      	ldr	r2, [pc, #288]	; (8001b00 <HAL_GPIO_Init+0x2e8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <HAL_GPIO_Init+0x1dc>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a47      	ldr	r2, [pc, #284]	; (8001b04 <HAL_GPIO_Init+0x2ec>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_GPIO_Init+0x1d8>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e004      	b.n	80019fa <HAL_GPIO_Init+0x1e2>
 80019f0:	2303      	movs	r3, #3
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_Init+0x1e2>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_GPIO_Init+0x1e2>
 80019f8:	2300      	movs	r3, #0
 80019fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fc:	f002 0203 	and.w	r2, r2, #3
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	4093      	lsls	r3, r2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a0a:	493b      	ldr	r1, [pc, #236]	; (8001af8 <HAL_GPIO_Init+0x2e0>)
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a24:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4937      	ldr	r1, [pc, #220]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a32:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4933      	ldr	r1, [pc, #204]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	492d      	ldr	r1, [pc, #180]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4929      	ldr	r1, [pc, #164]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4923      	ldr	r1, [pc, #140]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	491f      	ldr	r1, [pc, #124]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	4919      	ldr	r1, [pc, #100]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4915      	ldr	r1, [pc, #84]	; (8001b08 <HAL_GPIO_Init+0x2f0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	3301      	adds	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f47f aeaf 	bne.w	800182c <HAL_GPIO_Init+0x14>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
 8001ad2:	372c      	adds	r7, #44	; 0x2c
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10310000 	.word	0x10310000
 8001ae4:	10220000 	.word	0x10220000
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10110000 	.word	0x10110000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	807b      	strh	r3, [r7, #2]
 8001b46:	4613      	mov	r3, r2
 8001b48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4a:	787b      	ldrb	r3, [r7, #1]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b56:	e003      	b.n	8001b60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	041a      	lsls	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b7c:	887a      	ldrh	r2, [r7, #2]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	041a      	lsls	r2, r3, #16
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e26c      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d112      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
 8001bd4:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d10b      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d168      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e246      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x76>
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a7f      	ldr	r2, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a77      	ldr	r2, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0xbc>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a71      	ldr	r2, [pc, #452]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6a      	ldr	r2, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a67      	ldr	r2, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fc06 	bl	8001488 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fc02 	bl	8001488 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1fa      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe4>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fbf2 	bl	8001488 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fbee 	bl	8001488 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1e6      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x10c>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1ba      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4939      	ldr	r1, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fba7 	bl	8001488 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fba3 	bl	8001488 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e19b      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fb86 	bl	8001488 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fb82 	bl	8001488 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e17a      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03a      	beq.n	8001e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fb66 	bl	8001488 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fb62 	bl	8001488 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e15a      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 fad8 	bl	8002394 <RCC_Delay>
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fb4c 	bl	8001488 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df2:	e00f      	b.n	8001e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fb48 	bl	8001488 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e140      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	42420000 	.word	0x42420000
 8001e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b9e      	ldr	r3, [pc, #632]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e9      	bne.n	8001df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a6 	beq.w	8001f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b97      	ldr	r3, [pc, #604]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b94      	ldr	r3, [pc, #592]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a93      	ldr	r2, [pc, #588]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b91      	ldr	r3, [pc, #580]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b8b      	ldr	r3, [pc, #556]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a8a      	ldr	r2, [pc, #552]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fb09 	bl	8001488 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7ff fb05 	bl	8001488 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	; 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0fd      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b81      	ldr	r3, [pc, #516]	; (8002094 <HAL_RCC_OscConfig+0x4f8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001ea0:	4b7b      	ldr	r3, [pc, #492]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a7a      	ldr	r2, [pc, #488]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e02d      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001eb6:	4b76      	ldr	r3, [pc, #472]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a75      	ldr	r2, [pc, #468]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b73      	ldr	r3, [pc, #460]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a72      	ldr	r2, [pc, #456]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x356>
 8001ed8:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a6c      	ldr	r2, [pc, #432]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a69      	ldr	r2, [pc, #420]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a66      	ldr	r2, [pc, #408]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b64      	ldr	r3, [pc, #400]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a63      	ldr	r2, [pc, #396]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fab9 	bl	8001488 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff fab5 	bl	8001488 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0ab      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b57      	ldr	r3, [pc, #348]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x37e>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff faa3 	bl	8001488 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff fa9f 	bl	8001488 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e095      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b48      	ldr	r3, [pc, #288]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8081 	beq.w	8002086 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d061      	beq.n	8002054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d146      	bne.n	8002026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b3f      	ldr	r3, [pc, #252]	; (8002098 <HAL_RCC_OscConfig+0x4fc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fa73 	bl	8001488 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fa6f 	bl	8001488 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e067      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fce:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	492d      	ldr	r1, [pc, #180]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a19      	ldr	r1, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	4927      	ldr	r1, [pc, #156]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCC_OscConfig+0x4fc>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fa43 	bl	8001488 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff fa3f 	bl	8001488 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e037      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x46a>
 8002024:	e02f      	b.n	8002086 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_RCC_OscConfig+0x4fc>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fa2c 	bl	8001488 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff fa28 	bl	8001488 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e020      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x498>
 8002052:	e018      	b.n	8002086 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e013      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	429a      	cmp	r2, r3
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	42420060 	.word	0x42420060

0800209c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0d0      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b6a      	ldr	r3, [pc, #424]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
 80020c6:	4965      	ldr	r1, [pc, #404]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0b8      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f8:	4b59      	ldr	r3, [pc, #356]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a58      	ldr	r2, [pc, #352]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a52      	ldr	r2, [pc, #328]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800211a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b50      	ldr	r3, [pc, #320]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	494d      	ldr	r1, [pc, #308]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d040      	beq.n	80021bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d115      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e07f      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e073      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e06b      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4936      	ldr	r1, [pc, #216]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800218c:	f7ff f97c 	bl	8001488 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7ff f978 	bl	8001488 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e053      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d210      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	4922      	ldr	r1, [pc, #136]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e032      	b.n	8002252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4916      	ldr	r1, [pc, #88]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	490e      	ldr	r1, [pc, #56]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222a:	f000 f821 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800222e:	4602      	mov	r2, r0
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	490a      	ldr	r1, [pc, #40]	; (8002264 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	5ccb      	ldrb	r3, [r1, r3]
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1cc>)
 8002244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1d0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f8da 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
 8002264:	08003ea4 	.word	0x08003ea4
 8002268:	20000014 	.word	0x20000014
 800226c:	20000018 	.word	0x20000018

08002270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b490      	push	{r4, r7}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002278:	1d3c      	adds	r4, r7, #4
 800227a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002280:	f240 2301 	movw	r3, #513	; 0x201
 8002284:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x40>
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x46>
 80022ae:	e02d      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b2:	623b      	str	r3, [r7, #32]
      break;
 80022b4:	e02d      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	0c9b      	lsrs	r3, r3, #18
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022c2:	4413      	add	r3, r2
 80022c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	0c5b      	lsrs	r3, r3, #17
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022e2:	4413      	add	r3, r2
 80022e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ee:	fb02 f203 	mul.w	r2, r2, r3
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
 80022fa:	e004      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	623b      	str	r3, [r7, #32]
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800230e:	623b      	str	r3, [r7, #32]
      break;
 8002310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002312:	6a3b      	ldr	r3, [r7, #32]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3728      	adds	r7, #40	; 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bc90      	pop	{r4, r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	08003e88 	.word	0x08003e88
 8002324:	40021000 	.word	0x40021000
 8002328:	007a1200 	.word	0x007a1200
 800232c:	003d0900 	.word	0x003d0900

08002330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b02      	ldr	r3, [pc, #8]	; (8002340 <HAL_RCC_GetHCLKFreq+0x10>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	20000014 	.word	0x20000014

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002348:	f7ff fff2 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4903      	ldr	r1, [pc, #12]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08003eb4 	.word	0x08003eb4

0800236c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002370:	f7ff ffde 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0adb      	lsrs	r3, r3, #11
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4903      	ldr	r1, [pc, #12]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	08003eb4 	.word	0x08003eb4

08002394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <RCC_Delay+0x34>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <RCC_Delay+0x38>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a5b      	lsrs	r3, r3, #9
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b0:	bf00      	nop
  }
  while (Delay --);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	60fa      	str	r2, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f9      	bne.n	80023b0 <RCC_Delay+0x1c>
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	20000014 	.word	0x20000014
 80023cc:	10624dd3 	.word	0x10624dd3

080023d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e041      	b.n	8002466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe feda 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f000 fa6a 	bl	80028e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d001      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e035      	b.n	80024f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a16      	ldr	r2, [pc, #88]	; (8002500 <HAL_TIM_Base_Start_IT+0x90>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x4e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b2:	d004      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x4e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_TIM_Base_Start_IT+0x94>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d111      	bne.n	80024e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d010      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e0:	e007      	b.n	80024f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40000400 	.word	0x40000400

08002508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d122      	bne.n	8002564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	d11b      	bne.n	8002564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0202 	mvn.w	r2, #2
 8002534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f9b1 	bl	80028b2 <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f9a4 	bl	80028a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f9b3 	bl	80028c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b04      	cmp	r3, #4
 8002570:	d122      	bne.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b04      	cmp	r3, #4
 800257e:	d11b      	bne.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0204 	mvn.w	r2, #4
 8002588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f987 	bl	80028b2 <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f97a 	bl	80028a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f989 	bl	80028c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d122      	bne.n	800260c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d11b      	bne.n	800260c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0208 	mvn.w	r2, #8
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2204      	movs	r2, #4
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f95d 	bl	80028b2 <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f950 	bl	80028a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f95f 	bl	80028c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b10      	cmp	r3, #16
 8002618:	d122      	bne.n	8002660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d11b      	bne.n	8002660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0210 	mvn.w	r2, #16
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2208      	movs	r2, #8
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f933 	bl	80028b2 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f926 	bl	80028a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f935 	bl	80028c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0201 	mvn.w	r2, #1
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fbbe 	bl	8000e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b80      	cmp	r3, #128	; 0x80
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa67 	bl	8002b86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b40      	cmp	r3, #64	; 0x40
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8f9 	bl	80028d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0220 	mvn.w	r2, #32
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa32 	bl	8002b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x18>
 800272c:	2302      	movs	r3, #2
 800272e:	e0b3      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x180>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800274e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002756:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002768:	d03e      	beq.n	80027e8 <HAL_TIM_ConfigClockSource+0xd0>
 800276a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276e:	f200 8087 	bhi.w	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002776:	f000 8085 	beq.w	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277e:	d87f      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002780:	2b70      	cmp	r3, #112	; 0x70
 8002782:	d01a      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0xa2>
 8002784:	2b70      	cmp	r3, #112	; 0x70
 8002786:	d87b      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002788:	2b60      	cmp	r3, #96	; 0x60
 800278a:	d050      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x116>
 800278c:	2b60      	cmp	r3, #96	; 0x60
 800278e:	d877      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002790:	2b50      	cmp	r3, #80	; 0x50
 8002792:	d03c      	beq.n	800280e <HAL_TIM_ConfigClockSource+0xf6>
 8002794:	2b50      	cmp	r3, #80	; 0x50
 8002796:	d873      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d058      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x136>
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d86f      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 80027a0:	2b30      	cmp	r3, #48	; 0x30
 80027a2:	d064      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
 80027a4:	2b30      	cmp	r3, #48	; 0x30
 80027a6:	d86b      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d060      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d867      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d05c      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d05a      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027b8:	e062      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f000 f95c 	bl	8002a86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	609a      	str	r2, [r3, #8]
      break;
 80027e6:	e04e      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6899      	ldr	r1, [r3, #8]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f000 f945 	bl	8002a86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800280a:	609a      	str	r2, [r3, #8]
      break;
 800280c:	e03b      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	461a      	mov	r2, r3
 800281c:	f000 f8bc 	bl	8002998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2150      	movs	r1, #80	; 0x50
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f913 	bl	8002a52 <TIM_ITRx_SetConfig>
      break;
 800282c:	e02b      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	461a      	mov	r2, r3
 800283c:	f000 f8da 	bl	80029f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2160      	movs	r1, #96	; 0x60
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f903 	bl	8002a52 <TIM_ITRx_SetConfig>
      break;
 800284c:	e01b      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	461a      	mov	r2, r3
 800285c:	f000 f89c 	bl	8002998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2140      	movs	r1, #64	; 0x40
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f8f3 	bl	8002a52 <TIM_ITRx_SetConfig>
      break;
 800286c:	e00b      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f000 f8ea 	bl	8002a52 <TIM_ITRx_SetConfig>
        break;
 800287e:	e002      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002884:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a25      	ldr	r2, [pc, #148]	; (8002990 <TIM_Base_SetConfig+0xa8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <TIM_Base_SetConfig+0x28>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d003      	beq.n	8002910 <TIM_Base_SetConfig+0x28>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a22      	ldr	r2, [pc, #136]	; (8002994 <TIM_Base_SetConfig+0xac>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d108      	bne.n	8002922 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <TIM_Base_SetConfig+0xa8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <TIM_Base_SetConfig+0x52>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d003      	beq.n	800293a <TIM_Base_SetConfig+0x52>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a17      	ldr	r2, [pc, #92]	; (8002994 <TIM_Base_SetConfig+0xac>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d108      	bne.n	800294c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a07      	ldr	r2, [pc, #28]	; (8002990 <TIM_Base_SetConfig+0xa8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d103      	bne.n	8002980 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	615a      	str	r2, [r3, #20]
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40000400 	.word	0x40000400

08002998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f023 0201 	bic.w	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f023 030a 	bic.w	r3, r3, #10
 80029d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	621a      	str	r2, [r3, #32]
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f023 0210 	bic.w	r2, r3, #16
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	031b      	lsls	r3, r3, #12
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	621a      	str	r2, [r3, #32]
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f043 0307 	orr.w	r3, r3, #7
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b087      	sub	sp, #28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	021a      	lsls	r2, r3, #8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	609a      	str	r2, [r3, #8]
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e041      	b.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d009      	beq.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b28:	d004      	beq.n	8002b34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10c      	bne.n	8002b4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40000400 	.word	0x40000400

08002b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e03f      	b.n	8002c2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fb1a 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fc25 	bl	800342c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08a      	sub	sp, #40	; 0x28
 8002c36:	af02      	add	r7, sp, #8
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d17c      	bne.n	8002d4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_UART_Transmit+0x2c>
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e075      	b.n	8002d4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_UART_Transmit+0x3e>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e06e      	b.n	8002d4e <HAL_UART_Transmit+0x11c>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2221      	movs	r2, #33	; 0x21
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c86:	f7fe fbff 	bl	8001488 <HAL_GetTick>
 8002c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	88fa      	ldrh	r2, [r7, #6]
 8002c96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d108      	bne.n	8002cb4 <HAL_UART_Transmit+0x82>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e003      	b.n	8002cbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cc4:	e02a      	b.n	8002d1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fa11 	bl	80030f8 <UART_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e036      	b.n	8002d4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	e007      	b.n	8002d0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1cf      	bne.n	8002cc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2140      	movs	r1, #64	; 0x40
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f9e1 	bl	80030f8 <UART_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e006      	b.n	8002d4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e000      	b.n	8002d4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10d      	bne.n	8002daa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_UART_IRQHandler+0x52>
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa99 	bl	80032da <UART_Receive_IT>
      return;
 8002da8:	e17b      	b.n	80030a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80b1 	beq.w	8002f14 <HAL_UART_IRQHandler+0x1bc>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x70>
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80a6 	beq.w	8002f14 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_UART_IRQHandler+0x90>
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_UART_IRQHandler+0xb0>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f043 0202 	orr.w	r2, r3, #2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_UART_IRQHandler+0xd0>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f043 0204 	orr.w	r2, r3, #4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00f      	beq.n	8002e52 <HAL_UART_IRQHandler+0xfa>
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d104      	bne.n	8002e46 <HAL_UART_IRQHandler+0xee>
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f043 0208 	orr.w	r2, r3, #8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 811e 	beq.w	8003098 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_UART_IRQHandler+0x11e>
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fa32 	bl	80032da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <HAL_UART_IRQHandler+0x146>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d031      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f974 	bl	800318c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d023      	beq.n	8002efa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d013      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	4a76      	ldr	r2, [pc, #472]	; (80030a8 <HAL_UART_IRQHandler+0x350>)
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fc28 	bl	800172c <HAL_DMA_Abort_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eec:	4610      	mov	r0, r2
 8002eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef0:	e00e      	b.n	8002f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8ec 	bl	80030d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef8:	e00a      	b.n	8002f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8e8 	bl	80030d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f00:	e006      	b.n	8002f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8e4 	bl	80030d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f0e:	e0c3      	b.n	8003098 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	bf00      	nop
    return;
 8002f12:	e0c1      	b.n	8003098 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	f040 80a1 	bne.w	8003060 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 809b 	beq.w	8003060 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8095 	beq.w	8003060 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d04e      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f64:	8a3b      	ldrh	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8098 	beq.w	800309c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f70:	8a3a      	ldrh	r2, [r7, #16]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	f080 8092 	bcs.w	800309c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8a3a      	ldrh	r2, [r7, #16]
 8002f7c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d02b      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f96:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0210 	bic.w	r2, r2, #16
 8002fd4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fb6b 	bl	80016b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f876 	bl	80030e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ff6:	e051      	b.n	800309c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003000:	b29b      	uxth	r3, r3
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d047      	beq.n	80030a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003010:	8a7b      	ldrh	r3, [r7, #18]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d044      	beq.n	80030a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003024:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0210 	bic.w	r2, r2, #16
 8003052:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003054:	8a7b      	ldrh	r3, [r7, #18]
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f842 	bl	80030e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800305e:	e01f      	b.n	80030a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_UART_IRQHandler+0x324>
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8c9 	bl	800320c <UART_Transmit_IT>
    return;
 800307a:	e012      	b.n	80030a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_UART_IRQHandler+0x34a>
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f90a 	bl	80032aa <UART_EndTransmit_IT>
    return;
 8003096:	e004      	b.n	80030a2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003098:	bf00      	nop
 800309a:	e002      	b.n	80030a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HAL_UART_IRQHandler+0x34a>
      return;
 80030a0:	bf00      	nop
  }
}
 80030a2:	3728      	adds	r7, #40	; 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	080031e5 	.word	0x080031e5

080030ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003108:	e02c      	b.n	8003164 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d028      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <UART_WaitOnFlagUntilTimeout+0x30>
 8003118:	f7fe f9b6 	bl	8001488 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	429a      	cmp	r2, r3
 8003126:	d21d      	bcs.n	8003164 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003136:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e00f      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	d0c3      	beq.n	800310a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d107      	bne.n	80031cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0210 	bic.w	r2, r2, #16
 80031ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff ff66 	bl	80030d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b21      	cmp	r3, #33	; 0x21
 800321e:	d13e      	bne.n	800329e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003228:	d114      	bne.n	8003254 <UART_Transmit_IT+0x48>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d110      	bne.n	8003254 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003246:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	1c9a      	adds	r2, r3, #2
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	621a      	str	r2, [r3, #32]
 8003252:	e008      	b.n	8003266 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	1c59      	adds	r1, r3, #1
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6211      	str	r1, [r2, #32]
 800325e:	781a      	ldrb	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29b      	uxth	r3, r3
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4619      	mov	r1, r3
 8003274:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10f      	bne.n	800329a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003288:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003298:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff feee 	bl	80030ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b22      	cmp	r3, #34	; 0x22
 80032ec:	f040 8099 	bne.w	8003422 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f8:	d117      	bne.n	800332a <UART_Receive_IT+0x50>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d113      	bne.n	800332a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	b29b      	uxth	r3, r3
 8003314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003318:	b29a      	uxth	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
 8003328:	e026      	b.n	8003378 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333c:	d007      	beq.n	800334e <UART_Receive_IT+0x74>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <UART_Receive_IT+0x82>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e008      	b.n	800336e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003368:	b2da      	uxtb	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29b      	uxth	r3, r3
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4619      	mov	r1, r3
 8003386:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003388:	2b00      	cmp	r3, #0
 800338a:	d148      	bne.n	800341e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0220 	bic.w	r2, r2, #32
 800339a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d123      	bne.n	8003414 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0210 	bic.w	r2, r2, #16
 80033e0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d10a      	bne.n	8003406 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fe68 	bl	80030e2 <HAL_UARTEx_RxEventCallback>
 8003412:	e002      	b.n	800341a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fe52 	bl	80030be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e002      	b.n	8003424 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	e000      	b.n	8003424 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003466:	f023 030c 	bic.w	r3, r3, #12
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	430b      	orrs	r3, r1
 8003472:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <UART_SetConfig+0x114>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d103      	bne.n	800349c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003494:	f7fe ff6a 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	e002      	b.n	80034a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800349c:	f7fe ff52 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 80034a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009a      	lsls	r2, r3, #2
 80034ac:	441a      	add	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	4a22      	ldr	r2, [pc, #136]	; (8003544 <UART_SetConfig+0x118>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	0119      	lsls	r1, r3, #4
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009a      	lsls	r2, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <UART_SetConfig+0x118>)
 80034da:	fba3 0302 	umull	r0, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2064      	movs	r0, #100	; 0x64
 80034e2:	fb00 f303 	mul.w	r3, r0, r3
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	3332      	adds	r3, #50	; 0x32
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <UART_SetConfig+0x118>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f8:	4419      	add	r1, r3
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <UART_SetConfig+0x118>)
 8003512:	fba3 0302 	umull	r0, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2064      	movs	r0, #100	; 0x64
 800351a:	fb00 f303 	mul.w	r3, r0, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <UART_SetConfig+0x118>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	440a      	add	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40013800 	.word	0x40013800
 8003544:	51eb851f 	.word	0x51eb851f

08003548 <__errno>:
 8003548:	4b01      	ldr	r3, [pc, #4]	; (8003550 <__errno+0x8>)
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000020 	.word	0x20000020

08003554 <__libc_init_array>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	2600      	movs	r6, #0
 8003558:	4d0c      	ldr	r5, [pc, #48]	; (800358c <__libc_init_array+0x38>)
 800355a:	4c0d      	ldr	r4, [pc, #52]	; (8003590 <__libc_init_array+0x3c>)
 800355c:	1b64      	subs	r4, r4, r5
 800355e:	10a4      	asrs	r4, r4, #2
 8003560:	42a6      	cmp	r6, r4
 8003562:	d109      	bne.n	8003578 <__libc_init_array+0x24>
 8003564:	f000 fc6c 	bl	8003e40 <_init>
 8003568:	2600      	movs	r6, #0
 800356a:	4d0a      	ldr	r5, [pc, #40]	; (8003594 <__libc_init_array+0x40>)
 800356c:	4c0a      	ldr	r4, [pc, #40]	; (8003598 <__libc_init_array+0x44>)
 800356e:	1b64      	subs	r4, r4, r5
 8003570:	10a4      	asrs	r4, r4, #2
 8003572:	42a6      	cmp	r6, r4
 8003574:	d105      	bne.n	8003582 <__libc_init_array+0x2e>
 8003576:	bd70      	pop	{r4, r5, r6, pc}
 8003578:	f855 3b04 	ldr.w	r3, [r5], #4
 800357c:	4798      	blx	r3
 800357e:	3601      	adds	r6, #1
 8003580:	e7ee      	b.n	8003560 <__libc_init_array+0xc>
 8003582:	f855 3b04 	ldr.w	r3, [r5], #4
 8003586:	4798      	blx	r3
 8003588:	3601      	adds	r6, #1
 800358a:	e7f2      	b.n	8003572 <__libc_init_array+0x1e>
 800358c:	08003ef0 	.word	0x08003ef0
 8003590:	08003ef0 	.word	0x08003ef0
 8003594:	08003ef0 	.word	0x08003ef0
 8003598:	08003ef4 	.word	0x08003ef4

0800359c <malloc>:
 800359c:	4b02      	ldr	r3, [pc, #8]	; (80035a8 <malloc+0xc>)
 800359e:	4601      	mov	r1, r0
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	f000 b85f 	b.w	8003664 <_malloc_r>
 80035a6:	bf00      	nop
 80035a8:	20000020 	.word	0x20000020

080035ac <free>:
 80035ac:	4b02      	ldr	r3, [pc, #8]	; (80035b8 <free+0xc>)
 80035ae:	4601      	mov	r1, r0
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	f000 b80b 	b.w	80035cc <_free_r>
 80035b6:	bf00      	nop
 80035b8:	20000020 	.word	0x20000020

080035bc <memset>:
 80035bc:	4603      	mov	r3, r0
 80035be:	4402      	add	r2, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d100      	bne.n	80035c6 <memset+0xa>
 80035c4:	4770      	bx	lr
 80035c6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ca:	e7f9      	b.n	80035c0 <memset+0x4>

080035cc <_free_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	4605      	mov	r5, r0
 80035d0:	2900      	cmp	r1, #0
 80035d2:	d043      	beq.n	800365c <_free_r+0x90>
 80035d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d8:	1f0c      	subs	r4, r1, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bfb8      	it	lt
 80035de:	18e4      	addlt	r4, r4, r3
 80035e0:	f000 f8ca 	bl	8003778 <__malloc_lock>
 80035e4:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <_free_r+0x94>)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	4610      	mov	r0, r2
 80035ea:	b933      	cbnz	r3, 80035fa <_free_r+0x2e>
 80035ec:	6063      	str	r3, [r4, #4]
 80035ee:	6014      	str	r4, [r2, #0]
 80035f0:	4628      	mov	r0, r5
 80035f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f6:	f000 b8c5 	b.w	8003784 <__malloc_unlock>
 80035fa:	42a3      	cmp	r3, r4
 80035fc:	d90a      	bls.n	8003614 <_free_r+0x48>
 80035fe:	6821      	ldr	r1, [r4, #0]
 8003600:	1862      	adds	r2, r4, r1
 8003602:	4293      	cmp	r3, r2
 8003604:	bf01      	itttt	eq
 8003606:	681a      	ldreq	r2, [r3, #0]
 8003608:	685b      	ldreq	r3, [r3, #4]
 800360a:	1852      	addeq	r2, r2, r1
 800360c:	6022      	streq	r2, [r4, #0]
 800360e:	6063      	str	r3, [r4, #4]
 8003610:	6004      	str	r4, [r0, #0]
 8003612:	e7ed      	b.n	80035f0 <_free_r+0x24>
 8003614:	461a      	mov	r2, r3
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	b10b      	cbz	r3, 800361e <_free_r+0x52>
 800361a:	42a3      	cmp	r3, r4
 800361c:	d9fa      	bls.n	8003614 <_free_r+0x48>
 800361e:	6811      	ldr	r1, [r2, #0]
 8003620:	1850      	adds	r0, r2, r1
 8003622:	42a0      	cmp	r0, r4
 8003624:	d10b      	bne.n	800363e <_free_r+0x72>
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	4401      	add	r1, r0
 800362a:	1850      	adds	r0, r2, r1
 800362c:	4283      	cmp	r3, r0
 800362e:	6011      	str	r1, [r2, #0]
 8003630:	d1de      	bne.n	80035f0 <_free_r+0x24>
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4401      	add	r1, r0
 8003638:	6011      	str	r1, [r2, #0]
 800363a:	6053      	str	r3, [r2, #4]
 800363c:	e7d8      	b.n	80035f0 <_free_r+0x24>
 800363e:	d902      	bls.n	8003646 <_free_r+0x7a>
 8003640:	230c      	movs	r3, #12
 8003642:	602b      	str	r3, [r5, #0]
 8003644:	e7d4      	b.n	80035f0 <_free_r+0x24>
 8003646:	6820      	ldr	r0, [r4, #0]
 8003648:	1821      	adds	r1, r4, r0
 800364a:	428b      	cmp	r3, r1
 800364c:	bf01      	itttt	eq
 800364e:	6819      	ldreq	r1, [r3, #0]
 8003650:	685b      	ldreq	r3, [r3, #4]
 8003652:	1809      	addeq	r1, r1, r0
 8003654:	6021      	streq	r1, [r4, #0]
 8003656:	6063      	str	r3, [r4, #4]
 8003658:	6054      	str	r4, [r2, #4]
 800365a:	e7c9      	b.n	80035f0 <_free_r+0x24>
 800365c:	bd38      	pop	{r3, r4, r5, pc}
 800365e:	bf00      	nop
 8003660:	200000ac 	.word	0x200000ac

08003664 <_malloc_r>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	1ccd      	adds	r5, r1, #3
 8003668:	f025 0503 	bic.w	r5, r5, #3
 800366c:	3508      	adds	r5, #8
 800366e:	2d0c      	cmp	r5, #12
 8003670:	bf38      	it	cc
 8003672:	250c      	movcc	r5, #12
 8003674:	2d00      	cmp	r5, #0
 8003676:	4606      	mov	r6, r0
 8003678:	db01      	blt.n	800367e <_malloc_r+0x1a>
 800367a:	42a9      	cmp	r1, r5
 800367c:	d903      	bls.n	8003686 <_malloc_r+0x22>
 800367e:	230c      	movs	r3, #12
 8003680:	6033      	str	r3, [r6, #0]
 8003682:	2000      	movs	r0, #0
 8003684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003686:	f000 f877 	bl	8003778 <__malloc_lock>
 800368a:	4921      	ldr	r1, [pc, #132]	; (8003710 <_malloc_r+0xac>)
 800368c:	680a      	ldr	r2, [r1, #0]
 800368e:	4614      	mov	r4, r2
 8003690:	b99c      	cbnz	r4, 80036ba <_malloc_r+0x56>
 8003692:	4f20      	ldr	r7, [pc, #128]	; (8003714 <_malloc_r+0xb0>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b923      	cbnz	r3, 80036a2 <_malloc_r+0x3e>
 8003698:	4621      	mov	r1, r4
 800369a:	4630      	mov	r0, r6
 800369c:	f000 f83c 	bl	8003718 <_sbrk_r>
 80036a0:	6038      	str	r0, [r7, #0]
 80036a2:	4629      	mov	r1, r5
 80036a4:	4630      	mov	r0, r6
 80036a6:	f000 f837 	bl	8003718 <_sbrk_r>
 80036aa:	1c43      	adds	r3, r0, #1
 80036ac:	d123      	bne.n	80036f6 <_malloc_r+0x92>
 80036ae:	230c      	movs	r3, #12
 80036b0:	4630      	mov	r0, r6
 80036b2:	6033      	str	r3, [r6, #0]
 80036b4:	f000 f866 	bl	8003784 <__malloc_unlock>
 80036b8:	e7e3      	b.n	8003682 <_malloc_r+0x1e>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	1b5b      	subs	r3, r3, r5
 80036be:	d417      	bmi.n	80036f0 <_malloc_r+0x8c>
 80036c0:	2b0b      	cmp	r3, #11
 80036c2:	d903      	bls.n	80036cc <_malloc_r+0x68>
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	441c      	add	r4, r3
 80036c8:	6025      	str	r5, [r4, #0]
 80036ca:	e004      	b.n	80036d6 <_malloc_r+0x72>
 80036cc:	6863      	ldr	r3, [r4, #4]
 80036ce:	42a2      	cmp	r2, r4
 80036d0:	bf0c      	ite	eq
 80036d2:	600b      	streq	r3, [r1, #0]
 80036d4:	6053      	strne	r3, [r2, #4]
 80036d6:	4630      	mov	r0, r6
 80036d8:	f000 f854 	bl	8003784 <__malloc_unlock>
 80036dc:	f104 000b 	add.w	r0, r4, #11
 80036e0:	1d23      	adds	r3, r4, #4
 80036e2:	f020 0007 	bic.w	r0, r0, #7
 80036e6:	1ac2      	subs	r2, r0, r3
 80036e8:	d0cc      	beq.n	8003684 <_malloc_r+0x20>
 80036ea:	1a1b      	subs	r3, r3, r0
 80036ec:	50a3      	str	r3, [r4, r2]
 80036ee:	e7c9      	b.n	8003684 <_malloc_r+0x20>
 80036f0:	4622      	mov	r2, r4
 80036f2:	6864      	ldr	r4, [r4, #4]
 80036f4:	e7cc      	b.n	8003690 <_malloc_r+0x2c>
 80036f6:	1cc4      	adds	r4, r0, #3
 80036f8:	f024 0403 	bic.w	r4, r4, #3
 80036fc:	42a0      	cmp	r0, r4
 80036fe:	d0e3      	beq.n	80036c8 <_malloc_r+0x64>
 8003700:	1a21      	subs	r1, r4, r0
 8003702:	4630      	mov	r0, r6
 8003704:	f000 f808 	bl	8003718 <_sbrk_r>
 8003708:	3001      	adds	r0, #1
 800370a:	d1dd      	bne.n	80036c8 <_malloc_r+0x64>
 800370c:	e7cf      	b.n	80036ae <_malloc_r+0x4a>
 800370e:	bf00      	nop
 8003710:	200000ac 	.word	0x200000ac
 8003714:	200000b0 	.word	0x200000b0

08003718 <_sbrk_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	2300      	movs	r3, #0
 800371c:	4d05      	ldr	r5, [pc, #20]	; (8003734 <_sbrk_r+0x1c>)
 800371e:	4604      	mov	r4, r0
 8003720:	4608      	mov	r0, r1
 8003722:	602b      	str	r3, [r5, #0]
 8003724:	f7fd fdf6 	bl	8001314 <_sbrk>
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	d102      	bne.n	8003732 <_sbrk_r+0x1a>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	b103      	cbz	r3, 8003732 <_sbrk_r+0x1a>
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	bd38      	pop	{r3, r4, r5, pc}
 8003734:	200001ec 	.word	0x200001ec

08003738 <siprintf>:
 8003738:	b40e      	push	{r1, r2, r3}
 800373a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800373e:	b500      	push	{lr}
 8003740:	b09c      	sub	sp, #112	; 0x70
 8003742:	ab1d      	add	r3, sp, #116	; 0x74
 8003744:	9002      	str	r0, [sp, #8]
 8003746:	9006      	str	r0, [sp, #24]
 8003748:	9107      	str	r1, [sp, #28]
 800374a:	9104      	str	r1, [sp, #16]
 800374c:	4808      	ldr	r0, [pc, #32]	; (8003770 <siprintf+0x38>)
 800374e:	4909      	ldr	r1, [pc, #36]	; (8003774 <siprintf+0x3c>)
 8003750:	f853 2b04 	ldr.w	r2, [r3], #4
 8003754:	9105      	str	r1, [sp, #20]
 8003756:	6800      	ldr	r0, [r0, #0]
 8003758:	a902      	add	r1, sp, #8
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	f000 f874 	bl	8003848 <_svfiprintf_r>
 8003760:	2200      	movs	r2, #0
 8003762:	9b02      	ldr	r3, [sp, #8]
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	b01c      	add	sp, #112	; 0x70
 8003768:	f85d eb04 	ldr.w	lr, [sp], #4
 800376c:	b003      	add	sp, #12
 800376e:	4770      	bx	lr
 8003770:	20000020 	.word	0x20000020
 8003774:	ffff0208 	.word	0xffff0208

08003778 <__malloc_lock>:
 8003778:	4801      	ldr	r0, [pc, #4]	; (8003780 <__malloc_lock+0x8>)
 800377a:	f000 bafb 	b.w	8003d74 <__retarget_lock_acquire_recursive>
 800377e:	bf00      	nop
 8003780:	200001f4 	.word	0x200001f4

08003784 <__malloc_unlock>:
 8003784:	4801      	ldr	r0, [pc, #4]	; (800378c <__malloc_unlock+0x8>)
 8003786:	f000 baf6 	b.w	8003d76 <__retarget_lock_release_recursive>
 800378a:	bf00      	nop
 800378c:	200001f4 	.word	0x200001f4

08003790 <__ssputs_r>:
 8003790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003794:	688e      	ldr	r6, [r1, #8]
 8003796:	4682      	mov	sl, r0
 8003798:	429e      	cmp	r6, r3
 800379a:	460c      	mov	r4, r1
 800379c:	4690      	mov	r8, r2
 800379e:	461f      	mov	r7, r3
 80037a0:	d838      	bhi.n	8003814 <__ssputs_r+0x84>
 80037a2:	898a      	ldrh	r2, [r1, #12]
 80037a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037a8:	d032      	beq.n	8003810 <__ssputs_r+0x80>
 80037aa:	6825      	ldr	r5, [r4, #0]
 80037ac:	6909      	ldr	r1, [r1, #16]
 80037ae:	3301      	adds	r3, #1
 80037b0:	eba5 0901 	sub.w	r9, r5, r1
 80037b4:	6965      	ldr	r5, [r4, #20]
 80037b6:	444b      	add	r3, r9
 80037b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037c0:	106d      	asrs	r5, r5, #1
 80037c2:	429d      	cmp	r5, r3
 80037c4:	bf38      	it	cc
 80037c6:	461d      	movcc	r5, r3
 80037c8:	0553      	lsls	r3, r2, #21
 80037ca:	d531      	bpl.n	8003830 <__ssputs_r+0xa0>
 80037cc:	4629      	mov	r1, r5
 80037ce:	f7ff ff49 	bl	8003664 <_malloc_r>
 80037d2:	4606      	mov	r6, r0
 80037d4:	b950      	cbnz	r0, 80037ec <__ssputs_r+0x5c>
 80037d6:	230c      	movs	r3, #12
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	f8ca 3000 	str.w	r3, [sl]
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e6:	81a3      	strh	r3, [r4, #12]
 80037e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ec:	464a      	mov	r2, r9
 80037ee:	6921      	ldr	r1, [r4, #16]
 80037f0:	f000 fad0 	bl	8003d94 <memcpy>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	6126      	str	r6, [r4, #16]
 8003802:	444e      	add	r6, r9
 8003804:	6026      	str	r6, [r4, #0]
 8003806:	463e      	mov	r6, r7
 8003808:	6165      	str	r5, [r4, #20]
 800380a:	eba5 0509 	sub.w	r5, r5, r9
 800380e:	60a5      	str	r5, [r4, #8]
 8003810:	42be      	cmp	r6, r7
 8003812:	d900      	bls.n	8003816 <__ssputs_r+0x86>
 8003814:	463e      	mov	r6, r7
 8003816:	4632      	mov	r2, r6
 8003818:	4641      	mov	r1, r8
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	f000 fac8 	bl	8003db0 <memmove>
 8003820:	68a3      	ldr	r3, [r4, #8]
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	1b9b      	subs	r3, r3, r6
 8003826:	4432      	add	r2, r6
 8003828:	2000      	movs	r0, #0
 800382a:	60a3      	str	r3, [r4, #8]
 800382c:	6022      	str	r2, [r4, #0]
 800382e:	e7db      	b.n	80037e8 <__ssputs_r+0x58>
 8003830:	462a      	mov	r2, r5
 8003832:	f000 fad7 	bl	8003de4 <_realloc_r>
 8003836:	4606      	mov	r6, r0
 8003838:	2800      	cmp	r0, #0
 800383a:	d1e1      	bne.n	8003800 <__ssputs_r+0x70>
 800383c:	4650      	mov	r0, sl
 800383e:	6921      	ldr	r1, [r4, #16]
 8003840:	f7ff fec4 	bl	80035cc <_free_r>
 8003844:	e7c7      	b.n	80037d6 <__ssputs_r+0x46>
	...

08003848 <_svfiprintf_r>:
 8003848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384c:	4698      	mov	r8, r3
 800384e:	898b      	ldrh	r3, [r1, #12]
 8003850:	4607      	mov	r7, r0
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	460d      	mov	r5, r1
 8003856:	4614      	mov	r4, r2
 8003858:	b09d      	sub	sp, #116	; 0x74
 800385a:	d50e      	bpl.n	800387a <_svfiprintf_r+0x32>
 800385c:	690b      	ldr	r3, [r1, #16]
 800385e:	b963      	cbnz	r3, 800387a <_svfiprintf_r+0x32>
 8003860:	2140      	movs	r1, #64	; 0x40
 8003862:	f7ff feff 	bl	8003664 <_malloc_r>
 8003866:	6028      	str	r0, [r5, #0]
 8003868:	6128      	str	r0, [r5, #16]
 800386a:	b920      	cbnz	r0, 8003876 <_svfiprintf_r+0x2e>
 800386c:	230c      	movs	r3, #12
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	e0d1      	b.n	8003a1a <_svfiprintf_r+0x1d2>
 8003876:	2340      	movs	r3, #64	; 0x40
 8003878:	616b      	str	r3, [r5, #20]
 800387a:	2300      	movs	r3, #0
 800387c:	9309      	str	r3, [sp, #36]	; 0x24
 800387e:	2320      	movs	r3, #32
 8003880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003884:	2330      	movs	r3, #48	; 0x30
 8003886:	f04f 0901 	mov.w	r9, #1
 800388a:	f8cd 800c 	str.w	r8, [sp, #12]
 800388e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a34 <_svfiprintf_r+0x1ec>
 8003892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003896:	4623      	mov	r3, r4
 8003898:	469a      	mov	sl, r3
 800389a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800389e:	b10a      	cbz	r2, 80038a4 <_svfiprintf_r+0x5c>
 80038a0:	2a25      	cmp	r2, #37	; 0x25
 80038a2:	d1f9      	bne.n	8003898 <_svfiprintf_r+0x50>
 80038a4:	ebba 0b04 	subs.w	fp, sl, r4
 80038a8:	d00b      	beq.n	80038c2 <_svfiprintf_r+0x7a>
 80038aa:	465b      	mov	r3, fp
 80038ac:	4622      	mov	r2, r4
 80038ae:	4629      	mov	r1, r5
 80038b0:	4638      	mov	r0, r7
 80038b2:	f7ff ff6d 	bl	8003790 <__ssputs_r>
 80038b6:	3001      	adds	r0, #1
 80038b8:	f000 80aa 	beq.w	8003a10 <_svfiprintf_r+0x1c8>
 80038bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038be:	445a      	add	r2, fp
 80038c0:	9209      	str	r2, [sp, #36]	; 0x24
 80038c2:	f89a 3000 	ldrb.w	r3, [sl]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80a2 	beq.w	8003a10 <_svfiprintf_r+0x1c8>
 80038cc:	2300      	movs	r3, #0
 80038ce:	f04f 32ff 	mov.w	r2, #4294967295
 80038d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038d6:	f10a 0a01 	add.w	sl, sl, #1
 80038da:	9304      	str	r3, [sp, #16]
 80038dc:	9307      	str	r3, [sp, #28]
 80038de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038e2:	931a      	str	r3, [sp, #104]	; 0x68
 80038e4:	4654      	mov	r4, sl
 80038e6:	2205      	movs	r2, #5
 80038e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ec:	4851      	ldr	r0, [pc, #324]	; (8003a34 <_svfiprintf_r+0x1ec>)
 80038ee:	f000 fa43 	bl	8003d78 <memchr>
 80038f2:	9a04      	ldr	r2, [sp, #16]
 80038f4:	b9d8      	cbnz	r0, 800392e <_svfiprintf_r+0xe6>
 80038f6:	06d0      	lsls	r0, r2, #27
 80038f8:	bf44      	itt	mi
 80038fa:	2320      	movmi	r3, #32
 80038fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003900:	0711      	lsls	r1, r2, #28
 8003902:	bf44      	itt	mi
 8003904:	232b      	movmi	r3, #43	; 0x2b
 8003906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800390a:	f89a 3000 	ldrb.w	r3, [sl]
 800390e:	2b2a      	cmp	r3, #42	; 0x2a
 8003910:	d015      	beq.n	800393e <_svfiprintf_r+0xf6>
 8003912:	4654      	mov	r4, sl
 8003914:	2000      	movs	r0, #0
 8003916:	f04f 0c0a 	mov.w	ip, #10
 800391a:	9a07      	ldr	r2, [sp, #28]
 800391c:	4621      	mov	r1, r4
 800391e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003922:	3b30      	subs	r3, #48	; 0x30
 8003924:	2b09      	cmp	r3, #9
 8003926:	d94e      	bls.n	80039c6 <_svfiprintf_r+0x17e>
 8003928:	b1b0      	cbz	r0, 8003958 <_svfiprintf_r+0x110>
 800392a:	9207      	str	r2, [sp, #28]
 800392c:	e014      	b.n	8003958 <_svfiprintf_r+0x110>
 800392e:	eba0 0308 	sub.w	r3, r0, r8
 8003932:	fa09 f303 	lsl.w	r3, r9, r3
 8003936:	4313      	orrs	r3, r2
 8003938:	46a2      	mov	sl, r4
 800393a:	9304      	str	r3, [sp, #16]
 800393c:	e7d2      	b.n	80038e4 <_svfiprintf_r+0x9c>
 800393e:	9b03      	ldr	r3, [sp, #12]
 8003940:	1d19      	adds	r1, r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	9103      	str	r1, [sp, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	bfbb      	ittet	lt
 800394a:	425b      	neglt	r3, r3
 800394c:	f042 0202 	orrlt.w	r2, r2, #2
 8003950:	9307      	strge	r3, [sp, #28]
 8003952:	9307      	strlt	r3, [sp, #28]
 8003954:	bfb8      	it	lt
 8003956:	9204      	strlt	r2, [sp, #16]
 8003958:	7823      	ldrb	r3, [r4, #0]
 800395a:	2b2e      	cmp	r3, #46	; 0x2e
 800395c:	d10c      	bne.n	8003978 <_svfiprintf_r+0x130>
 800395e:	7863      	ldrb	r3, [r4, #1]
 8003960:	2b2a      	cmp	r3, #42	; 0x2a
 8003962:	d135      	bne.n	80039d0 <_svfiprintf_r+0x188>
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	3402      	adds	r4, #2
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	9203      	str	r2, [sp, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	bfb8      	it	lt
 8003972:	f04f 33ff 	movlt.w	r3, #4294967295
 8003976:	9305      	str	r3, [sp, #20]
 8003978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a44 <_svfiprintf_r+0x1fc>
 800397c:	2203      	movs	r2, #3
 800397e:	4650      	mov	r0, sl
 8003980:	7821      	ldrb	r1, [r4, #0]
 8003982:	f000 f9f9 	bl	8003d78 <memchr>
 8003986:	b140      	cbz	r0, 800399a <_svfiprintf_r+0x152>
 8003988:	2340      	movs	r3, #64	; 0x40
 800398a:	eba0 000a 	sub.w	r0, r0, sl
 800398e:	fa03 f000 	lsl.w	r0, r3, r0
 8003992:	9b04      	ldr	r3, [sp, #16]
 8003994:	3401      	adds	r4, #1
 8003996:	4303      	orrs	r3, r0
 8003998:	9304      	str	r3, [sp, #16]
 800399a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800399e:	2206      	movs	r2, #6
 80039a0:	4825      	ldr	r0, [pc, #148]	; (8003a38 <_svfiprintf_r+0x1f0>)
 80039a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039a6:	f000 f9e7 	bl	8003d78 <memchr>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d038      	beq.n	8003a20 <_svfiprintf_r+0x1d8>
 80039ae:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <_svfiprintf_r+0x1f4>)
 80039b0:	bb1b      	cbnz	r3, 80039fa <_svfiprintf_r+0x1b2>
 80039b2:	9b03      	ldr	r3, [sp, #12]
 80039b4:	3307      	adds	r3, #7
 80039b6:	f023 0307 	bic.w	r3, r3, #7
 80039ba:	3308      	adds	r3, #8
 80039bc:	9303      	str	r3, [sp, #12]
 80039be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039c0:	4433      	add	r3, r6
 80039c2:	9309      	str	r3, [sp, #36]	; 0x24
 80039c4:	e767      	b.n	8003896 <_svfiprintf_r+0x4e>
 80039c6:	460c      	mov	r4, r1
 80039c8:	2001      	movs	r0, #1
 80039ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80039ce:	e7a5      	b.n	800391c <_svfiprintf_r+0xd4>
 80039d0:	2300      	movs	r3, #0
 80039d2:	f04f 0c0a 	mov.w	ip, #10
 80039d6:	4619      	mov	r1, r3
 80039d8:	3401      	adds	r4, #1
 80039da:	9305      	str	r3, [sp, #20]
 80039dc:	4620      	mov	r0, r4
 80039de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039e2:	3a30      	subs	r2, #48	; 0x30
 80039e4:	2a09      	cmp	r2, #9
 80039e6:	d903      	bls.n	80039f0 <_svfiprintf_r+0x1a8>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0c5      	beq.n	8003978 <_svfiprintf_r+0x130>
 80039ec:	9105      	str	r1, [sp, #20]
 80039ee:	e7c3      	b.n	8003978 <_svfiprintf_r+0x130>
 80039f0:	4604      	mov	r4, r0
 80039f2:	2301      	movs	r3, #1
 80039f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80039f8:	e7f0      	b.n	80039dc <_svfiprintf_r+0x194>
 80039fa:	ab03      	add	r3, sp, #12
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	462a      	mov	r2, r5
 8003a00:	4638      	mov	r0, r7
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <_svfiprintf_r+0x1f8>)
 8003a04:	a904      	add	r1, sp, #16
 8003a06:	f3af 8000 	nop.w
 8003a0a:	1c42      	adds	r2, r0, #1
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	d1d6      	bne.n	80039be <_svfiprintf_r+0x176>
 8003a10:	89ab      	ldrh	r3, [r5, #12]
 8003a12:	065b      	lsls	r3, r3, #25
 8003a14:	f53f af2c 	bmi.w	8003870 <_svfiprintf_r+0x28>
 8003a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a1a:	b01d      	add	sp, #116	; 0x74
 8003a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a20:	ab03      	add	r3, sp, #12
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	462a      	mov	r2, r5
 8003a26:	4638      	mov	r0, r7
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <_svfiprintf_r+0x1f8>)
 8003a2a:	a904      	add	r1, sp, #16
 8003a2c:	f000 f87c 	bl	8003b28 <_printf_i>
 8003a30:	e7eb      	b.n	8003a0a <_svfiprintf_r+0x1c2>
 8003a32:	bf00      	nop
 8003a34:	08003ebc 	.word	0x08003ebc
 8003a38:	08003ec6 	.word	0x08003ec6
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	08003791 	.word	0x08003791
 8003a44:	08003ec2 	.word	0x08003ec2

08003a48 <_printf_common>:
 8003a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4c:	4616      	mov	r6, r2
 8003a4e:	4699      	mov	r9, r3
 8003a50:	688a      	ldr	r2, [r1, #8]
 8003a52:	690b      	ldr	r3, [r1, #16]
 8003a54:	4607      	mov	r7, r0
 8003a56:	4293      	cmp	r3, r2
 8003a58:	bfb8      	it	lt
 8003a5a:	4613      	movlt	r3, r2
 8003a5c:	6033      	str	r3, [r6, #0]
 8003a5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a62:	460c      	mov	r4, r1
 8003a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a68:	b10a      	cbz	r2, 8003a6e <_printf_common+0x26>
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	0699      	lsls	r1, r3, #26
 8003a72:	bf42      	ittt	mi
 8003a74:	6833      	ldrmi	r3, [r6, #0]
 8003a76:	3302      	addmi	r3, #2
 8003a78:	6033      	strmi	r3, [r6, #0]
 8003a7a:	6825      	ldr	r5, [r4, #0]
 8003a7c:	f015 0506 	ands.w	r5, r5, #6
 8003a80:	d106      	bne.n	8003a90 <_printf_common+0x48>
 8003a82:	f104 0a19 	add.w	sl, r4, #25
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	6832      	ldr	r2, [r6, #0]
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	42ab      	cmp	r3, r5
 8003a8e:	dc28      	bgt.n	8003ae2 <_printf_common+0x9a>
 8003a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a94:	1e13      	subs	r3, r2, #0
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	bf18      	it	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	0692      	lsls	r2, r2, #26
 8003a9e:	d42d      	bmi.n	8003afc <_printf_common+0xb4>
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa8:	47c0      	blx	r8
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d020      	beq.n	8003af0 <_printf_common+0xa8>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	68e5      	ldr	r5, [r4, #12]
 8003ab2:	f003 0306 	and.w	r3, r3, #6
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf18      	it	ne
 8003aba:	2500      	movne	r5, #0
 8003abc:	6832      	ldr	r2, [r6, #0]
 8003abe:	f04f 0600 	mov.w	r6, #0
 8003ac2:	68a3      	ldr	r3, [r4, #8]
 8003ac4:	bf08      	it	eq
 8003ac6:	1aad      	subeq	r5, r5, r2
 8003ac8:	6922      	ldr	r2, [r4, #16]
 8003aca:	bf08      	it	eq
 8003acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bfc4      	itt	gt
 8003ad4:	1a9b      	subgt	r3, r3, r2
 8003ad6:	18ed      	addgt	r5, r5, r3
 8003ad8:	341a      	adds	r4, #26
 8003ada:	42b5      	cmp	r5, r6
 8003adc:	d11a      	bne.n	8003b14 <_printf_common+0xcc>
 8003ade:	2000      	movs	r0, #0
 8003ae0:	e008      	b.n	8003af4 <_printf_common+0xac>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	4652      	mov	r2, sl
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	4638      	mov	r0, r7
 8003aea:	47c0      	blx	r8
 8003aec:	3001      	adds	r0, #1
 8003aee:	d103      	bne.n	8003af8 <_printf_common+0xb0>
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af8:	3501      	adds	r5, #1
 8003afa:	e7c4      	b.n	8003a86 <_printf_common+0x3e>
 8003afc:	2030      	movs	r0, #48	; 0x30
 8003afe:	18e1      	adds	r1, r4, r3
 8003b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b0a:	4422      	add	r2, r4
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b12:	e7c5      	b.n	8003aa0 <_printf_common+0x58>
 8003b14:	2301      	movs	r3, #1
 8003b16:	4622      	mov	r2, r4
 8003b18:	4649      	mov	r1, r9
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	47c0      	blx	r8
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d0e6      	beq.n	8003af0 <_printf_common+0xa8>
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7d9      	b.n	8003ada <_printf_common+0x92>
	...

08003b28 <_printf_i>:
 8003b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	7e27      	ldrb	r7, [r4, #24]
 8003b30:	4691      	mov	r9, r2
 8003b32:	2f78      	cmp	r7, #120	; 0x78
 8003b34:	4680      	mov	r8, r0
 8003b36:	469a      	mov	sl, r3
 8003b38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b3e:	d807      	bhi.n	8003b50 <_printf_i+0x28>
 8003b40:	2f62      	cmp	r7, #98	; 0x62
 8003b42:	d80a      	bhi.n	8003b5a <_printf_i+0x32>
 8003b44:	2f00      	cmp	r7, #0
 8003b46:	f000 80d9 	beq.w	8003cfc <_printf_i+0x1d4>
 8003b4a:	2f58      	cmp	r7, #88	; 0x58
 8003b4c:	f000 80a4 	beq.w	8003c98 <_printf_i+0x170>
 8003b50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b58:	e03a      	b.n	8003bd0 <_printf_i+0xa8>
 8003b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b5e:	2b15      	cmp	r3, #21
 8003b60:	d8f6      	bhi.n	8003b50 <_printf_i+0x28>
 8003b62:	a001      	add	r0, pc, #4	; (adr r0, 8003b68 <_printf_i+0x40>)
 8003b64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b68:	08003bc1 	.word	0x08003bc1
 8003b6c:	08003bd5 	.word	0x08003bd5
 8003b70:	08003b51 	.word	0x08003b51
 8003b74:	08003b51 	.word	0x08003b51
 8003b78:	08003b51 	.word	0x08003b51
 8003b7c:	08003b51 	.word	0x08003b51
 8003b80:	08003bd5 	.word	0x08003bd5
 8003b84:	08003b51 	.word	0x08003b51
 8003b88:	08003b51 	.word	0x08003b51
 8003b8c:	08003b51 	.word	0x08003b51
 8003b90:	08003b51 	.word	0x08003b51
 8003b94:	08003ce3 	.word	0x08003ce3
 8003b98:	08003c05 	.word	0x08003c05
 8003b9c:	08003cc5 	.word	0x08003cc5
 8003ba0:	08003b51 	.word	0x08003b51
 8003ba4:	08003b51 	.word	0x08003b51
 8003ba8:	08003d05 	.word	0x08003d05
 8003bac:	08003b51 	.word	0x08003b51
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003b51 	.word	0x08003b51
 8003bb8:	08003b51 	.word	0x08003b51
 8003bbc:	08003ccd 	.word	0x08003ccd
 8003bc0:	680b      	ldr	r3, [r1, #0]
 8003bc2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bc6:	1d1a      	adds	r2, r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	600a      	str	r2, [r1, #0]
 8003bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0a4      	b.n	8003d1e <_printf_i+0x1f6>
 8003bd4:	6825      	ldr	r5, [r4, #0]
 8003bd6:	6808      	ldr	r0, [r1, #0]
 8003bd8:	062e      	lsls	r6, r5, #24
 8003bda:	f100 0304 	add.w	r3, r0, #4
 8003bde:	d50a      	bpl.n	8003bf6 <_printf_i+0xce>
 8003be0:	6805      	ldr	r5, [r0, #0]
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	da03      	bge.n	8003bf0 <_printf_i+0xc8>
 8003be8:	232d      	movs	r3, #45	; 0x2d
 8003bea:	426d      	negs	r5, r5
 8003bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	485e      	ldr	r0, [pc, #376]	; (8003d6c <_printf_i+0x244>)
 8003bf4:	e019      	b.n	8003c2a <_printf_i+0x102>
 8003bf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bfa:	6805      	ldr	r5, [r0, #0]
 8003bfc:	600b      	str	r3, [r1, #0]
 8003bfe:	bf18      	it	ne
 8003c00:	b22d      	sxthne	r5, r5
 8003c02:	e7ef      	b.n	8003be4 <_printf_i+0xbc>
 8003c04:	680b      	ldr	r3, [r1, #0]
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	1d18      	adds	r0, r3, #4
 8003c0a:	6008      	str	r0, [r1, #0]
 8003c0c:	0628      	lsls	r0, r5, #24
 8003c0e:	d501      	bpl.n	8003c14 <_printf_i+0xec>
 8003c10:	681d      	ldr	r5, [r3, #0]
 8003c12:	e002      	b.n	8003c1a <_printf_i+0xf2>
 8003c14:	0669      	lsls	r1, r5, #25
 8003c16:	d5fb      	bpl.n	8003c10 <_printf_i+0xe8>
 8003c18:	881d      	ldrh	r5, [r3, #0]
 8003c1a:	2f6f      	cmp	r7, #111	; 0x6f
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2308      	moveq	r3, #8
 8003c20:	230a      	movne	r3, #10
 8003c22:	4852      	ldr	r0, [pc, #328]	; (8003d6c <_printf_i+0x244>)
 8003c24:	2100      	movs	r1, #0
 8003c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c2a:	6866      	ldr	r6, [r4, #4]
 8003c2c:	2e00      	cmp	r6, #0
 8003c2e:	bfa8      	it	ge
 8003c30:	6821      	ldrge	r1, [r4, #0]
 8003c32:	60a6      	str	r6, [r4, #8]
 8003c34:	bfa4      	itt	ge
 8003c36:	f021 0104 	bicge.w	r1, r1, #4
 8003c3a:	6021      	strge	r1, [r4, #0]
 8003c3c:	b90d      	cbnz	r5, 8003c42 <_printf_i+0x11a>
 8003c3e:	2e00      	cmp	r6, #0
 8003c40:	d04d      	beq.n	8003cde <_printf_i+0x1b6>
 8003c42:	4616      	mov	r6, r2
 8003c44:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c48:	fb03 5711 	mls	r7, r3, r1, r5
 8003c4c:	5dc7      	ldrb	r7, [r0, r7]
 8003c4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c52:	462f      	mov	r7, r5
 8003c54:	42bb      	cmp	r3, r7
 8003c56:	460d      	mov	r5, r1
 8003c58:	d9f4      	bls.n	8003c44 <_printf_i+0x11c>
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d10b      	bne.n	8003c76 <_printf_i+0x14e>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	07df      	lsls	r7, r3, #31
 8003c62:	d508      	bpl.n	8003c76 <_printf_i+0x14e>
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	6861      	ldr	r1, [r4, #4]
 8003c68:	4299      	cmp	r1, r3
 8003c6a:	bfde      	ittt	le
 8003c6c:	2330      	movle	r3, #48	; 0x30
 8003c6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c76:	1b92      	subs	r2, r2, r6
 8003c78:	6122      	str	r2, [r4, #16]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	4640      	mov	r0, r8
 8003c80:	f8cd a000 	str.w	sl, [sp]
 8003c84:	aa03      	add	r2, sp, #12
 8003c86:	f7ff fedf 	bl	8003a48 <_printf_common>
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d14c      	bne.n	8003d28 <_printf_i+0x200>
 8003c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c92:	b004      	add	sp, #16
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	4834      	ldr	r0, [pc, #208]	; (8003d6c <_printf_i+0x244>)
 8003c9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c9e:	680e      	ldr	r6, [r1, #0]
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ca6:	061f      	lsls	r7, r3, #24
 8003ca8:	600e      	str	r6, [r1, #0]
 8003caa:	d514      	bpl.n	8003cd6 <_printf_i+0x1ae>
 8003cac:	07d9      	lsls	r1, r3, #31
 8003cae:	bf44      	itt	mi
 8003cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cb4:	6023      	strmi	r3, [r4, #0]
 8003cb6:	b91d      	cbnz	r5, 8003cc0 <_printf_i+0x198>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	f023 0320 	bic.w	r3, r3, #32
 8003cbe:	6023      	str	r3, [r4, #0]
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	e7af      	b.n	8003c24 <_printf_i+0xfc>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	f043 0320 	orr.w	r3, r3, #32
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	2378      	movs	r3, #120	; 0x78
 8003cce:	4828      	ldr	r0, [pc, #160]	; (8003d70 <_printf_i+0x248>)
 8003cd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cd4:	e7e3      	b.n	8003c9e <_printf_i+0x176>
 8003cd6:	065e      	lsls	r6, r3, #25
 8003cd8:	bf48      	it	mi
 8003cda:	b2ad      	uxthmi	r5, r5
 8003cdc:	e7e6      	b.n	8003cac <_printf_i+0x184>
 8003cde:	4616      	mov	r6, r2
 8003ce0:	e7bb      	b.n	8003c5a <_printf_i+0x132>
 8003ce2:	680b      	ldr	r3, [r1, #0]
 8003ce4:	6826      	ldr	r6, [r4, #0]
 8003ce6:	1d1d      	adds	r5, r3, #4
 8003ce8:	6960      	ldr	r0, [r4, #20]
 8003cea:	600d      	str	r5, [r1, #0]
 8003cec:	0635      	lsls	r5, r6, #24
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	d501      	bpl.n	8003cf6 <_printf_i+0x1ce>
 8003cf2:	6018      	str	r0, [r3, #0]
 8003cf4:	e002      	b.n	8003cfc <_printf_i+0x1d4>
 8003cf6:	0671      	lsls	r1, r6, #25
 8003cf8:	d5fb      	bpl.n	8003cf2 <_printf_i+0x1ca>
 8003cfa:	8018      	strh	r0, [r3, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4616      	mov	r6, r2
 8003d00:	6123      	str	r3, [r4, #16]
 8003d02:	e7ba      	b.n	8003c7a <_printf_i+0x152>
 8003d04:	680b      	ldr	r3, [r1, #0]
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	600a      	str	r2, [r1, #0]
 8003d0a:	681e      	ldr	r6, [r3, #0]
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4630      	mov	r0, r6
 8003d10:	6862      	ldr	r2, [r4, #4]
 8003d12:	f000 f831 	bl	8003d78 <memchr>
 8003d16:	b108      	cbz	r0, 8003d1c <_printf_i+0x1f4>
 8003d18:	1b80      	subs	r0, r0, r6
 8003d1a:	6060      	str	r0, [r4, #4]
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	6123      	str	r3, [r4, #16]
 8003d20:	2300      	movs	r3, #0
 8003d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d26:	e7a8      	b.n	8003c7a <_printf_i+0x152>
 8003d28:	4632      	mov	r2, r6
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	6923      	ldr	r3, [r4, #16]
 8003d30:	47d0      	blx	sl
 8003d32:	3001      	adds	r0, #1
 8003d34:	d0ab      	beq.n	8003c8e <_printf_i+0x166>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	079b      	lsls	r3, r3, #30
 8003d3a:	d413      	bmi.n	8003d64 <_printf_i+0x23c>
 8003d3c:	68e0      	ldr	r0, [r4, #12]
 8003d3e:	9b03      	ldr	r3, [sp, #12]
 8003d40:	4298      	cmp	r0, r3
 8003d42:	bfb8      	it	lt
 8003d44:	4618      	movlt	r0, r3
 8003d46:	e7a4      	b.n	8003c92 <_printf_i+0x16a>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4632      	mov	r2, r6
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	4640      	mov	r0, r8
 8003d50:	47d0      	blx	sl
 8003d52:	3001      	adds	r0, #1
 8003d54:	d09b      	beq.n	8003c8e <_printf_i+0x166>
 8003d56:	3501      	adds	r5, #1
 8003d58:	68e3      	ldr	r3, [r4, #12]
 8003d5a:	9903      	ldr	r1, [sp, #12]
 8003d5c:	1a5b      	subs	r3, r3, r1
 8003d5e:	42ab      	cmp	r3, r5
 8003d60:	dcf2      	bgt.n	8003d48 <_printf_i+0x220>
 8003d62:	e7eb      	b.n	8003d3c <_printf_i+0x214>
 8003d64:	2500      	movs	r5, #0
 8003d66:	f104 0619 	add.w	r6, r4, #25
 8003d6a:	e7f5      	b.n	8003d58 <_printf_i+0x230>
 8003d6c:	08003ecd 	.word	0x08003ecd
 8003d70:	08003ede 	.word	0x08003ede

08003d74 <__retarget_lock_acquire_recursive>:
 8003d74:	4770      	bx	lr

08003d76 <__retarget_lock_release_recursive>:
 8003d76:	4770      	bx	lr

08003d78 <memchr>:
 8003d78:	4603      	mov	r3, r0
 8003d7a:	b510      	push	{r4, lr}
 8003d7c:	b2c9      	uxtb	r1, r1
 8003d7e:	4402      	add	r2, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	d101      	bne.n	8003d8a <memchr+0x12>
 8003d86:	2000      	movs	r0, #0
 8003d88:	e003      	b.n	8003d92 <memchr+0x1a>
 8003d8a:	7804      	ldrb	r4, [r0, #0]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	428c      	cmp	r4, r1
 8003d90:	d1f6      	bne.n	8003d80 <memchr+0x8>
 8003d92:	bd10      	pop	{r4, pc}

08003d94 <memcpy>:
 8003d94:	440a      	add	r2, r1
 8003d96:	4291      	cmp	r1, r2
 8003d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d9c:	d100      	bne.n	8003da0 <memcpy+0xc>
 8003d9e:	4770      	bx	lr
 8003da0:	b510      	push	{r4, lr}
 8003da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003da6:	4291      	cmp	r1, r2
 8003da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dac:	d1f9      	bne.n	8003da2 <memcpy+0xe>
 8003dae:	bd10      	pop	{r4, pc}

08003db0 <memmove>:
 8003db0:	4288      	cmp	r0, r1
 8003db2:	b510      	push	{r4, lr}
 8003db4:	eb01 0402 	add.w	r4, r1, r2
 8003db8:	d902      	bls.n	8003dc0 <memmove+0x10>
 8003dba:	4284      	cmp	r4, r0
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	d807      	bhi.n	8003dd0 <memmove+0x20>
 8003dc0:	1e43      	subs	r3, r0, #1
 8003dc2:	42a1      	cmp	r1, r4
 8003dc4:	d008      	beq.n	8003dd8 <memmove+0x28>
 8003dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dce:	e7f8      	b.n	8003dc2 <memmove+0x12>
 8003dd0:	4601      	mov	r1, r0
 8003dd2:	4402      	add	r2, r0
 8003dd4:	428a      	cmp	r2, r1
 8003dd6:	d100      	bne.n	8003dda <memmove+0x2a>
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003de2:	e7f7      	b.n	8003dd4 <memmove+0x24>

08003de4 <_realloc_r>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	4607      	mov	r7, r0
 8003de8:	4614      	mov	r4, r2
 8003dea:	460e      	mov	r6, r1
 8003dec:	b921      	cbnz	r1, 8003df8 <_realloc_r+0x14>
 8003dee:	4611      	mov	r1, r2
 8003df0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003df4:	f7ff bc36 	b.w	8003664 <_malloc_r>
 8003df8:	b922      	cbnz	r2, 8003e04 <_realloc_r+0x20>
 8003dfa:	f7ff fbe7 	bl	80035cc <_free_r>
 8003dfe:	4625      	mov	r5, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e04:	f000 f814 	bl	8003e30 <_malloc_usable_size_r>
 8003e08:	42a0      	cmp	r0, r4
 8003e0a:	d20f      	bcs.n	8003e2c <_realloc_r+0x48>
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	4638      	mov	r0, r7
 8003e10:	f7ff fc28 	bl	8003664 <_malloc_r>
 8003e14:	4605      	mov	r5, r0
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d0f2      	beq.n	8003e00 <_realloc_r+0x1c>
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	f7ff ffb9 	bl	8003d94 <memcpy>
 8003e22:	4631      	mov	r1, r6
 8003e24:	4638      	mov	r0, r7
 8003e26:	f7ff fbd1 	bl	80035cc <_free_r>
 8003e2a:	e7e9      	b.n	8003e00 <_realloc_r+0x1c>
 8003e2c:	4635      	mov	r5, r6
 8003e2e:	e7e7      	b.n	8003e00 <_realloc_r+0x1c>

08003e30 <_malloc_usable_size_r>:
 8003e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e34:	1f18      	subs	r0, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfbc      	itt	lt
 8003e3a:	580b      	ldrlt	r3, [r1, r0]
 8003e3c:	18c0      	addlt	r0, r0, r3
 8003e3e:	4770      	bx	lr

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
